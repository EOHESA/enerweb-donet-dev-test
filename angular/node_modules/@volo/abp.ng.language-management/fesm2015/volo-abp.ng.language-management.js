import { __decorate } from 'tslib';
import { RestService, ListService, ConfigStateService, ApplicationConfigurationService, LocalizationService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { Confirmation, ConfirmationService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, ToolbarAction, EntityProp, FormProp, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.theme.shared/extensions';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, Injector, Renderer2, InjectionToken, NgModule } from '@angular/core';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { of } from 'rxjs';
import { tap, switchMap, pluck, finalize, withLatestFrom, take, map, mapTo } from 'rxjs/operators';
import snq from 'snq';
import { Validators } from '@angular/forms';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { CommercialUiModule } from '@volo/abp.commercial.ng.ui';
import { RouterModule } from '@angular/router';

class GetLanguages {
    constructor(payload = {}) {
        this.payload = payload;
    }
}
GetLanguages.type = '[LanguageManagement] Get';
class GetLanguageById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetLanguageById.type = '[LanguageManagement] Get By Id';
class CreateUpdateLanguage {
    constructor(payload, id) {
        this.payload = payload;
        this.id = id;
    }
}
CreateUpdateLanguage.type = '[LanguageManagement] Create';
class DeleteLanguage {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteLanguage.type = '[LanguageManagement] Delete';
class SetAsDefaultLanguage {
    constructor(payload) {
        this.payload = payload;
    }
}
SetAsDefaultLanguage.type = '[LanguageManagement] Set As Default';
class GetLanguageTexts {
    constructor(payload) {
        this.payload = payload;
    }
}
GetLanguageTexts.type = '[LanguageManagement] Get Texts';
class GetLanguageCultures {
}
GetLanguageCultures.type = '[LanguageManagement] Get Cultures';
class GetLanguageResources {
}
GetLanguageResources.type = '[LanguageManagement] Get Resources';
class UpdateLanguageTextByName {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateLanguageTextByName.type = '[LanguageManagement] Update Language Text By Name';
class RestoreLanguageTextByName {
    constructor(payload) {
        this.payload = payload;
    }
}
RestoreLanguageTextByName.type = '[LanguageManagement] Restore Language Text By Name';

class LanguageTextService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'LanguageManagement';
        this.get = (resourceName, cultureName, name, baseCultureName) => this.restService.request({
            method: 'GET',
            url: `/api/language-management/language-texts/${resourceName}/${cultureName}/${name}`,
            params: { baseCultureName },
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/language-management/language-texts`,
            params: {
                filter: input.filter,
                resourceName: input.resourceName,
                baseCultureName: input.baseCultureName,
                targetCultureName: input.targetCultureName,
                getOnlyEmptyValues: input.getOnlyEmptyValues,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.restoreToDefault = (resourceName, cultureName, name) => this.restService.request({
            method: 'PUT',
            url: `/api/language-management/language-texts/${resourceName}/${cultureName}/${name}/restore`,
        }, { apiName: this.apiName });
        this.update = (resourceName, cultureName, name, value) => this.restService.request({
            method: 'PUT',
            url: `/api/language-management/language-texts/${resourceName}/${cultureName}/${name}`,
            params: { value },
        }, { apiName: this.apiName });
    }
}
LanguageTextService.ɵprov = ɵɵdefineInjectable({ factory: function LanguageTextService_Factory() { return new LanguageTextService(ɵɵinject(RestService)); }, token: LanguageTextService, providedIn: "root" });
LanguageTextService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LanguageTextService.ctorParameters = () => [
    { type: RestService }
];

class LanguageService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'LanguageManagement';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/language-management/languages`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/language-management/languages/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/language-management/languages/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: `/api/language-management/languages/all`,
        }, { apiName: this.apiName });
        this.getCulturelist = () => this.restService.request({
            method: 'GET',
            url: `/api/language-management/languages/culture-list`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/language-management/languages`,
            params: {
                filter: input.filter,
                resourceName: input.resourceName,
                baseCultureName: input.baseCultureName,
                targetCultureName: input.targetCultureName,
                getOnlyEmptyValues: input.getOnlyEmptyValues,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getResources = () => this.restService.request({
            method: 'GET',
            url: `/api/language-management/languages/resources`,
        }, { apiName: this.apiName });
        this.setAsDefault = (id) => this.restService.request({
            method: 'PUT',
            url: `/api/language-management/languages/${id}/set-as-default`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/language-management/languages/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
LanguageService.ɵprov = ɵɵdefineInjectable({ factory: function LanguageService_Factory() { return new LanguageService(ɵɵinject(RestService)); }, token: LanguageService, providedIn: "root" });
LanguageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LanguageService.ctorParameters = () => [
    { type: RestService }
];

let LanguageManagementState = class LanguageManagementState {
    constructor(languageService, languageTextService) {
        this.languageService = languageService;
        this.languageTextService = languageTextService;
    }
    static getLanguages({ languageResponse }) {
        return languageResponse.items || [];
    }
    static getLanguagesTotalCount({ languageResponse }) {
        return languageResponse.totalCount;
    }
    static getLanguageTexts({ languageTextsResponse }) {
        return languageTextsResponse.items || [];
    }
    static getLanguageTextsTotalCount({ languageTextsResponse }) {
        return languageTextsResponse.totalCount || 0;
    }
    static getCultures({ cultures }) {
        return cultures;
    }
    static getResources({ resources }) {
        return resources;
    }
    get({ patchState }, { payload }) {
        return this.languageService.getList(payload).pipe(tap(languageResponse => {
            patchState({
                languageResponse,
            });
        }));
    }
    getById({ patchState }, { payload }) {
        return this.languageService.get(payload).pipe(tap(selectedItem => patchState({
            selectedItem,
        })));
    }
    delete({ dispatch }, { payload }) {
        return this.languageService.delete(payload);
    }
    setAsDefault({ dispatch }, { payload }) {
        return this.languageService.setAsDefault(payload);
    }
    create({ dispatch }, { payload, id }) {
        return id
            ? this.languageService.update(id, payload)
            : this.languageService.create(payload);
    }
    getLanguageTexts({ patchState }, { payload }) {
        return this.languageTextService.getList(payload).pipe(tap(languageTextsResponse => patchState({
            languageTextsResponse,
        })));
    }
    getCultures({ patchState }) {
        return this.languageService.getCulturelist().pipe(tap(cultures => patchState({
            cultures,
        })));
    }
    getResources({ patchState }) {
        return this.languageService.getResources().pipe(tap(resources => patchState({
            resources,
        })));
    }
    updateLanguageTextByName(_, { payload }) {
        return this.languageTextService.update(payload.resourceName, payload.cultureName, payload.name, payload.value);
    }
    restoreLanguageTextByName(_, { payload }) {
        return this.languageTextService.restoreToDefault(payload.resourceName, payload.cultureName, payload.name);
    }
};
LanguageManagementState.decorators = [
    { type: Injectable }
];
LanguageManagementState.ctorParameters = () => [
    { type: LanguageService },
    { type: LanguageTextService }
];
__decorate([
    Action(GetLanguages)
], LanguageManagementState.prototype, "get", null);
__decorate([
    Action(GetLanguageById)
], LanguageManagementState.prototype, "getById", null);
__decorate([
    Action(DeleteLanguage)
], LanguageManagementState.prototype, "delete", null);
__decorate([
    Action(SetAsDefaultLanguage)
], LanguageManagementState.prototype, "setAsDefault", null);
__decorate([
    Action(CreateUpdateLanguage)
], LanguageManagementState.prototype, "create", null);
__decorate([
    Action(GetLanguageTexts)
], LanguageManagementState.prototype, "getLanguageTexts", null);
__decorate([
    Action(GetLanguageCultures)
], LanguageManagementState.prototype, "getCultures", null);
__decorate([
    Action(GetLanguageResources)
], LanguageManagementState.prototype, "getResources", null);
__decorate([
    Action(UpdateLanguageTextByName)
], LanguageManagementState.prototype, "updateLanguageTextByName", null);
__decorate([
    Action(RestoreLanguageTextByName)
], LanguageManagementState.prototype, "restoreLanguageTextByName", null);
__decorate([
    Selector()
], LanguageManagementState, "getLanguages", null);
__decorate([
    Selector()
], LanguageManagementState, "getLanguagesTotalCount", null);
__decorate([
    Selector()
], LanguageManagementState, "getLanguageTexts", null);
__decorate([
    Selector()
], LanguageManagementState, "getLanguageTextsTotalCount", null);
__decorate([
    Selector()
], LanguageManagementState, "getCultures", null);
__decorate([
    Selector()
], LanguageManagementState, "getResources", null);
LanguageManagementState = __decorate([
    State({
        name: 'LanguageManagementState',
        defaults: {
            languageResponse: {},
            selectedItem: {},
            cultures: [],
            resources: [],
        },
    })
], LanguageManagementState);

var flagIcons = [
    'ad',
    'ae',
    'af',
    'ag',
    'ai',
    'al',
    'am',
    'ao',
    'ar',
    'as',
    'at',
    'au',
    'aw',
    'ax',
    'az',
    'ba',
    'bb',
    'bd',
    'be',
    'bf',
    'bg',
    'bh',
    'bi',
    'bj',
    'bl',
    'bm',
    'bn',
    'bo',
    'bq',
    'br',
    'bs',
    'bt',
    'bw',
    'by',
    'bz',
    'ca',
    'cc',
    'cd',
    'cf',
    'cg',
    'ch',
    'ci',
    'ck',
    'cl',
    'cm',
    'cn',
    'co',
    'cr',
    'cu',
    'cv',
    'cw',
    'cx',
    'cy',
    'cz',
    'de',
    'dj',
    'dk',
    'do',
    'dz',
    'ec',
    'ee',
    'eg',
    'eh',
    'er',
    'es',
    'et',
    'fi',
    'fj',
    'fk',
    'fm',
    'fo',
    'fr',
    'ga',
    'gb',
    'gd',
    'ge',
    'gf',
    'gg',
    'gh',
    'gi',
    'gl',
    'gm',
    'gn',
    'gp',
    'gq',
    'gr',
    'gs',
    'gt',
    'gu',
    'gw',
    'gy',
    'hk',
    'hn',
    'hr',
    'hr',
    'ht',
    'id',
    'ie',
    'il',
    'im',
    'in',
    'io',
    'iq',
    'ir',
    'is',
    'it',
    'je',
    'jm',
    'jo',
    'jp',
    'ke',
    'kg',
    'kh',
    'ki',
    'km',
    'kn',
    'kp',
    'kr',
    'kw',
    'ky',
    'kz',
    'la',
    'lb',
    'lc',
    'li',
    'lk',
    'lr',
    'ls',
    'lt',
    'lu',
    'lv',
    'ly',
    'ma',
    'mc',
    'md',
    'me',
    'mf',
    'mg',
    'mh',
    'mk',
    'ml',
    'mm',
    'mn',
    'mo',
    'mp',
    'mq',
    'mr',
    'ms',
    'mt',
    'mu',
    'mv',
    'mw',
    'mx',
    'my',
    'mz',
    'na',
    'nc',
    'ne',
    'nf',
    'ng',
    'ni',
    'nl',
    'no',
    'nr',
    'nu',
    'nz',
    'om',
    'pa',
    'pe',
    'pf',
    'pg',
    'ph',
    'pk',
    'pl',
    'pm',
    'pn',
    'pr',
    'ps',
    'pt',
    'pw',
    'py',
    'qa',
    're',
    'ro',
    'rs',
    'ru',
    'rw',
    'sa',
    'sb',
    'sc',
    'sd',
    'se',
    'sg',
    'sh',
    'si',
    'sj',
    'sk',
    'sl',
    'sm',
    'sn',
    'so',
    'sr',
    'ss',
    'st',
    'sv',
    'sx',
    'sy',
    'sz',
    'tc',
    'td',
    'tf',
    'tg',
    'th',
    'tj',
    'tk',
    'tl',
    'tm',
    'tn',
    'to',
    'tr',
    'tt',
    'tv',
    'tw',
    'tz',
    'ua',
    'ug',
    'us',
    'uy',
    'uz',
    'va',
    'vc',
    've',
    'vg',
    'vi',
    'vn',
    'vu',
    'wf',
    'ws',
    'xk',
    'ye',
    'yt',
    'za',
    'zm',
    'zw',
];

const ɵ0 = "LanguageManagement.LanguagesComponent" /* Languages */;
class LanguagesComponent {
    constructor(list, confirmationService, store, injector, configState, appConfigService) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.store = store;
        this.injector = injector;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.isModalVisible = false;
        this.modalBusy = false;
        this.flagIcons = flagIcons;
    }
    createForm() {
        this.store
            .select(LanguageManagementState.getCultures)
            .pipe(switchMap(cultures => cultures.length ? of(cultures) : this.store.dispatch(new GetLanguageCultures())))
            .subscribe(() => {
            const data = new FormPropData(this.injector, this.selected);
            this.form = generateFormFromProps(data);
        });
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetLanguages(query))).subscribe();
    }
    ngOnInit() {
        this.hookToQuery();
    }
    openModal() {
        this.createForm();
        this.isModalVisible = true;
    }
    add() {
        this.selected = {};
        this.openModal();
    }
    edit(id) {
        this.store
            .dispatch(new GetLanguageById(id))
            .pipe(pluck('LanguageManagementState', 'selectedItem'))
            .subscribe(selected => {
            this.selected = selected;
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(new CreateUpdateLanguage(this.form.value, this.selected.id))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
            if (!this.selected.id) {
                this.appConfigService.getConfiguration().subscribe(res => this.configState.setState(res));
            }
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('LanguageManagement::LanguageDeletionConfirmationMessage', 'LanguageManagement::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteLanguage(id)).subscribe(() => this.list.get());
            }
        });
    }
    setAsDefault(id) {
        this.store.dispatch(new SetAsDefaultLanguage(id)).subscribe(() => this.list.get());
    }
}
LanguagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-languages',
                template: "<ng-container *ngIf=\"datas$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'LanguageManagement::Languages' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div id=\"data-tables-table-filter\" class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data\"\r\n        [recordsTotal]=\"totalCount$ | async\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #displayName let-data>{{ data.displayName }}</ng-template>\r\n<ng-template #defaultLanguage let-data\r\n  ><strong\r\n    >{{ data.displayName }} ({{ 'LanguageManagement::DefaultLanguage' | abpLocalization }})</strong\r\n  ></ng-template\r\n>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (selected?.id ? 'LanguageManagement::Edit' : 'LanguageManagement::CreateNewLanguage')\r\n          | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <div class=\"mt-2\">\r\n        <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"form?.invalid\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0,
                    },
                ]
            },] }
];
LanguagesComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: Store },
    { type: Injector },
    { type: ConfigStateService },
    { type: ApplicationConfigurationService }
];
__decorate([
    Select(LanguageManagementState.getLanguages)
], LanguagesComponent.prototype, "datas$", void 0);
__decorate([
    Select(LanguageManagementState.getLanguagesTotalCount)
], LanguagesComponent.prototype, "totalCount$", void 0);
__decorate([
    Select(LanguageManagementState.getCultures)
], LanguagesComponent.prototype, "cultures$", void 0);

const ɵ0$1 = "LanguageManagement.LanguageTextsComponent" /* LanguageTexts */;
class LanguageTextsComponent {
    constructor(list, store, renderer, configState) {
        this.list = list;
        this.store = store;
        this.renderer = renderer;
        this.configState = configState;
        this.pageQuery = {};
        this.isModalVisible = false;
        this.modalBusy = false;
        this.resources = [];
    }
    ngOnInit() {
        this.languages = this.configState.getDeep('localization.languages');
        this.store.dispatch(new GetLanguageResources()).subscribe(() => {
            this.resources = this.store.selectSnapshot(LanguageManagementState.getResources);
        });
        this.pageQuery = {
            baseCultureName: this.languages[0].cultureName,
            targetCultureName: snq(() => this.languages[1].cultureName, this.languages[0].cultureName),
            getOnlyEmptyValues: false,
        };
        this.hookToQuery();
        this.columns = [
            { field: 'name', header: 'LanguageManagement::Key' },
            { field: 'baseValue', header: 'LanguageManagement::BaseValue' },
            { field: 'value', header: 'LanguageManagement::Value' },
            { field: 'resourceName', header: 'LanguageManagement::ResourceName' },
        ];
    }
    openModal() {
        this.isModalVisible = true;
    }
    closeModal() {
        this.isModalVisible = false;
        this.selected = {};
        this.selectedIndex = null;
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.store.dispatch(new GetLanguageTexts(Object.assign(Object.assign({}, query), this.pageQuery))))
            .pipe(withLatestFrom(this.datas$))
            .subscribe(([_, datas]) => {
            if (this.isModalVisible) {
                if (!datas[this.selectedIndex]) {
                    this.closeModal();
                    return;
                }
                this.selected = datas[this.selectedIndex] || {};
            }
        });
    }
    edit(data, index) {
        this.selectedIndex = index % this.list.maxResultCount;
        this.selected = data;
        this.openModal();
    }
    save(next) {
        if (this.modalBusy)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(new UpdateLanguageTextByName({
            cultureName: this.selected.cultureName,
            name: this.selected.name,
            resourceName: this.selected.resourceName,
            value: this.selected.value || '',
        }))
            .pipe(finalize(() => {
            setTimeout(() => {
                this.modalBusy = false;
            }, 200);
            if (!next) {
                this.closeModal();
            }
        }))
            .subscribe(() => {
            if (next) {
                this.datas$.pipe(take(1)).subscribe(data => {
                    const totalCount = this.store.selectSnapshot(LanguageManagementState.getLanguageTextsTotalCount);
                    const { maxResultCount } = this.list;
                    if (this.selectedIndex + 1 === totalCount % maxResultCount &&
                        this.list.page * 10 + maxResultCount >= totalCount) {
                        this.closeModal();
                        return;
                    }
                    if ((this.selectedIndex + 1) % maxResultCount === 0) {
                        this.selectedIndex = 0;
                        this.list.page = this.list.page + 1;
                        this.renderer.removeClass(document.getElementById('LanguageTextToEdit_TargetCultureValue'), 'ng-dirty');
                    }
                    else {
                        this.selectedIndex += 1;
                        this.selected = data[this.selectedIndex] || {};
                        this.renderer.removeClass(document.getElementById('LanguageTextToEdit_TargetCultureValue'), 'ng-dirty');
                    }
                });
            }
            this.list.get();
        });
    }
    restore() {
        this.store
            .dispatch(new RestoreLanguageTextByName({
            cultureName: this.selected.cultureName,
            name: this.selected.name,
            resourceName: this.selected.resourceName,
        }))
            .subscribe(() => {
            this.closeModal();
            this.list.get();
        });
    }
}
LanguageTextsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-language-texts',
                template: "<ng-container *ngIf=\"datas$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">\r\n        {{ 'LanguageManagement::LanguageTexts' | abpLocalization }}\r\n      </h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <form id=\"FilterFormId\" (keyup.enter)=\"list.get()\">\r\n          <div class=\"row\">\r\n            <div class=\"col-12 col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"BaseCultureName\">{{\r\n                  'LanguageManagement::BaseCultureName' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class=\"custom-select form-control\"\r\n                  id=\"BaseCultureName\"\r\n                  name=\"BaseCultureName\"\r\n                  [(ngModel)]=\"pageQuery.baseCultureName\"\r\n                  (change)=\"list.get()\"\r\n                >\r\n                  <option *ngFor=\"let lang of languages\" [ngValue]=\"lang.cultureName\">\r\n                    {{ lang.displayName }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TargetCultureName\">{{\r\n                  'LanguageManagement::TargetCultureName' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class=\"custom-select form-control\"\r\n                  id=\"TargetCultureName\"\r\n                  name=\"TargetCultureName\"\r\n                  [(ngModel)]=\"pageQuery.targetCultureName\"\r\n                  (change)=\"list.get()\"\r\n                >\r\n                  <option *ngFor=\"let lang of languages\" [ngValue]=\"lang.cultureName\">\r\n                    {{ lang.displayName }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"ResourceName\">{{\r\n                  'LanguageManagement::ResourceName' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class=\"custom-select form-control\"\r\n                  id=\"ResourceName\"\r\n                  name=\"ResourceName\"\r\n                  [(ngModel)]=\"pageQuery.resourceName\"\r\n                  (change)=\"list.get()\"\r\n                >\r\n                  <option [ngValue]=\"undefined\"></option>\r\n                  <option *ngFor=\"let resource of resources\" [ngValue]=\"resource.name\">\r\n                    {{ resource.name }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 col-md-3\">\r\n              <div class=\"form-group\">\r\n                <label for=\"GetOnlyEmptyValues\">{{\r\n                  'LanguageManagement::TargetValue' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class=\"custom-select form-control\"\r\n                  id=\"GetOnlyEmptyValues\"\r\n                  name=\"GetOnlyEmptyValues\"\r\n                  [(ngModel)]=\"pageQuery.getOnlyEmptyValues\"\r\n                  (change)=\"list.get()\"\r\n                >\r\n                  <option [ngValue]=\"false\">\r\n                    {{ 'LanguageManagement::All' | abpLocalization }}\r\n                  </option>\r\n                  <option [ngValue]=\"true\">\r\n                    {{ 'LanguageManagement::OnlyEmptyValues' | abpLocalization }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <div class=\"input-group mb-3 mb-lg-0\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  [placeholder]=\"'LanguageManagement::Filter' | abpLocalization\"\r\n                  type=\"text\"\r\n                  id=\"Filter\"\r\n                  name=\"Filter\"\r\n                  [(ngModel)]=\"list.filter\"\r\n                />\r\n                <div class=\"input-group-append\">\r\n                  <button\r\n                    id=\"FilterFormSubmitButtonId\"\r\n                    class=\"btn btn-primary\"\r\n                    type=\"button\"\r\n                    (click)=\"list.get()\"\r\n                  >\r\n                    {{ 'LanguageManagement::Refresh' | abpLocalization }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <ngx-datatable default [rows]=\"data\" [count]=\"totalCount$ | async\" [list]=\"list\">\r\n        <ngx-datatable-column\r\n          [name]=\"'LanguageManagement::Actions' | abpLocalization\"\r\n          [maxWidth]=\"150\"\r\n          [width]=\"150\"\r\n          [sortable]=\"false\"\r\n        >\r\n          <ng-template let-row=\"row\" let-i=\"rowIndex\" ngx-datatable-cell-template>\r\n            <abp-grid-actions\r\n              [index]=\"i\"\r\n              [record]=\"row\"\r\n              text=\"LanguageManagement::Actions\"\r\n            ></abp-grid-actions>\r\n          </ng-template>\r\n        </ngx-datatable-column>\r\n        <ngx-datatable-column\r\n          *ngFor=\"let col of columns\"\r\n          [name]=\"col.header | abpLocalization\"\r\n          [prop]=\"col.field\"\r\n          [width]=\"200\"\r\n        >\r\n          <ng-template let-row=\"row\" let-i=\"index\" ngx-datatable-cell-template>\r\n            <div abpEllipsis>\r\n              {{ row[col.field] }}\r\n            </div>\r\n          </ng-template>\r\n        </ngx-datatable-column>\r\n      </ngx-datatable>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'LanguageManagement::Edit' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class=\"fade\" [class.show]=\"!modalBusy\">\r\n      <div class=\"form-group\">\r\n        <label>{{ 'LanguageManagement::Key' | abpLocalization }}</label>\r\n        <div>\r\n          <strong>{{ selected.name }}</strong>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"LanguageTextToEdit_BaseCultureValue\">{{\r\n          'LanguageManagement::BaseValue' | abpLocalization\r\n        }}</label\r\n        ><textarea\r\n          id=\"LanguageTextToEdit_BaseCultureValue\"\r\n          name=\"LanguageTextToEdit.BaseCultureValue\"\r\n          rows=\"4\"\r\n          disabled\r\n          class=\"form-control\"\r\n          [value]=\"selected.baseValue\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"LanguageTextToEdit_BaseCultureValue\">{{\r\n          'LanguageManagement::TargetValue' | abpLocalization\r\n        }}</label\r\n        ><textarea\r\n          id=\"LanguageTextToEdit_TargetCultureValue\"\r\n          name=\"LanguageTextToEdit.TargetCultureValue\"\r\n          rows=\"4\"\r\n          class=\"form-control\"\r\n          (keyup.enter)=\"save(false)\"\r\n          [(ngModel)]=\"selected.value\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-sm btn-outline-primary\" #abpClose>\r\n      {{ 'LanguageManagement::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass=\"fa fa-check\"\r\n      buttonClass=\"btn btn-sm btn-outline-primary\"\r\n      (click)=\"restore()\"\r\n      >{{ 'LanguageManagement::RestoreToDefault' | abpLocalization }}</abp-button\r\n    >\r\n    <abp-button\r\n      iconClass=\"fa fa-check\"\r\n      buttonClass=\"btn btn-sm btn-primary\"\r\n      (click)=\"save(false)\"\r\n      [loading]=\"modalBusy\"\r\n      >{{ 'LanguageManagement::Save' | abpLocalization }}</abp-button\r\n    >\r\n    <abp-button\r\n      iconClass=\"fa fa-check\"\r\n      buttonClass=\"btn btn-sm btn-success\"\r\n      (click)=\"save(true)\"\r\n      [loading]=\"modalBusy\"\r\n      >{{ 'LanguageManagement::SaveAndNext' | abpLocalization }}\r\n      <i class=\"fa fa-arrow-right ml-1\"></i\r\n    ></abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$1,
                    },
                ]
            },] }
];
LanguageTextsComponent.ctorParameters = () => [
    { type: ListService },
    { type: Store },
    { type: Renderer2 },
    { type: ConfigStateService }
];
__decorate([
    Select(LanguageManagementState.getLanguageTexts)
], LanguageTextsComponent.prototype, "datas$", void 0);
__decorate([
    Select(LanguageManagementState.getLanguageTextsTotalCount)
], LanguageTextsComponent.prototype, "totalCount$", void 0);

const ɵ0$2 = data => {
    const component = data.getInjected(LanguageTextsComponent);
    component.edit(data.record, data.index);
};
const DEFAULT_LANGUAGE_TEXTS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'LanguageManagement::Edit',
        action: ɵ0$2,
        permission: 'LanguageManagement.Languages.Edit',
    },
]);

const DEFAULT_LANGUAGE_TEXTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);

const ɵ0$3 = data => {
    const component = data.getInjected(LanguagesComponent);
    component.edit(data.record.id);
}, ɵ1 = data => {
    const component = data.getInjected(LanguagesComponent);
    component.delete(data.record.id, data.record.displayName);
}, ɵ2 = data => {
    const component = data.getInjected(LanguagesComponent);
    component.setAsDefault(data.record.id);
};
const DEFAULT_LANGUAGES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'LanguageManagement::Edit',
        action: ɵ0$3,
        permission: 'LanguageManagement.Languages.Edit',
    },
    {
        text: 'LanguageManagement::Delete',
        action: ɵ1,
        permission: 'LanguageManagement.Languages.Delete',
    },
    {
        text: 'LanguageManagement::SetAsDefaultLanguage',
        action: ɵ2,
        permission: 'LanguageManagement.Languages.ChangeDefault',
    },
]);

const ɵ0$4 = data => {
    const { displayName, isDefaultLanguage } = data.record;
    if (!isDefaultLanguage)
        return of(displayName);
    const l10n = data.getInjected(LocalizationService);
    const t = l10n.instant.bind(l10n);
    return of(`<strong>${displayName} (${t('LanguageManagement::DefaultLanguage')})</strong>`);
}, ɵ1$1 = data => {
    const { displayName, flagIcon } = data.record;
    return of(`<span class="flag-icon flag-icon-squared flag-icon-${flagIcon}" title="${displayName}"></span>`);
};
const DEFAULT_LANGUAGES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'LanguageManagement::DisplayName',
        columnWidth: 200,
        valueResolver: ɵ0$4,
    },
    {
        type: "string" /* String */,
        name: 'cultureName',
        displayName: 'LanguageManagement::CultureName',
        columnWidth: 200,
    },
    {
        type: "string" /* String */,
        name: 'uiCultureName',
        displayName: 'LanguageManagement::UiCultureName',
        columnWidth: 200,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isEnabled',
        displayName: 'LanguageManagement::IsEnabled',
        columnWidth: 100,
    },
    {
        type: "string" /* String */,
        name: 'flagIcon',
        displayName: 'LanguageManagement::FlagIcon',
        columnWidth: 100,
        valueResolver: ɵ1$1,
    },
]);

const ɵ0$5 = () => [Validators.required], ɵ1$2 = data => data.getInjected(LanguagesComponent).cultures$.pipe(map(cultures => cultures.map(culture => ({
    key: culture.displayName,
    value: culture.name,
})))), ɵ2$1 = () => [Validators.required], ɵ3 = data => data.getInjected(LanguagesComponent).cultures$.pipe(map(cultures => cultures.map(culture => ({
    key: culture.displayName,
    value: culture.name,
})))), ɵ4 = () => [Validators.required, Validators.maxLength(256)], ɵ5 = () => [Validators.required], ɵ6 = data => of(data.getInjected(LanguagesComponent).flagIcons.map(flag => ({
    key: flag,
    value: flag,
})));
const DEFAULT_LANGUAGES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'cultureName',
        displayName: 'LanguageManagement::CultureName',
        id: 'culture-name',
        validators: ɵ0$5,
        options: ɵ1$2,
    },
    {
        type: "string" /* String */,
        name: 'uiCultureName',
        displayName: 'LanguageManagement::UiCultureName',
        id: 'ui-culture-name',
        validators: ɵ2$1,
        options: ɵ3,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'LanguageManagement::DisplayName',
        id: 'name',
        validators: ɵ4,
    },
    {
        type: "string" /* String */,
        name: 'flagIcon',
        displayName: 'LanguageManagement::FlagIcon',
        id: 'flag-icon',
        validators: ɵ5,
        options: ɵ6,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isEnabled',
        displayName: 'LanguageManagement::IsEnabled',
        id: 'is-enabled',
        defaultValue: false,
    },
]);
const DEFAULT_LANGUAGES_EDIT_FORM_PROPS = DEFAULT_LANGUAGES_CREATE_FORM_PROPS.slice(2);

const ɵ0$6 = data => {
    const component = data.getInjected(LanguagesComponent);
    component.add();
};
const DEFAULT_LANGUAGES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'LanguageManagement::CreateNewLanguage',
        action: ɵ0$6,
        permission: 'LanguageManagement.Languages.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS = {
    ["LanguageManagement.LanguagesComponent" /* Languages */]: DEFAULT_LANGUAGES_ENTITY_ACTIONS,
    ["LanguageManagement.LanguageTextsComponent" /* LanguageTexts */]: DEFAULT_LANGUAGE_TEXTS_ENTITY_ACTIONS,
};
const DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS = {
    ["LanguageManagement.LanguagesComponent" /* Languages */]: DEFAULT_LANGUAGES_TOOLBAR_ACTIONS,
    ["LanguageManagement.LanguageTextsComponent" /* LanguageTexts */]: DEFAULT_LANGUAGE_TEXTS_TOOLBAR_ACTIONS,
};
const DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS = {
    ["LanguageManagement.LanguagesComponent" /* Languages */]: DEFAULT_LANGUAGES_ENTITY_PROPS,
};
const DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS = {
    ["LanguageManagement.LanguagesComponent" /* Languages */]: DEFAULT_LANGUAGES_CREATE_FORM_PROPS,
};
const DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS = {
    ["LanguageManagement.LanguagesComponent" /* Languages */]: DEFAULT_LANGUAGES_EDIT_FORM_PROPS,
};
const LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');
const LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');
const LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');
const LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');
const LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');

class LanguageManagementExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'LanguageManagement').pipe(map(entities => ({
            ["LanguageManagement.LanguagesComponent" /* Languages */]: entities.Language,
        })), mapEntitiesToContributors(configState, 'LanguageManagement'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
LanguageManagementExtensionsGuard.decorators = [
    { type: Injectable }
];
LanguageManagementExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];

const ɵ0$7 = {
    requiredPolicy: 'LanguageManagement.Languages',
    replaceableComponent: {
        key: "LanguageManagement.LanguagesComponent" /* Languages */,
        defaultComponent: LanguagesComponent,
    },
}, ɵ1$3 = {
    requiredPolicy: 'LanguageManagement.LanguageTexts',
    replaceableComponent: {
        key: "LanguageManagement.LanguageTextsComponent" /* LanguageTexts */,
        defaultComponent: LanguageTextsComponent,
    },
};
const routes = [
    { path: '', redirectTo: 'languages', pathMatch: 'full' },
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, LanguageManagementExtensionsGuard],
        children: [
            {
                path: 'languages',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0$7,
            },
            {
                path: 'texts',
                component: ReplaceableRouteContainerComponent,
                data: ɵ1$3,
            },
        ],
    },
];
class LanguageManagementRoutingModule {
}
LanguageManagementRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

class LanguageManagementModule {
    static forChild(options = {}) {
        return {
            ngModule: LanguageManagementModule,
            providers: [
                {
                    provide: LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                LanguageManagementExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(LanguageManagementModule.forChild(options));
    }
}
LanguageManagementModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LanguagesComponent, LanguageTextsComponent],
                exports: [LanguagesComponent, LanguageTextsComponent],
                imports: [
                    LanguageManagementRoutingModule,
                    NgxsModule.forFeature([LanguageManagementState]),
                    CoreModule,
                    CommercialUiModule,
                    ThemeSharedModule,
                    NgbDropdownModule,
                    NgxValidateCoreModule,
                ],
            },] }
];

class LanguageManagementStateService {
    constructor(store) {
        this.store = store;
    }
    getLanguages() {
        return this.store.selectSnapshot(LanguageManagementState.getLanguages);
    }
    getLanguagesTotalCount() {
        return this.store.selectSnapshot(LanguageManagementState.getLanguagesTotalCount);
    }
    getLanguageTexts() {
        return this.store.selectSnapshot(LanguageManagementState.getLanguageTexts);
    }
    getLanguageTextsTotalCount() {
        return this.store.selectSnapshot(LanguageManagementState.getLanguageTextsTotalCount);
    }
    getCultures() {
        return this.store.selectSnapshot(LanguageManagementState.getCultures);
    }
    getResources() {
        return this.store.selectSnapshot(LanguageManagementState.getResources);
    }
    dispatchGetLanguages(...args) {
        return this.store.dispatch(new GetLanguages(...args));
    }
    dispatchGetLanguageById(...args) {
        return this.store.dispatch(new GetLanguageById(...args));
    }
    dispatchCreateUpdateLanguage(...args) {
        return this.store.dispatch(new CreateUpdateLanguage(...args));
    }
    dispatchDeleteLanguage(...args) {
        return this.store.dispatch(new DeleteLanguage(...args));
    }
    dispatchSetAsDefaultLanguage(...args) {
        return this.store.dispatch(new SetAsDefaultLanguage(...args));
    }
    dispatchGetLanguageTexts(...args) {
        return this.store.dispatch(new GetLanguageTexts(...args));
    }
    dispatchGetLanguageCultures() {
        return this.store.dispatch(new GetLanguageCultures());
    }
    dispatchGetLanguageResources() {
        return this.store.dispatch(new GetLanguageResources());
    }
    dispatchUpdateLanguageTextByName(...args) {
        return this.store.dispatch(new UpdateLanguageTextByName(...args));
    }
    dispatchRestoreLanguageTextByName(...args) {
        return this.store.dispatch(new RestoreLanguageTextByName(...args));
    }
}
LanguageManagementStateService.ɵprov = ɵɵdefineInjectable({ factory: function LanguageManagementStateService_Factory() { return new LanguageManagementStateService(ɵɵinject(Store)); }, token: LanguageManagementStateService, providedIn: "root" });
LanguageManagementStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LanguageManagementStateService.ctorParameters = () => [
    { type: Store }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CreateUpdateLanguage, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS, DeleteLanguage, GetLanguageById, GetLanguageCultures, GetLanguageResources, GetLanguageTexts, GetLanguages, LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, LanguageManagementExtensionsGuard, LanguageManagementModule, LanguageManagementState, LanguageManagementStateService, LanguageService, LanguageTextService, LanguageTextsComponent, LanguagesComponent, RestoreLanguageTextByName, SetAsDefaultLanguage, UpdateLanguageTextByName, ɵ0, LanguagesComponent as ɵa, LanguageManagementState as ɵc, GetLanguages as ɵd, GetLanguageById as ɵe, CreateUpdateLanguage as ɵf, DeleteLanguage as ɵg, SetAsDefaultLanguage as ɵh, GetLanguageTexts as ɵi, GetLanguageCultures as ɵj, GetLanguageResources as ɵk, UpdateLanguageTextByName as ɵl, RestoreLanguageTextByName as ɵm, LanguageTextsComponent as ɵp, LanguageManagementRoutingModule as ɵq, LanguageManagementExtensionsGuard as ɵr, LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS as ɵs, LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS as ɵt, LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS as ɵu, LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS as ɵv, LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS as ɵw };
//# sourceMappingURL=volo-abp.ng.language-management.js.map
