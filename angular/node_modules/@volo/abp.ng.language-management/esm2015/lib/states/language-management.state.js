import{__decorate}from"tslib";import{Injectable}from"@angular/core";import{Action,Selector,State}from"@ngxs/store";import{tap}from"rxjs/operators";import{CreateUpdateLanguage,DeleteLanguage,GetLanguageById,GetLanguageCultures,GetLanguageResources,GetLanguages,GetLanguageTexts,RestoreLanguageTextByName,SetAsDefaultLanguage,UpdateLanguageTextByName}from"../actions/language-management.actions";import{LanguageTextService}from"../proxy/language-text.service";import{LanguageService}from"../proxy/language.service";let LanguageManagementState=class{constructor(e,a){this.languageService=e,this.languageTextService=a}static getLanguages({languageResponse:e}){return e.items||[]}static getLanguagesTotalCount({languageResponse:e}){return e.totalCount}static getLanguageTexts({languageTextsResponse:e}){return e.items||[]}static getLanguageTextsTotalCount({languageTextsResponse:e}){return e.totalCount||0}static getCultures({cultures:e}){return e}static getResources({resources:e}){return e}get({patchState:e},{payload:a}){return this.languageService.getList(a).pipe(tap(a=>{e({languageResponse:a})}))}getById({patchState:e},{payload:a}){return this.languageService.get(a).pipe(tap(a=>e({selectedItem:a})))}delete({dispatch:e},{payload:a}){return this.languageService.delete(a)}setAsDefault({dispatch:e},{payload:a}){return this.languageService.setAsDefault(a)}create({dispatch:e},{payload:a,id:t}){return t?this.languageService.update(t,a):this.languageService.create(a)}getLanguageTexts({patchState:e},{payload:a}){return this.languageTextService.getList(a).pipe(tap(a=>e({languageTextsResponse:a})))}getCultures({patchState:e}){return this.languageService.getCulturelist().pipe(tap(a=>e({cultures:a})))}getResources({patchState:e}){return this.languageService.getResources().pipe(tap(a=>e({resources:a})))}updateLanguageTextByName(e,{payload:a}){return this.languageTextService.update(a.resourceName,a.cultureName,a.name,a.value)}restoreLanguageTextByName(e,{payload:a}){return this.languageTextService.restoreToDefault(a.resourceName,a.cultureName,a.name)}};LanguageManagementState.decorators=[{type:Injectable}],LanguageManagementState.ctorParameters=()=>[{type:LanguageService},{type:LanguageTextService}],__decorate([Action(GetLanguages)],LanguageManagementState.prototype,"get",null),__decorate([Action(GetLanguageById)],LanguageManagementState.prototype,"getById",null),__decorate([Action(DeleteLanguage)],LanguageManagementState.prototype,"delete",null),__decorate([Action(SetAsDefaultLanguage)],LanguageManagementState.prototype,"setAsDefault",null),__decorate([Action(CreateUpdateLanguage)],LanguageManagementState.prototype,"create",null),__decorate([Action(GetLanguageTexts)],LanguageManagementState.prototype,"getLanguageTexts",null),__decorate([Action(GetLanguageCultures)],LanguageManagementState.prototype,"getCultures",null),__decorate([Action(GetLanguageResources)],LanguageManagementState.prototype,"getResources",null),__decorate([Action(UpdateLanguageTextByName)],LanguageManagementState.prototype,"updateLanguageTextByName",null),__decorate([Action(RestoreLanguageTextByName)],LanguageManagementState.prototype,"restoreLanguageTextByName",null),__decorate([Selector()],LanguageManagementState,"getLanguages",null),__decorate([Selector()],LanguageManagementState,"getLanguagesTotalCount",null),__decorate([Selector()],LanguageManagementState,"getLanguageTexts",null),__decorate([Selector()],LanguageManagementState,"getLanguageTextsTotalCount",null),__decorate([Selector()],LanguageManagementState,"getCultures",null),__decorate([Selector()],LanguageManagementState,"getResources",null),LanguageManagementState=__decorate([State({name:"LanguageManagementState",defaults:{languageResponse:{},selectedItem:{},cultures:[],resources:[]}})],LanguageManagementState);export{LanguageManagementState};