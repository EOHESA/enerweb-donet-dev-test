import{__decorate}from"tslib";import{ApplicationConfigurationService,ConfigStateService,ListService}from"@abp/ng.core";import{Confirmation,ConfirmationService}from"@abp/ng.theme.shared";import{EXTENSIONS_IDENTIFIER,FormPropData,generateFormFromProps}from"@abp/ng.theme.shared/extensions";import{Component,Injector}from"@angular/core";import{Select,Store}from"@ngxs/store";import{of}from"rxjs";import{finalize,pluck,switchMap}from"rxjs/operators";import{CreateUpdateLanguage,DeleteLanguage,GetLanguageById,GetLanguageCultures,GetLanguages,SetAsDefaultLanguage}from"../../actions/language-management.actions";import{LanguageManagementState}from"../../states/language-management.state";import flagIcons from"./flag-icons";const ɵ0="LanguageManagement.LanguagesComponent";export class LanguagesComponent{constructor(e,a,t,n,r,i){this.list=e,this.confirmationService=a,this.store=t,this.injector=n,this.configState=r,this.appConfigService=i,this.isModalVisible=!1,this.modalBusy=!1,this.flagIcons=flagIcons}createForm(){this.store.select(LanguageManagementState.getCultures).pipe(switchMap(e=>e.length?of(e):this.store.dispatch(new GetLanguageCultures))).subscribe(()=>{const e=new FormPropData(this.injector,this.selected);this.form=generateFormFromProps(e)})}hookToQuery(){this.list.hookToQuery(e=>this.store.dispatch(new GetLanguages(e))).subscribe()}ngOnInit(){this.hookToQuery()}openModal(){this.createForm(),this.isModalVisible=!0}add(){this.selected={},this.openModal()}edit(e){this.store.dispatch(new GetLanguageById(e)).pipe(pluck("LanguageManagementState","selectedItem")).subscribe(e=>{this.selected=e,this.openModal()})}save(){this.form.valid&&(this.modalBusy=!0,this.store.dispatch(new CreateUpdateLanguage(this.form.value,this.selected.id)).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.isModalVisible=!1,this.list.get(),this.selected.id||this.appConfigService.getConfiguration().subscribe(e=>this.configState.setState(e))}))}delete(e,a){this.confirmationService.warn("LanguageManagement::LanguageDeletionConfirmationMessage","LanguageManagement::AreYouSure",{messageLocalizationParams:[a]}).subscribe(a=>{a===Confirmation.Status.confirm&&this.store.dispatch(new DeleteLanguage(e)).subscribe(()=>this.list.get())})}setAsDefault(e){this.store.dispatch(new SetAsDefaultLanguage(e)).subscribe(()=>this.list.get())}}LanguagesComponent.decorators=[{type:Component,args:[{selector:"abp-languages",template:'<ng-container *ngIf="datas$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'LanguageManagement::Languages\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div id="data-tables-table-filter" class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #displayName let-data>{{ data.displayName }}</ng-template>\r\n<ng-template #defaultLanguage let-data\r\n  ><strong\r\n    >{{ data.displayName }} ({{ \'LanguageManagement::DefaultLanguage\' | abpLocalization }})</strong\r\n  ></ng-template\r\n>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (selected?.id ? \'LanguageManagement::Edit\' : \'LanguageManagement::CreateNewLanguage\')\r\n          | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form *ngIf="form" [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <div class="mt-2">\r\n        <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[ListService,{provide:EXTENSIONS_IDENTIFIER,useValue:ɵ0}]}]}],LanguagesComponent.ctorParameters=()=>[{type:ListService},{type:ConfirmationService},{type:Store},{type:Injector},{type:ConfigStateService},{type:ApplicationConfigurationService}],__decorate([Select(LanguageManagementState.getLanguages)],LanguagesComponent.prototype,"datas$",void 0),__decorate([Select(LanguageManagementState.getLanguagesTotalCount)],LanguagesComponent.prototype,"totalCount$",void 0),__decorate([Select(LanguageManagementState.getCultures)],LanguagesComponent.prototype,"cultures$",void 0);export{ɵ0};