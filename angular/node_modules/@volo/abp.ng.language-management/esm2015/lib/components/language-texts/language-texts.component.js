import{__decorate}from"tslib";import{ConfigStateService,ListService}from"@abp/ng.core";import{EXTENSIONS_IDENTIFIER}from"@abp/ng.theme.shared/extensions";import{Component,Renderer2}from"@angular/core";import{Select,Store}from"@ngxs/store";import{finalize,take,withLatestFrom}from"rxjs/operators";import snq from"snq";import{GetLanguageResources,GetLanguageTexts,RestoreLanguageTextByName,UpdateLanguageTextByName}from"../../actions/language-management.actions";import{LanguageManagementState}from"../../states/language-management.state";const Éµ0="LanguageManagement.LanguageTextsComponent";export class LanguageTextsComponent{constructor(e,a,n,t){this.list=e,this.store=a,this.renderer=n,this.configState=t,this.pageQuery={},this.isModalVisible=!1,this.modalBusy=!1,this.resources=[]}ngOnInit(){this.languages=this.configState.getDeep("localization.languages"),this.store.dispatch(new GetLanguageResources).subscribe(()=>{this.resources=this.store.selectSnapshot(LanguageManagementState.getResources)}),this.pageQuery={baseCultureName:this.languages[0].cultureName,targetCultureName:snq(()=>this.languages[1].cultureName,this.languages[0].cultureName),getOnlyEmptyValues:!1},this.hookToQuery(),this.columns=[{field:"name",header:"LanguageManagement::Key"},{field:"baseValue",header:"LanguageManagement::BaseValue"},{field:"value",header:"LanguageManagement::Value"},{field:"resourceName",header:"LanguageManagement::ResourceName"}]}openModal(){this.isModalVisible=!0}closeModal(){this.isModalVisible=!1,this.selected={},this.selectedIndex=null}hookToQuery(){this.list.hookToQuery(e=>this.store.dispatch(new GetLanguageTexts(Object.assign(Object.assign({},e),this.pageQuery)))).pipe(withLatestFrom(this.datas$)).subscribe(([e,a])=>{if(this.isModalVisible){if(!a[this.selectedIndex])return void this.closeModal();this.selected=a[this.selectedIndex]||{}}})}edit(e,a){this.selectedIndex=a%this.list.maxResultCount,this.selected=e,this.openModal()}save(e){this.modalBusy||(this.modalBusy=!0,this.store.dispatch(new UpdateLanguageTextByName({cultureName:this.selected.cultureName,name:this.selected.name,resourceName:this.selected.resourceName,value:this.selected.value||""})).pipe(finalize(()=>{setTimeout(()=>{this.modalBusy=!1},200),e||this.closeModal()})).subscribe(()=>{e&&this.datas$.pipe(take(1)).subscribe(e=>{const a=this.store.selectSnapshot(LanguageManagementState.getLanguageTextsTotalCount),{maxResultCount:n}=this.list;this.selectedIndex+1===a%n&&10*this.list.page+n>=a?this.closeModal():(this.selectedIndex+1)%n==0?(this.selectedIndex=0,this.list.page=this.list.page+1,this.renderer.removeClass(document.getElementById("LanguageTextToEdit_TargetCultureValue"),"ng-dirty")):(this.selectedIndex+=1,this.selected=e[this.selectedIndex]||{},this.renderer.removeClass(document.getElementById("LanguageTextToEdit_TargetCultureValue"),"ng-dirty"))}),this.list.get()}))}restore(){this.store.dispatch(new RestoreLanguageTextByName({cultureName:this.selected.cultureName,name:this.selected.name,resourceName:this.selected.resourceName})).subscribe(()=>{this.closeModal(),this.list.get()})}}LanguageTextsComponent.decorators=[{type:Component,args:[{selector:"abp-language-texts",template:'<ng-container *ngIf="datas$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">\r\n        {{ \'LanguageManagement::LanguageTexts\' | abpLocalization }}\r\n      </h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <form id="FilterFormId" (keyup.enter)="list.get()">\r\n          <div class="row">\r\n            <div class="col-12 col-md-3">\r\n              <div class="form-group">\r\n                <label for="BaseCultureName">{{\r\n                  \'LanguageManagement::BaseCultureName\' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class="custom-select form-control"\r\n                  id="BaseCultureName"\r\n                  name="BaseCultureName"\r\n                  [(ngModel)]="pageQuery.baseCultureName"\r\n                  (change)="list.get()"\r\n                >\r\n                  <option *ngFor="let lang of languages" [ngValue]="lang.cultureName">\r\n                    {{ lang.displayName }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div class="col-12 col-md-3">\r\n              <div class="form-group">\r\n                <label for="TargetCultureName">{{\r\n                  \'LanguageManagement::TargetCultureName\' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class="custom-select form-control"\r\n                  id="TargetCultureName"\r\n                  name="TargetCultureName"\r\n                  [(ngModel)]="pageQuery.targetCultureName"\r\n                  (change)="list.get()"\r\n                >\r\n                  <option *ngFor="let lang of languages" [ngValue]="lang.cultureName">\r\n                    {{ lang.displayName }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div class="col-12 col-md-3">\r\n              <div class="form-group">\r\n                <label for="ResourceName">{{\r\n                  \'LanguageManagement::ResourceName\' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class="custom-select form-control"\r\n                  id="ResourceName"\r\n                  name="ResourceName"\r\n                  [(ngModel)]="pageQuery.resourceName"\r\n                  (change)="list.get()"\r\n                >\r\n                  <option [ngValue]="undefined"></option>\r\n                  <option *ngFor="let resource of resources" [ngValue]="resource.name">\r\n                    {{ resource.name }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div class="col-12 col-md-3">\r\n              <div class="form-group">\r\n                <label for="GetOnlyEmptyValues">{{\r\n                  \'LanguageManagement::TargetValue\' | abpLocalization\r\n                }}</label>\r\n                <select\r\n                  class="custom-select form-control"\r\n                  id="GetOnlyEmptyValues"\r\n                  name="GetOnlyEmptyValues"\r\n                  [(ngModel)]="pageQuery.getOnlyEmptyValues"\r\n                  (change)="list.get()"\r\n                >\r\n                  <option [ngValue]="false">\r\n                    {{ \'LanguageManagement::All\' | abpLocalization }}\r\n                  </option>\r\n                  <option [ngValue]="true">\r\n                    {{ \'LanguageManagement::OnlyEmptyValues\' | abpLocalization }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class="row">\r\n            <div class="col-md-12">\r\n              <div class="input-group mb-3 mb-lg-0">\r\n                <input\r\n                  class="form-control"\r\n                  [placeholder]="\'LanguageManagement::Filter\' | abpLocalization"\r\n                  type="text"\r\n                  id="Filter"\r\n                  name="Filter"\r\n                  [(ngModel)]="list.filter"\r\n                />\r\n                <div class="input-group-append">\r\n                  <button\r\n                    id="FilterFormSubmitButtonId"\r\n                    class="btn btn-primary"\r\n                    type="button"\r\n                    (click)="list.get()"\r\n                  >\r\n                    {{ \'LanguageManagement::Refresh\' | abpLocalization }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <ngx-datatable default [rows]="data" [count]="totalCount$ | async" [list]="list">\r\n        <ngx-datatable-column\r\n          [name]="\'LanguageManagement::Actions\' | abpLocalization"\r\n          [maxWidth]="150"\r\n          [width]="150"\r\n          [sortable]="false"\r\n        >\r\n          <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>\r\n            <abp-grid-actions\r\n              [index]="i"\r\n              [record]="row"\r\n              text="LanguageManagement::Actions"\r\n            ></abp-grid-actions>\r\n          </ng-template>\r\n        </ngx-datatable-column>\r\n        <ngx-datatable-column\r\n          *ngFor="let col of columns"\r\n          [name]="col.header | abpLocalization"\r\n          [prop]="col.field"\r\n          [width]="200"\r\n        >\r\n          <ng-template let-row="row" let-i="index" ngx-datatable-cell-template>\r\n            <div abpEllipsis>\r\n              {{ row[col.field] }}\r\n            </div>\r\n          </ng-template>\r\n        </ngx-datatable-column>\r\n      </ngx-datatable>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'LanguageManagement::Edit\' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class="fade" [class.show]="!modalBusy">\r\n      <div class="form-group">\r\n        <label>{{ \'LanguageManagement::Key\' | abpLocalization }}</label>\r\n        <div>\r\n          <strong>{{ selected.name }}</strong>\r\n        </div>\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="LanguageTextToEdit_BaseCultureValue">{{\r\n          \'LanguageManagement::BaseValue\' | abpLocalization\r\n        }}</label\r\n        ><textarea\r\n          id="LanguageTextToEdit_BaseCultureValue"\r\n          name="LanguageTextToEdit.BaseCultureValue"\r\n          rows="4"\r\n          disabled\r\n          class="form-control"\r\n          [value]="selected.baseValue"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label for="LanguageTextToEdit_BaseCultureValue">{{\r\n          \'LanguageManagement::TargetValue\' | abpLocalization\r\n        }}</label\r\n        ><textarea\r\n          id="LanguageTextToEdit_TargetCultureValue"\r\n          name="LanguageTextToEdit.TargetCultureValue"\r\n          rows="4"\r\n          class="form-control"\r\n          (keyup.enter)="save(false)"\r\n          [(ngModel)]="selected.value"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-sm btn-outline-primary" #abpClose>\r\n      {{ \'LanguageManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      buttonClass="btn btn-sm btn-outline-primary"\r\n      (click)="restore()"\r\n      >{{ \'LanguageManagement::RestoreToDefault\' | abpLocalization }}</abp-button\r\n    >\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      buttonClass="btn btn-sm btn-primary"\r\n      (click)="save(false)"\r\n      [loading]="modalBusy"\r\n      >{{ \'LanguageManagement::Save\' | abpLocalization }}</abp-button\r\n    >\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      buttonClass="btn btn-sm btn-success"\r\n      (click)="save(true)"\r\n      [loading]="modalBusy"\r\n      >{{ \'LanguageManagement::SaveAndNext\' | abpLocalization }}\r\n      <i class="fa fa-arrow-right ml-1"></i\r\n    ></abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[ListService,{provide:EXTENSIONS_IDENTIFIER,useValue:Éµ0}]}]}],LanguageTextsComponent.ctorParameters=()=>[{type:ListService},{type:Store},{type:Renderer2},{type:ConfigStateService}],__decorate([Select(LanguageManagementState.getLanguageTexts)],LanguageTextsComponent.prototype,"datas$",void 0),__decorate([Select(LanguageManagementState.getLanguageTextsTotalCount)],LanguageTextsComponent.prototype,"totalCount$",void 0);export{Éµ0};