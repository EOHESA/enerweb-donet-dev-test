import { Store } from '@ngxs/store';
import { GetLanguages, GetLanguageById, CreateUpdateLanguage, DeleteLanguage, SetAsDefaultLanguage, GetLanguageTexts, UpdateLanguageTextByName, RestoreLanguageTextByName } from '../actions';
export declare class LanguageManagementStateService {
    private store;
    constructor(store: Store);
    getLanguages(): import("../proxy/dto").LanguageDto[];
    getLanguagesTotalCount(): number;
    getLanguageTexts(): import("../proxy/dto").LanguageTextDto[];
    getLanguageTextsTotalCount(): number;
    getCultures(): import("../proxy/dto").CultureInfoDto[];
    getResources(): import("../proxy/dto").LanguageResourceDto[];
    dispatchGetLanguages(...args: ConstructorParameters<typeof GetLanguages>): import("rxjs").Observable<any>;
    dispatchGetLanguageById(...args: ConstructorParameters<typeof GetLanguageById>): import("rxjs").Observable<any>;
    dispatchCreateUpdateLanguage(...args: ConstructorParameters<typeof CreateUpdateLanguage>): import("rxjs").Observable<any>;
    dispatchDeleteLanguage(...args: ConstructorParameters<typeof DeleteLanguage>): import("rxjs").Observable<any>;
    dispatchSetAsDefaultLanguage(...args: ConstructorParameters<typeof SetAsDefaultLanguage>): import("rxjs").Observable<any>;
    dispatchGetLanguageTexts(...args: ConstructorParameters<typeof GetLanguageTexts>): import("rxjs").Observable<any>;
    dispatchGetLanguageCultures(): import("rxjs").Observable<any>;
    dispatchGetLanguageResources(): import("rxjs").Observable<any>;
    dispatchUpdateLanguageTextByName(...args: ConstructorParameters<typeof UpdateLanguageTextByName>): import("rxjs").Observable<any>;
    dispatchRestoreLanguageTextByName(...args: ConstructorParameters<typeof RestoreLanguageTextByName>): import("rxjs").Observable<any>;
}
