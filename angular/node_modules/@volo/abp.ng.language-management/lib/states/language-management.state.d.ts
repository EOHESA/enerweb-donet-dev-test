import { StateContext } from '@ngxs/store';
import { CreateUpdateLanguage, DeleteLanguage, GetLanguageById, GetLanguages, GetLanguageTexts, RestoreLanguageTextByName, SetAsDefaultLanguage, UpdateLanguageTextByName } from '../actions/language-management.actions';
import { LanguageManagement } from '../models/language-management';
import { LanguageTextDto } from '../proxy/dto/models';
import { LanguageTextService } from '../proxy/language-text.service';
import { LanguageService } from '../proxy/language.service';
export declare class LanguageManagementState {
    private languageService;
    private languageTextService;
    static getLanguages({ languageResponse }: LanguageManagement.State): import("../proxy/dto/models").LanguageDto[];
    static getLanguagesTotalCount({ languageResponse }: LanguageManagement.State): number;
    static getLanguageTexts({ languageTextsResponse }: LanguageManagement.State): LanguageTextDto[];
    static getLanguageTextsTotalCount({ languageTextsResponse }: LanguageManagement.State): number;
    static getCultures({ cultures }: LanguageManagement.State): import("../proxy/dto/models").CultureInfoDto[];
    static getResources({ resources }: LanguageManagement.State): import("../proxy/dto/models").LanguageResourceDto[];
    constructor(languageService: LanguageService, languageTextService: LanguageTextService);
    get({ patchState }: StateContext<LanguageManagement.State>, { payload }: GetLanguages): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<import("../proxy/dto/models").LanguageDto>>;
    getById({ patchState }: StateContext<LanguageManagement.State>, { payload }: GetLanguageById): import("rxjs").Observable<import("../proxy/dto/models").LanguageDto>;
    delete({ dispatch }: StateContext<LanguageManagement.State>, { payload }: DeleteLanguage): import("rxjs").Observable<void>;
    setAsDefault({ dispatch }: StateContext<LanguageManagement.State>, { payload }: SetAsDefaultLanguage): import("rxjs").Observable<void>;
    create({ dispatch }: StateContext<LanguageManagement.State>, { payload, id }: CreateUpdateLanguage): import("rxjs").Observable<import("../proxy/dto/models").LanguageDto>;
    getLanguageTexts({ patchState }: StateContext<LanguageManagement.State>, { payload }: GetLanguageTexts): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<LanguageTextDto>>;
    getCultures({ patchState }: StateContext<LanguageManagement.State>): import("rxjs").Observable<import("../proxy/dto/models").CultureInfoDto[]>;
    getResources({ patchState }: StateContext<LanguageManagement.State>): import("rxjs").Observable<import("../proxy/dto/models").LanguageResourceDto[]>;
    updateLanguageTextByName(_: any, { payload }: UpdateLanguageTextByName): import("rxjs").Observable<void>;
    restoreLanguageTextByName(_: any, { payload }: RestoreLanguageTextByName): import("rxjs").Observable<void>;
}
