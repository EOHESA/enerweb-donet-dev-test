!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@angular/core"),require("@abp/ng.theme.shared"),require("@ng-bootstrap/ng-bootstrap"),require("@ngxs/store"),require("rxjs/operators"),require("rxjs")):"function"==typeof define&&define.amd?define("@volo/abp.ng.account/admin",["exports","@abp/ng.core","@angular/core","@abp/ng.theme.shared","@ng-bootstrap/ng-bootstrap","@ngxs/store","rxjs/operators","rxjs"],t):t(((n="undefined"!=typeof globalThis?globalThis:n||self).volo=n.volo||{},n.volo.abp=n.volo.abp||{},n.volo.abp.ng=n.volo.abp.ng||{},n.volo.abp.ng.account=n.volo.abp.ng.account||{},n.volo.abp.ng.account.admin={}),n.ng_core,n.ng.core,n.ng_theme_shared,n.ngBootstrap,n.store,n.rxjs.operators,n.rxjs)}(this,(function(n,t,e,r,o,a,i,s){"use strict";var c=function(){};c.decorators=[{type:e.NgModule,args:[{imports:[t.CoreModule]}]}];
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
var l=function(n,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])})(n,t)};function p(n,t){function e(){this.constructor=n}l(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function u(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,a=e.call(n),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return i}function g(){for(var n=[],t=0;t<arguments.length;t++)n=n.concat(u(arguments[t]));return n}Object.create,Object.create;var b=function(){function n(n){this.restService=n,this.apiName="AbpAccountAdmin"}return n.prototype.getSettings=function(){return this.restService.request({method:"GET",url:this.url},{apiName:this.apiName})},n.prototype.updateSettings=function(n){return this.restService.request({method:"PUT",url:this.url,body:n},{apiName:this.apiName})},n}(),d=function(){function n(n,t,e,r,o,a){this.service=n,this.toaster=t,this.cdr=e,this.store=r,this.configState=o,this.appConfigService=a}return Object.defineProperty(n.prototype,"loading",{get:function(){return this._loading},set:function(n){this._loading=n,this.cdr.markForCheck()},enumerable:!1,configurable:!0}),n.prototype.ngOnInit=function(){this.settings$=this.service.getSettings()},n.prototype.submit=function(n){var t=this;this.loading=!0,this.service.updateSettings(this.isTenant?this.mapTenantSettingsForSubmit(n):n).pipe(i.finalize((function(){return t.loading=!1}))).subscribe((function(){t.toaster.success("AbpSettingManagement::SuccessfullySaved",null),t.appConfigService.getConfiguration().subscribe((function(n){return t.configState.setState(n)}))}))},n.prototype.mapTenantSettingsForSubmit=function(n){return n},n}();d.decorators=[{type:e.Component,args:[{template:""}]}],d.ctorParameters=function(){return[{type:b},{type:r.ToasterService},{type:e.ChangeDetectorRef},{type:a.Store},{type:t.ConfigStateService},{type:t.ApplicationConfigurationService}]},d.propDecorators={isTenant:[{type:e.Input}]};var v=function(n){function t(t){var e=n.call(this,t)||this;return e.url="/api/account-admin/settings",e}return p(t,n),t}(b);v.decorators=[{type:e.Injectable}],v.ctorParameters=function(){return[{type:t.RestService}]};var m=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return p(t,n),t}(d);m.decorators=[{type:e.Component,args:[{selector:"abp-account-settings-general",template:'<ng-container *ngIf="settings$ | async; let settings">\r\n  <div (keyup.enter)="submit(settings)">\r\n    <div class="custom-checkbox custom-control mb-2">\r\n      <input\r\n        type="checkbox"\r\n        id="IsSelfRegistrationEnabled"\r\n        name="IsSelfRegistrationEnabled"\r\n        class="custom-control-input"\r\n        [(ngModel)]="settings.isSelfRegistrationEnabled"\r\n        autofocus\r\n      /><label class="custom-control-label" for="IsSelfRegistrationEnabled">{{\r\n        \'AbpAccount::DisplayName:IsSelfRegistrationEnabled\' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class="custom-checkbox custom-control mb-2">\r\n      <input\r\n        type="checkbox"\r\n        id="EnableLocalLogin"\r\n        name="EnableLocalLogin"\r\n        class="custom-control-input"\r\n        [(ngModel)]="settings.enableLocalLogin"\r\n      /><label class="custom-control-label" for="EnableLocalLogin">{{\r\n        \'AbpAccount::DisplayName:EnableLocalLogin\' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <hr class="my-4" />\r\n\r\n  <div>\r\n    <abp-button (click)="submit(settings)" iconClass="fa fa-save" [loading]="loading">{{\r\n      \'AbpAccount::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </div>\r\n</ng-container>\r\n',changeDetection:e.ChangeDetectionStrategy.OnPush,providers:[{provide:b,useClass:v}]}]}];var h=function(n){function t(t){var e=n.call(this,t)||this;return e.url="/api/account-admin/settings/ldap",e}return p(t,n),t}(b);h.decorators=[{type:e.Injectable}],h.ctorParameters=function(){return[{type:t.RestService}]};var f=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return p(t,n),t}(d);f.decorators=[{type:e.Component,args:[{selector:"abp-account-settings-ldap",template:'<ng-container *ngIf="settings$ | async; let settings">\r\n  <div id="ldap-login-settings" (keyup.enter)="submit(settings)">\r\n    <h4>{{ \'AbpAccount::LdapLoginSettings\' | abpLocalization }}</h4>\r\n\r\n    <div class="custom-checkbox custom-control mb-2">\r\n      <input\r\n        type="checkbox"\r\n        id="enable-ldap-login"\r\n        class="custom-control-input"\r\n        [(ngModel)]="settings.enableLdapLogin"\r\n        autofocus\r\n      /><label class="custom-control-label" for="enable-ldap-login">{{\r\n        \'AbpAccount::DisplayName:EnableLdapLogin\' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpLdap::DisplayName:Abp.Ldap.ServerHost\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.ldapServerHost" />\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpLdap::DisplayName:Abp.Ldap.ServerPort\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.ldapServerPort" />\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpLdap::DisplayName:Abp.Ldap.BaseDc\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.ldapBaseDc" />\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpLdap::DisplayName:Abp.Ldap.UserName\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.ldapUserName" />\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpLdap::DisplayName:Abp.Ldap.Password\' | abpLocalization }}</label>\r\n      <input\r\n        type="password"\r\n        class="form-control"\r\n        placeholder="{{ \'AbpAccount::LdapPasswordPlaceholder\' | abpLocalization }}"\r\n        [(ngModel)]="settings.ldapPassword"\r\n        autocomplete="new-password"\r\n      />\r\n    </div>\r\n  </div>\r\n\r\n  <hr class="my-4" />\r\n\r\n  <div>\r\n    <abp-button (click)="submit(settings)" iconClass="fa fa-save" [loading]="loading">{{\r\n      \'AbpAccount::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </div>\r\n</ng-container>\r\n',changeDetection:e.ChangeDetectionStrategy.OnPush,providers:[{provide:b,useClass:h}]}]}];var y,S=function(n){function t(t){var e=n.call(this,t)||this;return e.url="/api/account-admin/settings/two-factor",e}return p(t,n),t}(b);S.decorators=[{type:e.Injectable}],S.ctorParameters=function(){return[{type:t.RestService}]},(y=n.eTwoFactorBehaviour||(n.eTwoFactorBehaviour={}))[y.Optional=0]="Optional",y[y.Disabled=1]="Disabled",y[y.Forced=2]="Forced";var A=t.mapEnumToOptions(n.eTwoFactorBehaviour),L=function(t){function e(){var e=t.apply(this,g(arguments))||this;return e.eTwoFactorBehaviour=n.eTwoFactorBehaviour,e.twoFactorBehaviourOptions=A,e}return p(e,t),e}(d);L.decorators=[{type:e.Component,args:[{selector:"abp-account-settings-two-factor",template:'<ng-container *ngIf="settings$ | async; let settings">\r\n  <div (keyup.enter)="submit(settings)">\r\n    <h4>{{ \'AbpAccount::TwoFactorAuthentication\' | abpLocalization }}</h4>\r\n    <div>\r\n      <div class="form-group">\r\n        <label for="AccountTwoFactorSettings_TwoFactorBehaviour">{{\r\n          \'AbpIdentity::DisplayName:Abp.Identity.TwoFactorBehaviour\' | abpLocalization\r\n        }}</label>\r\n        <select\r\n          name="TwoFactorBehaviour"\r\n          class="custom-select form-control"\r\n          [(ngModel)]="settings.twoFactorBehaviour"\r\n        >\r\n          <option *ngFor="let option of twoFactorBehaviourOptions" [ngValue]="option.value">{{\r\n            option.key\r\n          }}</option>\r\n        </select>\r\n      </div>\r\n      <div\r\n        *ngIf="settings.twoFactorBehaviour === eTwoFactorBehaviour.Optional"\r\n        class="custom-checkbox custom-control mb-2"\r\n      >\r\n        <input\r\n          name="UsersCanChange"\r\n          type="checkbox"\r\n          checked="checked"\r\n          id="AccountTwoFactorSettings_UsersCanChange"\r\n          [(ngModel)]="settings.usersCanChange"\r\n          class="custom-control-input"\r\n        /><label class="custom-control-label" for="AccountTwoFactorSettings_UsersCanChange">{{\r\n          \'AbpIdentity::DisplayName:Abp.Identity.UsersCanChange\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          name="IsRememberBrowserEnabled"\r\n          type="checkbox"\r\n          checked="checked"\r\n          id="AccountTwoFactorSettings_IsRememberBrowserEnabled"\r\n          [(ngModel)]="settings.isRememberBrowserEnabled"\r\n          class="custom-control-input "\r\n        /><label\r\n          class="custom-control-label"\r\n          for="AccountTwoFactorSettings_IsRememberBrowserEnabled"\r\n          >{{ \'AbpAccount::RememberBrowser\' | abpLocalization }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n    <hr class="my-4" />\r\n    <div>\r\n      <abp-button (click)="submit(settings)" iconClass="fa fa-save" [loading]="loading">{{\r\n        \'AbpAccount::Save\' | abpLocalization\r\n      }}</abp-button>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n',changeDetection:e.ChangeDetectionStrategy.OnPush,providers:[{provide:b,useClass:S}]}]}];var C=function(n){function t(t){var e=n.call(this,t)||this;return e.url="/api/account-admin/settings/external-provider",e}return p(t,n),t}(b);C.decorators=[{type:e.Injectable}],C.ctorParameters=function(){return[{type:t.RestService}]};var T=function(n){function t(t){var e=n.call(this,t)||this;return e.url="/api/account-admin/settings/recaptcha",e}return p(t,n),t}(b);T.decorators=[{type:e.Injectable}],T.ctorParameters=function(){return[{type:t.RestService}]};var x=function(){function t(n,t,e,r){this.configStateService=n,this.sessionStateService=t,this.captchaService=e,this.externalProviderService=r}return t.prototype.ngOnInit=function(){var t;this.isLdapSettingsEnabled="false"!==this.configStateService.getFeature("Account.EnableLdapLogin").toLowerCase(),this.isTwoFactorSettingsEnabled=this.configStateService.getFeature("Identity.TwoFactor")===n.eTwoFactorBehaviour[n.eTwoFactorBehaviour.Optional],this.isTenant=null===(t=this.sessionStateService.getTenant())||void 0===t?void 0:t.isAvailable,this.isTenant?(this.isExternalProviderEnabled$=this.externalProviderService.getSettings().pipe(i.map((function(n){return n.settings.some((function(n){return n.enabled}))}))),this.isCaptchaEnabled$=this.captchaService.getSettings().pipe(i.map((function(n){return n.useCaptchaOnLogin||n.useCaptchaOnRegistration})))):(this.isExternalProviderEnabled$=s.of(!0),this.isCaptchaEnabled$=s.of(!0))},t}();x.decorators=[{type:e.Component,args:[{selector:"abp-account-settings",template:'<h2>{{ \'AbpAccount::Menu:Account\' | abpLocalization }}</h2>\r\n<hr class="my-4" />\r\n\r\n<div id="AccountSettingsForm" class="row">\r\n  <div class="col-md-12">\r\n    <ul ngbNav #nav="ngbNav" class="nav-tabs">\r\n      <li ngbNavItem>\r\n        <a ngbNavLink>{{ \'AbpAccount::AccountSettingsGeneral\' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-general [isTenant]="isTenant"></abp-account-settings-general>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf="isTwoFactorSettingsEnabled">\r\n        <a ngbNavLink>{{ \'AbpAccount::AccountSettingsTwoFactor\' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-two-factor [isTenant]="isTenant"></abp-account-settings-two-factor>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf="isLdapSettingsEnabled">\r\n        <a ngbNavLink>{{ \'AbpAccount::AccountSettingsLdap\' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-ldap [isTenant]="isTenant"></abp-account-settings-ldap>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf="isCaptchaEnabled$ | async">\r\n        <a ngbNavLink>\r\n          {{ \'AbpAccount::Captcha\' | abpLocalization }}\r\n        </a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-captcha [isTenant]="isTenant"></abp-account-settings-captcha>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf="isExternalProviderEnabled$ | async">\r\n        <a ngbNavLink>\r\n          {{ \'AbpAccount::AccountExternalProviderSettings\' | abpLocalization }}\r\n        </a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-external-provider\r\n            [isTenant]="isTenant"\r\n          ></abp-account-settings-external-provider>\r\n        </ng-template>\r\n      </li>\r\n    </ul>\r\n    <div [ngbNavOutlet]="nav"></div>\r\n  </div>\r\n</div>\r\n',providers:[C,T]}]}],x.ctorParameters=function(){return[{type:t.ConfigStateService},{type:t.SessionStateService},{type:T},{type:C}]};var w=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return p(t,n),t.prototype.mapTenantSettingsForSubmit=function(n){return{version:n.version,siteKey:n.siteKey,siteSecret:n.siteSecret}},t}(d);w.decorators=[{type:e.Component,args:[{selector:"abp-account-settings-captcha",template:'<ng-container *ngIf="settings$ | async; let settings">\r\n  <div (keyup.enter)="submit(settings)">\r\n    <h4>{{ \'AbpAccount::Captcha\' | abpLocalization }}</h4>\r\n\r\n    <ng-container *ngIf="!isTenant">\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="use-captcha-on-login"\r\n          name="useCaptchaOnLogin"\r\n          class="custom-control-input"\r\n          [(ngModel)]="settings.useCaptchaOnLogin"\r\n          autofocus\r\n        /><label class="custom-control-label" for="use-captcha-on-login">{{\r\n          \'AbpAccount::Description:UseCaptchaOnLogin\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="use-captcha-on-registration"\r\n          name="useCaptchaOnRegistration"\r\n          class="custom-control-input"\r\n          [(ngModel)]="settings.useCaptchaOnRegistration"\r\n        /><label class="custom-control-label" for="use-captcha-on-registration">{{\r\n          \'AbpAccount::Description:UseCaptchaOnRegistration\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n\r\n      <div class="form-group">\r\n        <label>{{ \'AbpAccount::DisplayName:VerifyBaseUrl\' | abpLocalization }}</label>\r\n        <input type="text" class="form-control" [(ngModel)]="settings.verifyBaseUrl" />\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpAccount::DisplayName:Version\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.version" />\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpAccount::DisplayName:SiteKey\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.siteKey" />\r\n    </div>\r\n\r\n    <div class="form-group">\r\n      <label>{{ \'AbpAccount::DisplayName:SiteSecret\' | abpLocalization }}</label>\r\n      <input type="text" class="form-control" [(ngModel)]="settings.siteSecret" />\r\n    </div>\r\n\r\n    <hr class="my-4" />\r\n\r\n    <div>\r\n      <abp-button (click)="submit(settings)" iconClass="fa fa-save" [loading]="loading">{{\r\n        \'AbpAccount::Save\' | abpLocalization\r\n      }}</abp-button>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n',changeDetection:e.ChangeDetectionStrategy.OnPush,providers:[{provide:b,useClass:T}]}]}];var O=function(n){function t(){var t=n.apply(this,g(arguments))||this;return t.mapInitialTenantSettings=function(n){return{settings:n.settings.filter((function(n){return n.enabled})).map(t.setUseHostSettingsOf)}},t}return p(t,n),t.prototype.ngOnInit=function(){this.isTenant?this.settings$=this.service.getSettings().pipe(i.map(this.mapInitialTenantSettings)):n.prototype.ngOnInit.call(this)},t.prototype.mapTenantSettingsForSubmit=function(n){return n.map(this.clearPropertyValues)},t.prototype.clearPropertyValues=function(n){return n.useHostSettings&&(n.properties.forEach((function(n){return n.value=""})),n.secretProperties.forEach((function(n){return n.value=""}))),n.useHostSettings,function(n,t){var e={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&t.indexOf(r)<0&&(e[r]=n[r]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(n);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(n,r[o])&&(e[r[o]]=n[r[o]])}return e}(n,["useHostSettings"])},t.prototype.setUseHostSettingsOf=function(n){var t=!(n.properties.some((function(n){return n.value}))||n.secretProperties.some((function(n){return n.value})));return Object.assign(Object.assign({},n),{useHostSettings:t})},t}(d);O.decorators=[{type:e.Component,args:[{selector:"abp-account-settings-external-provider",template:'<ng-container *ngIf="settings$ | async; let settings">\r\n  <div (keyup.enter)="submit(settings.settings)">\r\n    <ng-container *ngFor="let provider of settings.settings">\r\n      <ng-container *ngIf="isTenant; else host">\r\n        <ng-container>\r\n          <h4>{{ provider.name }}</h4>\r\n          <div class="custom-control custom-checkbox">\r\n            <input\r\n              type="checkbox"\r\n              class="custom-control-input"\r\n              [attr.id]="provider.name + \'.use-host-settings\'"\r\n              [(ngModel)]="provider.useHostSettings"\r\n            />\r\n            <label class="custom-control-label" [for]="provider.name + \'.use-host-settings\'">{{\r\n              \'AbpAccount::ExternalProviderUseHostSettings\' | abpLocalization\r\n            }}</label>\r\n          </div>\r\n\r\n          <div class="collapse" [class.show]="!provider.useHostSettings">\r\n            <ng-container *ngTemplateOutlet="propertySetsTemplate"></ng-container>\r\n          </div>\r\n\r\n          <hr class="my-4" />\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-template #host>\r\n        <h4>{{ provider.name }}</h4>\r\n\r\n        <div class="custom-checkbox custom-control mb-2">\r\n          <input\r\n            type="checkbox"\r\n            [attr.id]="provider.name + \'.enabled\'"\r\n            [attr.name]="provider.name + \'.enabled\'"\r\n            class="custom-control-input"\r\n            [(ngModel)]="provider.enabled"\r\n            autofocus\r\n          /><label class="custom-control-label" [attr.for]="provider.name + \'.enabled\'">{{\r\n            \'AbpAccount::ExternalProviderEnabled\' | abpLocalization\r\n          }}</label>\r\n        </div>\r\n\r\n        <ng-container *ngTemplateOutlet="propertySetsTemplate"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template #propertySetsTemplate>\r\n        <ng-container\r\n          *ngTemplateOutlet="singlePropertySetTemplate; context: { $implicit: provider.properties }"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngTemplateOutlet="\r\n            singlePropertySetTemplate;\r\n            context: { $implicit: provider.secretProperties, type: \'password\' }\r\n          "\r\n        ></ng-container>\r\n\r\n        <ng-template #singlePropertySetTemplate let-properties let-type="type">\r\n          <ng-container *ngFor="let property of properties">\r\n            <div class="form-group">\r\n              <label [attr.for]="provider.name + \'.\' + property.name">{{ property.name }}</label>\r\n              <input\r\n                [type]="type || \'text\'"\r\n                class="form-control"\r\n                [(ngModel)]="property.value"\r\n                [attr.id]="provider.name + \'.\' + property.name"\r\n              />\r\n            </div>\r\n          </ng-container>\r\n        </ng-template>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n    <div>\r\n      <abp-button (click)="submit(settings.settings)" iconClass="fa fa-save" [loading]="loading">{{\r\n        \'AbpAccount::Save\' | abpLocalization\r\n      }}</abp-button>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n',changeDetection:e.ChangeDetectionStrategy.OnPush,providers:[{provide:b,useClass:C}]}]}];var P=[d,x,f,m,L,w,O],N=function(){};N.decorators=[{type:e.NgModule,args:[{imports:[t.CoreModule,r.ThemeSharedModule,o.NgbNavModule],exports:g(P),declarations:g(P)}]}],n.AbstractAccountSettingsComponent=d,n.AbstractAccountSettingsService=b,n.AccountAdminModule=c,n.AccountCaptchaService=T,n.AccountExternalProviderService=C,n.AccountLdapService=h,n.AccountSettingsCaptchaComponent=w,n.AccountSettingsComponent=x,n.AccountSettingsExternalProviderComponent=O,n.AccountSettingsGeneralComponent=m,n.AccountSettingsLdapComponent=f,n.AccountSettingsModule=N,n.AccountSettingsService=v,n.AccountSettingsTwoFactorComponent=L,n.AccountTwoFactorSettingService=S,n.twoFactorBehaviourOptions=A,n.ɵa=d,n.ɵb=b,n.ɵc=x,n.ɵd=C,n.ɵe=T,n.ɵf=f,n.ɵg=h,n.ɵh=m,n.ɵi=v,n.ɵj=L,n.ɵk=S,n.ɵl=w,n.ɵm=O,Object.defineProperty(n,"__esModule",{value:!0})}));