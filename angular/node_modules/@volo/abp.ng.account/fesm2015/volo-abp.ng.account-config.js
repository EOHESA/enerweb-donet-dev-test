import { RestService, ConfigStateService, SettingTabsService, noop, CoreModule, mapEnumToOptions } from '@abp/ng.core';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, INJECTOR, Injector, APP_INITIALIZER, NgModule } from '@angular/core';
import { AccountSettingsComponent, AccountSettingsModule } from '@volo/abp.ng.account/admin';
import { PROFILE_PICTURE } from '@volo/abp.commercial.ng.ui';
import { map, filter, tap, switchMap } from 'rxjs/operators';

const DEFAULT_PROFILE_ICON = {
    type: 'icon',
    source: 'fas fa-user bg-light',
};

class ProfilePictureService {
    constructor(restService) {
        this.restService = restService;
        this.url = '/api/account-admin/settings';
        this.publicApiName = 'AbpAccountPublic';
        this.getProfilePicture = (id, skipHandleError = false) => this.restService.request({
            method: 'GET',
            url: `/api/account/profile-picture/${id}`,
        }, {
            apiName: this.publicApiName,
            skipHandleError,
        });
        this.setProfilePicture = (input) => this.restService.request({
            method: 'POST',
            url: `/api/account/profile-picture`,
            body: input,
        }, { apiName: this.publicApiName });
    }
}
ProfilePictureService.ɵprov = ɵɵdefineInjectable({ factory: function ProfilePictureService_Factory() { return new ProfilePictureService(ɵɵinject(RestService)); }, token: ProfilePictureService, providedIn: "root" });
ProfilePictureService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProfilePictureService.ctorParameters = () => [
    { type: RestService }
];

class ProfilePictureHandler {
    constructor(profilePictureService, injector, configState) {
        this.profilePictureService = profilePictureService;
        this.injector = injector;
        this.configState = configState;
        this.listenToAppConfig();
    }
    listenToAppConfig() {
        const profilePictureStream = this.injector.get(PROFILE_PICTURE);
        this.configState
            .createOnUpdateStream(state => state)
            .pipe(map(() => this.configState.getDeep('currentUser.id')), filter(id => id !== this.currentUserId), tap(id => {
            this.currentUserId = id;
            if (!id) {
                profilePictureStream.next(null);
            }
        }), filter(id => !!id), switchMap(id => this.profilePictureService.getProfilePicture(id, true)))
            .subscribe(res => {
            profilePictureStream.next({
                type: 'image',
                source: res.source || `data:image/png;base64,${res.fileContent}`,
            });
        }, () => {
            profilePictureStream.next(DEFAULT_PROFILE_ICON);
        });
    }
}
ProfilePictureHandler.ɵprov = ɵɵdefineInjectable({ factory: function ProfilePictureHandler_Factory() { return new ProfilePictureHandler(ɵɵinject(ProfilePictureService), ɵɵinject(INJECTOR), ɵɵinject(ConfigStateService)); }, token: ProfilePictureHandler, providedIn: "root" });
ProfilePictureHandler.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProfilePictureHandler.ctorParameters = () => [
    { type: ProfilePictureService },
    { type: Injector },
    { type: ConfigStateService }
];

const ACCOUNT_SETTING_TAB_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureSettingTabs,
        deps: [SettingTabsService],
        multi: true,
    },
];
function configureSettingTabs(settingtabs) {
    return () => {
        settingtabs.add([
            {
                name: "AbpAccount::Menu:Account" /* Account */,
                order: 3,
                requiredPolicy: 'AbpAccount.SettingManagement',
                component: AccountSettingsComponent,
            },
        ]);
    };
}

class AccountConfigModule {
    static forRoot() {
        return {
            ngModule: AccountConfigModule,
            providers: [
                ACCOUNT_SETTING_TAB_PROVIDERS,
                {
                    provide: APP_INITIALIZER,
                    multi: true,
                    deps: [ProfilePictureHandler],
                    useFactory: noop,
                },
            ],
        };
    }
}
AccountConfigModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, AccountSettingsModule],
                exports: [AccountSettingsModule],
                declarations: [],
            },] }
];

var ProfilePictureType;
(function (ProfilePictureType) {
    ProfilePictureType[ProfilePictureType["None"] = 0] = "None";
    ProfilePictureType[ProfilePictureType["Gravatar"] = 1] = "Gravatar";
    ProfilePictureType[ProfilePictureType["Image"] = 2] = "Image";
})(ProfilePictureType || (ProfilePictureType = {}));
const profilePictureTypeOptions = mapEnumToOptions(ProfilePictureType);

/**
 * Generated bundle index. Do not edit.
 */

export { ACCOUNT_SETTING_TAB_PROVIDERS, AccountConfigModule, DEFAULT_PROFILE_ICON, ProfilePictureHandler, ProfilePictureService, ProfilePictureType, configureSettingTabs, profilePictureTypeOptions, ACCOUNT_SETTING_TAB_PROVIDERS as ɵa, configureSettingTabs as ɵb, ProfilePictureHandler as ɵc, ProfilePictureService as ɵd };
//# sourceMappingURL=volo-abp.ng.account-config.js.map
