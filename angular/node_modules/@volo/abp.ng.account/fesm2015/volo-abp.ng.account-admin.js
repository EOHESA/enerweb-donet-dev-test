import { CoreModule, ConfigStateService, ApplicationConfigurationService, RestService, mapEnumToOptions, SessionStateService } from '@abp/ng.core';
import { NgModule, Component, ChangeDetectorRef, Input, Injectable, ChangeDetectionStrategy } from '@angular/core';
import { ToasterService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';
import { Store } from '@ngxs/store';
import { finalize, map } from 'rxjs/operators';
import { of } from 'rxjs';
import { __rest } from 'tslib';

class AccountAdminModule {
}
AccountAdminModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule],
            },] }
];

class AbstractAccountSettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpAccountAdmin';
    }
    getSettings() {
        return this.restService.request({
            method: 'GET',
            url: this.url,
        }, { apiName: this.apiName });
    }
    updateSettings(body) {
        return this.restService.request({
            method: 'PUT',
            url: this.url,
            body,
        }, { apiName: this.apiName });
    }
}

class AbstractAccountSettingsComponent {
    constructor(service, toaster, cdr, store, configState, appConfigService) {
        this.service = service;
        this.toaster = toaster;
        this.cdr = cdr;
        this.store = store;
        this.configState = configState;
        this.appConfigService = appConfigService;
    }
    set loading(value) {
        this._loading = value;
        this.cdr.markForCheck();
    }
    get loading() {
        return this._loading;
    }
    ngOnInit() {
        this.settings$ = this.service.getSettings();
    }
    submit(newSettings) {
        this.loading = true;
        this.service
            .updateSettings(this.isTenant ? this.mapTenantSettingsForSubmit(newSettings) : newSettings)
            .pipe(finalize(() => (this.loading = false)))
            .subscribe(() => {
            this.toaster.success('AbpSettingManagement::SuccessfullySaved', null);
            this.appConfigService.getConfiguration().subscribe(res => this.configState.setState(res));
        });
    }
    /**
     * should be overriden by children components
     * if it is not overridden,
     * it means that there is no difference between host and tenant for the particular child
     */
    mapTenantSettingsForSubmit(newSettings) {
        return newSettings;
    }
}
AbstractAccountSettingsComponent.decorators = [
    { type: Component, args: [{
                template: ''
            },] }
];
AbstractAccountSettingsComponent.ctorParameters = () => [
    { type: AbstractAccountSettingsService },
    { type: ToasterService },
    { type: ChangeDetectorRef },
    { type: Store },
    { type: ConfigStateService },
    { type: ApplicationConfigurationService }
];
AbstractAccountSettingsComponent.propDecorators = {
    isTenant: [{ type: Input }]
};

class AccountSettingsService extends AbstractAccountSettingsService {
    constructor(restService) {
        super(restService);
        this.url = '/api/account-admin/settings';
    }
}
AccountSettingsService.decorators = [
    { type: Injectable }
];
AccountSettingsService.ctorParameters = () => [
    { type: RestService }
];

class AccountSettingsGeneralComponent extends AbstractAccountSettingsComponent {
}
AccountSettingsGeneralComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-account-settings-general',
                template: "<ng-container *ngIf=\"settings$ | async; let settings\">\r\n  <div (keyup.enter)=\"submit(settings)\">\r\n    <div class=\"custom-checkbox custom-control mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"IsSelfRegistrationEnabled\"\r\n        name=\"IsSelfRegistrationEnabled\"\r\n        class=\"custom-control-input\"\r\n        [(ngModel)]=\"settings.isSelfRegistrationEnabled\"\r\n        autofocus\r\n      /><label class=\"custom-control-label\" for=\"IsSelfRegistrationEnabled\">{{\r\n        'AbpAccount::DisplayName:IsSelfRegistrationEnabled' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class=\"custom-checkbox custom-control mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"EnableLocalLogin\"\r\n        name=\"EnableLocalLogin\"\r\n        class=\"custom-control-input\"\r\n        [(ngModel)]=\"settings.enableLocalLogin\"\r\n      /><label class=\"custom-control-label\" for=\"EnableLocalLogin\">{{\r\n        'AbpAccount::DisplayName:EnableLocalLogin' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <hr class=\"my-4\" />\r\n\r\n  <div>\r\n    <abp-button (click)=\"submit(settings)\" iconClass=\"fa fa-save\" [loading]=\"loading\">{{\r\n      'AbpAccount::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </div>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: AbstractAccountSettingsService,
                        useClass: AccountSettingsService,
                    },
                ]
            },] }
];

class AccountLdapService extends AbstractAccountSettingsService {
    constructor(restService) {
        super(restService);
        this.url = '/api/account-admin/settings/ldap';
    }
}
AccountLdapService.decorators = [
    { type: Injectable }
];
AccountLdapService.ctorParameters = () => [
    { type: RestService }
];

class AccountSettingsLdapComponent extends AbstractAccountSettingsComponent {
}
AccountSettingsLdapComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-account-settings-ldap',
                template: "<ng-container *ngIf=\"settings$ | async; let settings\">\r\n  <div id=\"ldap-login-settings\" (keyup.enter)=\"submit(settings)\">\r\n    <h4>{{ 'AbpAccount::LdapLoginSettings' | abpLocalization }}</h4>\r\n\r\n    <div class=\"custom-checkbox custom-control mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"enable-ldap-login\"\r\n        class=\"custom-control-input\"\r\n        [(ngModel)]=\"settings.enableLdapLogin\"\r\n        autofocus\r\n      /><label class=\"custom-control-label\" for=\"enable-ldap-login\">{{\r\n        'AbpAccount::DisplayName:EnableLdapLogin' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpLdap::DisplayName:Abp.Ldap.ServerHost' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.ldapServerHost\" />\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpLdap::DisplayName:Abp.Ldap.ServerPort' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.ldapServerPort\" />\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpLdap::DisplayName:Abp.Ldap.BaseDc' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.ldapBaseDc\" />\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpLdap::DisplayName:Abp.Ldap.UserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.ldapUserName\" />\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpLdap::DisplayName:Abp.Ldap.Password' | abpLocalization }}</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'AbpAccount::LdapPasswordPlaceholder' | abpLocalization }}\"\r\n        [(ngModel)]=\"settings.ldapPassword\"\r\n        autocomplete=\"new-password\"\r\n      />\r\n    </div>\r\n  </div>\r\n\r\n  <hr class=\"my-4\" />\r\n\r\n  <div>\r\n    <abp-button (click)=\"submit(settings)\" iconClass=\"fa fa-save\" [loading]=\"loading\">{{\r\n      'AbpAccount::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </div>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: AbstractAccountSettingsService,
                        useClass: AccountLdapService,
                    },
                ]
            },] }
];

class AccountTwoFactorSettingService extends AbstractAccountSettingsService {
    constructor(restService) {
        super(restService);
        this.url = '/api/account-admin/settings/two-factor';
    }
}
AccountTwoFactorSettingService.decorators = [
    { type: Injectable }
];
AccountTwoFactorSettingService.ctorParameters = () => [
    { type: RestService }
];

var eTwoFactorBehaviour;
(function (eTwoFactorBehaviour) {
    eTwoFactorBehaviour[eTwoFactorBehaviour["Optional"] = 0] = "Optional";
    eTwoFactorBehaviour[eTwoFactorBehaviour["Disabled"] = 1] = "Disabled";
    eTwoFactorBehaviour[eTwoFactorBehaviour["Forced"] = 2] = "Forced";
})(eTwoFactorBehaviour || (eTwoFactorBehaviour = {}));
const twoFactorBehaviourOptions = mapEnumToOptions(eTwoFactorBehaviour);

class AccountSettingsTwoFactorComponent extends AbstractAccountSettingsComponent {
    constructor() {
        super(...arguments);
        this.eTwoFactorBehaviour = eTwoFactorBehaviour;
        this.twoFactorBehaviourOptions = twoFactorBehaviourOptions;
    }
}
AccountSettingsTwoFactorComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-account-settings-two-factor',
                template: "<ng-container *ngIf=\"settings$ | async; let settings\">\r\n  <div (keyup.enter)=\"submit(settings)\">\r\n    <h4>{{ 'AbpAccount::TwoFactorAuthentication' | abpLocalization }}</h4>\r\n    <div>\r\n      <div class=\"form-group\">\r\n        <label for=\"AccountTwoFactorSettings_TwoFactorBehaviour\">{{\r\n          'AbpIdentity::DisplayName:Abp.Identity.TwoFactorBehaviour' | abpLocalization\r\n        }}</label>\r\n        <select\r\n          name=\"TwoFactorBehaviour\"\r\n          class=\"custom-select form-control\"\r\n          [(ngModel)]=\"settings.twoFactorBehaviour\"\r\n        >\r\n          <option *ngFor=\"let option of twoFactorBehaviourOptions\" [ngValue]=\"option.value\">{{\r\n            option.key\r\n          }}</option>\r\n        </select>\r\n      </div>\r\n      <div\r\n        *ngIf=\"settings.twoFactorBehaviour === eTwoFactorBehaviour.Optional\"\r\n        class=\"custom-checkbox custom-control mb-2\"\r\n      >\r\n        <input\r\n          name=\"UsersCanChange\"\r\n          type=\"checkbox\"\r\n          checked=\"checked\"\r\n          id=\"AccountTwoFactorSettings_UsersCanChange\"\r\n          [(ngModel)]=\"settings.usersCanChange\"\r\n          class=\"custom-control-input\"\r\n        /><label class=\"custom-control-label\" for=\"AccountTwoFactorSettings_UsersCanChange\">{{\r\n          'AbpIdentity::DisplayName:Abp.Identity.UsersCanChange' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n      <div class=\"custom-checkbox custom-control mb-2\">\r\n        <input\r\n          name=\"IsRememberBrowserEnabled\"\r\n          type=\"checkbox\"\r\n          checked=\"checked\"\r\n          id=\"AccountTwoFactorSettings_IsRememberBrowserEnabled\"\r\n          [(ngModel)]=\"settings.isRememberBrowserEnabled\"\r\n          class=\"custom-control-input \"\r\n        /><label\r\n          class=\"custom-control-label\"\r\n          for=\"AccountTwoFactorSettings_IsRememberBrowserEnabled\"\r\n          >{{ 'AbpAccount::RememberBrowser' | abpLocalization }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n    <hr class=\"my-4\" />\r\n    <div>\r\n      <abp-button (click)=\"submit(settings)\" iconClass=\"fa fa-save\" [loading]=\"loading\">{{\r\n        'AbpAccount::Save' | abpLocalization\r\n      }}</abp-button>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: AbstractAccountSettingsService,
                        useClass: AccountTwoFactorSettingService,
                    },
                ]
            },] }
];

class AccountExternalProviderService extends AbstractAccountSettingsService {
    constructor(restService) {
        super(restService);
        this.url = '/api/account-admin/settings/external-provider';
    }
}
AccountExternalProviderService.decorators = [
    { type: Injectable }
];
AccountExternalProviderService.ctorParameters = () => [
    { type: RestService }
];

class AccountCaptchaService extends AbstractAccountSettingsService {
    constructor(restService) {
        super(restService);
        this.url = '/api/account-admin/settings/recaptcha';
    }
}
AccountCaptchaService.decorators = [
    { type: Injectable }
];
AccountCaptchaService.ctorParameters = () => [
    { type: RestService }
];

class AccountSettingsComponent {
    constructor(configStateService, sessionStateService, captchaService, externalProviderService) {
        this.configStateService = configStateService;
        this.sessionStateService = sessionStateService;
        this.captchaService = captchaService;
        this.externalProviderService = externalProviderService;
    }
    ngOnInit() {
        var _a;
        this.isLdapSettingsEnabled =
            this.configStateService.getFeature('Account.EnableLdapLogin').toLowerCase() !== 'false';
        this.isTwoFactorSettingsEnabled =
            this.configStateService.getFeature('Identity.TwoFactor') ===
                eTwoFactorBehaviour[eTwoFactorBehaviour.Optional];
        this.isTenant = (_a = this.sessionStateService.getTenant()) === null || _a === void 0 ? void 0 : _a.isAvailable;
        if (this.isTenant) {
            this.isExternalProviderEnabled$ = this.externalProviderService
                .getSettings()
                .pipe(map(result => result.settings.some(settings => settings.enabled)));
            this.isCaptchaEnabled$ = this.captchaService
                .getSettings()
                .pipe(map(result => result.useCaptchaOnLogin || result.useCaptchaOnRegistration));
        }
        else {
            this.isExternalProviderEnabled$ = of(true);
            this.isCaptchaEnabled$ = of(true);
        }
    }
}
AccountSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-account-settings',
                template: "<h2>{{ 'AbpAccount::Menu:Account' | abpLocalization }}</h2>\r\n<hr class=\"my-4\" />\r\n\r\n<div id=\"AccountSettingsForm\" class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\r\n      <li ngbNavItem>\r\n        <a ngbNavLink>{{ 'AbpAccount::AccountSettingsGeneral' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-general [isTenant]=\"isTenant\"></abp-account-settings-general>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf=\"isTwoFactorSettingsEnabled\">\r\n        <a ngbNavLink>{{ 'AbpAccount::AccountSettingsTwoFactor' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-two-factor [isTenant]=\"isTenant\"></abp-account-settings-two-factor>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf=\"isLdapSettingsEnabled\">\r\n        <a ngbNavLink>{{ 'AbpAccount::AccountSettingsLdap' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-ldap [isTenant]=\"isTenant\"></abp-account-settings-ldap>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf=\"isCaptchaEnabled$ | async\">\r\n        <a ngbNavLink>\r\n          {{ 'AbpAccount::Captcha' | abpLocalization }}\r\n        </a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-captcha [isTenant]=\"isTenant\"></abp-account-settings-captcha>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem *ngIf=\"isExternalProviderEnabled$ | async\">\r\n        <a ngbNavLink>\r\n          {{ 'AbpAccount::AccountExternalProviderSettings' | abpLocalization }}\r\n        </a>\r\n        <ng-template ngbNavContent>\r\n          <abp-account-settings-external-provider\r\n            [isTenant]=\"isTenant\"\r\n          ></abp-account-settings-external-provider>\r\n        </ng-template>\r\n      </li>\r\n    </ul>\r\n    <div [ngbNavOutlet]=\"nav\"></div>\r\n  </div>\r\n</div>\r\n",
                providers: [AccountExternalProviderService, AccountCaptchaService]
            },] }
];
AccountSettingsComponent.ctorParameters = () => [
    { type: ConfigStateService },
    { type: SessionStateService },
    { type: AccountCaptchaService },
    { type: AccountExternalProviderService }
];

class AccountSettingsCaptchaComponent extends AbstractAccountSettingsComponent {
    mapTenantSettingsForSubmit(newSettings) {
        return {
            version: newSettings.version,
            siteKey: newSettings.siteKey,
            siteSecret: newSettings.siteSecret,
        };
    }
}
AccountSettingsCaptchaComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-account-settings-captcha',
                template: "<ng-container *ngIf=\"settings$ | async; let settings\">\r\n  <div (keyup.enter)=\"submit(settings)\">\r\n    <h4>{{ 'AbpAccount::Captcha' | abpLocalization }}</h4>\r\n\r\n    <ng-container *ngIf=\"!isTenant\">\r\n      <div class=\"custom-checkbox custom-control mb-2\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"use-captcha-on-login\"\r\n          name=\"useCaptchaOnLogin\"\r\n          class=\"custom-control-input\"\r\n          [(ngModel)]=\"settings.useCaptchaOnLogin\"\r\n          autofocus\r\n        /><label class=\"custom-control-label\" for=\"use-captcha-on-login\">{{\r\n          'AbpAccount::Description:UseCaptchaOnLogin' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n      <div class=\"custom-checkbox custom-control mb-2\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"use-captcha-on-registration\"\r\n          name=\"useCaptchaOnRegistration\"\r\n          class=\"custom-control-input\"\r\n          [(ngModel)]=\"settings.useCaptchaOnRegistration\"\r\n        /><label class=\"custom-control-label\" for=\"use-captcha-on-registration\">{{\r\n          'AbpAccount::Description:UseCaptchaOnRegistration' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label>{{ 'AbpAccount::DisplayName:VerifyBaseUrl' | abpLocalization }}</label>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.verifyBaseUrl\" />\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpAccount::DisplayName:Version' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.version\" />\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpAccount::DisplayName:SiteKey' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.siteKey\" />\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label>{{ 'AbpAccount::DisplayName:SiteSecret' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"settings.siteSecret\" />\r\n    </div>\r\n\r\n    <hr class=\"my-4\" />\r\n\r\n    <div>\r\n      <abp-button (click)=\"submit(settings)\" iconClass=\"fa fa-save\" [loading]=\"loading\">{{\r\n        'AbpAccount::Save' | abpLocalization\r\n      }}</abp-button>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: AbstractAccountSettingsService,
                        useClass: AccountCaptchaService,
                    },
                ]
            },] }
];

class AccountSettingsExternalProviderComponent extends AbstractAccountSettingsComponent {
    constructor() {
        super(...arguments);
        this.mapInitialTenantSettings = (result) => ({
            settings: result.settings.filter(setting => setting.enabled).map(this.setUseHostSettingsOf),
        });
    }
    ngOnInit() {
        if (this.isTenant) {
            this.settings$ = this.service.getSettings().pipe(map(this.mapInitialTenantSettings));
        }
        else {
            super.ngOnInit();
        }
    }
    mapTenantSettingsForSubmit(newSettings) {
        return newSettings.map(this.clearPropertyValues);
    }
    clearPropertyValues(setting) {
        if (setting.useHostSettings) {
            setting.properties.forEach(prop => (prop.value = ''));
            setting.secretProperties.forEach(prop => (prop.value = ''));
        }
        const { useHostSettings } = setting, mappedSetting = __rest(setting, ["useHostSettings"]);
        return mappedSetting;
    }
    setUseHostSettingsOf(setting) {
        const useHostSettings = !(setting.properties.some(prop => prop.value) ||
            setting.secretProperties.some(prop => prop.value));
        return Object.assign(Object.assign({}, setting), { useHostSettings });
    }
}
AccountSettingsExternalProviderComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-account-settings-external-provider',
                template: "<ng-container *ngIf=\"settings$ | async; let settings\">\r\n  <div (keyup.enter)=\"submit(settings.settings)\">\r\n    <ng-container *ngFor=\"let provider of settings.settings\">\r\n      <ng-container *ngIf=\"isTenant; else host\">\r\n        <ng-container>\r\n          <h4>{{ provider.name }}</h4>\r\n          <div class=\"custom-control custom-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              class=\"custom-control-input\"\r\n              [attr.id]=\"provider.name + '.use-host-settings'\"\r\n              [(ngModel)]=\"provider.useHostSettings\"\r\n            />\r\n            <label class=\"custom-control-label\" [for]=\"provider.name + '.use-host-settings'\">{{\r\n              'AbpAccount::ExternalProviderUseHostSettings' | abpLocalization\r\n            }}</label>\r\n          </div>\r\n\r\n          <div class=\"collapse\" [class.show]=\"!provider.useHostSettings\">\r\n            <ng-container *ngTemplateOutlet=\"propertySetsTemplate\"></ng-container>\r\n          </div>\r\n\r\n          <hr class=\"my-4\" />\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-template #host>\r\n        <h4>{{ provider.name }}</h4>\r\n\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            [attr.id]=\"provider.name + '.enabled'\"\r\n            [attr.name]=\"provider.name + '.enabled'\"\r\n            class=\"custom-control-input\"\r\n            [(ngModel)]=\"provider.enabled\"\r\n            autofocus\r\n          /><label class=\"custom-control-label\" [attr.for]=\"provider.name + '.enabled'\">{{\r\n            'AbpAccount::ExternalProviderEnabled' | abpLocalization\r\n          }}</label>\r\n        </div>\r\n\r\n        <ng-container *ngTemplateOutlet=\"propertySetsTemplate\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template #propertySetsTemplate>\r\n        <ng-container\r\n          *ngTemplateOutlet=\"singlePropertySetTemplate; context: { $implicit: provider.properties }\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngTemplateOutlet=\"\r\n            singlePropertySetTemplate;\r\n            context: { $implicit: provider.secretProperties, type: 'password' }\r\n          \"\r\n        ></ng-container>\r\n\r\n        <ng-template #singlePropertySetTemplate let-properties let-type=\"type\">\r\n          <ng-container *ngFor=\"let property of properties\">\r\n            <div class=\"form-group\">\r\n              <label [attr.for]=\"provider.name + '.' + property.name\">{{ property.name }}</label>\r\n              <input\r\n                [type]=\"type || 'text'\"\r\n                class=\"form-control\"\r\n                [(ngModel)]=\"property.value\"\r\n                [attr.id]=\"provider.name + '.' + property.name\"\r\n              />\r\n            </div>\r\n          </ng-container>\r\n        </ng-template>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n    <div>\r\n      <abp-button (click)=\"submit(settings.settings)\" iconClass=\"fa fa-save\" [loading]=\"loading\">{{\r\n        'AbpAccount::Save' | abpLocalization\r\n      }}</abp-button>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: AbstractAccountSettingsService,
                        useClass: AccountExternalProviderService,
                    },
                ]
            },] }
];

const components = [
    AbstractAccountSettingsComponent,
    AccountSettingsComponent,
    AccountSettingsLdapComponent,
    AccountSettingsGeneralComponent,
    AccountSettingsTwoFactorComponent,
    AccountSettingsCaptchaComponent,
    AccountSettingsExternalProviderComponent,
];
class AccountSettingsModule {
}
AccountSettingsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, ThemeSharedModule, NgbNavModule],
                exports: [...components],
                declarations: [...components],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractAccountSettingsComponent, AbstractAccountSettingsService, AccountAdminModule, AccountCaptchaService, AccountExternalProviderService, AccountLdapService, AccountSettingsCaptchaComponent, AccountSettingsComponent, AccountSettingsExternalProviderComponent, AccountSettingsGeneralComponent, AccountSettingsLdapComponent, AccountSettingsModule, AccountSettingsService, AccountSettingsTwoFactorComponent, AccountTwoFactorSettingService, eTwoFactorBehaviour, twoFactorBehaviourOptions, AbstractAccountSettingsComponent as ɵa, AbstractAccountSettingsService as ɵb, AccountSettingsComponent as ɵc, AccountExternalProviderService as ɵd, AccountCaptchaService as ɵe, AccountSettingsLdapComponent as ɵf, AccountLdapService as ɵg, AccountSettingsGeneralComponent as ɵh, AccountSettingsService as ɵi, AccountSettingsTwoFactorComponent as ɵj, AccountTwoFactorSettingService as ɵk, AccountSettingsCaptchaComponent as ɵl, AccountSettingsExternalProviderComponent as ɵm };
//# sourceMappingURL=volo-abp.ng.account-admin.js.map
