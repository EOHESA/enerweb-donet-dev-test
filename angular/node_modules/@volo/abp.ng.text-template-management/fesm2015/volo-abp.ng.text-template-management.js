import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, Injector, InjectionToken, NgModule } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { ToasterService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { tap, finalize, switchMap, map, mapTo } from 'rxjs/operators';
import { RestService, ConfigStateService, ListService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, RouterOutletComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { __decorate, __rest } from 'tslib';
import { EXTENSIONS_IDENTIFIER, EntityProp, EntityAction, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.theme.shared/extensions';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { CommercialUiModule } from '@volo/abp.commercial.ng.ui';

class TemplateContentService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'TextTemplateManagement';
        this.get = (input) => this.restService.request({
            method: 'GET',
            url: `/api/text-template-management/template-contents`,
            params: { templateName: input.templateName, cultureName: input.cultureName },
        }, { apiName: this.apiName });
        this.restoreToDefault = (input) => this.restService.request({
            method: 'PUT',
            url: `/api/text-template-management/template-contents/restore-to-default`,
            body: input,
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'PUT',
            url: `/api/text-template-management/template-contents`,
            body: input,
        }, { apiName: this.apiName });
    }
}
TemplateContentService.ɵprov = ɵɵdefineInjectable({ factory: function TemplateContentService_Factory() { return new TemplateContentService(ɵɵinject(RestService)); }, token: TemplateContentService, providedIn: "root" });
TemplateContentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
TemplateContentService.ctorParameters = () => [
    { type: RestService }
];

// Not an abstract class on purpose. Do not change!
// tslint:disable-next-line: use-component-selector
class AbstractTemplateContentComponent {
    constructor(injector) {
        this.injector = injector;
        this.templateContent = {};
        this.fb = injector.get(FormBuilder);
        this.templateContentService = injector.get(TemplateContentService);
        this.route = injector.get(ActivatedRoute);
        this.toaster = injector.get(ToasterService);
    }
    ngOnInit() {
        this.form = this.fb.group({ content: ['', [Validators.required]] });
        this.getData().subscribe();
    }
    getData() {
        const templateName = this.route.snapshot.params.name;
        return this.templateContentService
            .get({ templateName, cultureName: this.selectedCultureName })
            .pipe(tap(templateContent => {
            this.templateContent = templateContent;
            this.form.get('content').setValue(this.templateContent.content);
        }));
    }
    save(callback) {
        if (this.form.invalid)
            return;
        this.busy = true;
        const { content } = this.form.value;
        this.templateContentService
            .update({
            templateName: this.templateContent.name,
            cultureName: this.selectedCultureName,
            content,
        })
            .pipe(finalize(() => (this.busy = false)))
            .subscribe(() => {
            this.toaster.success('TextTemplateManagement::Success');
            if (callback)
                callback();
        });
    }
    restoreToDefault() {
        this.busy = true;
        this.templateContentService
            .restoreToDefault({
            templateName: this.templateContent.name,
            cultureName: this.selectedCultureName,
        })
            .pipe(switchMap(() => this.getData()), finalize(() => (this.busy = false)))
            .subscribe(() => {
            this.toaster.success('TextTemplateManagement::Success');
        });
    }
}
AbstractTemplateContentComponent.decorators = [
    { type: Component, args: [{
                template: ''
            },] }
];
AbstractTemplateContentComponent.ctorParameters = () => [
    { type: Injector }
];

class InlineTemplateContentComponent extends AbstractTemplateContentComponent {
    constructor(injector, router) {
        super(injector);
        this.injector = injector;
        this.router = router;
    }
    customizePerCulture() {
        this.router.navigateByUrl(`/text-template-management/text-templates/contents/${this.templateContent.name}`);
    }
    save() {
        super.save(() => {
            this.router.navigateByUrl('/text-template-management/text-templates');
        });
    }
}
InlineTemplateContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-inline-template-content',
                template: "<div class=\"row entry-row\">\r\n  <div class=\"col-auto\">\r\n    <h1 class=\"content-header-title\">\r\n      {{ 'TextTemplateManagement::Contents' | abpLocalization }}\r\n    </h1>\r\n  </div>\r\n  <div class=\"col-lg-auto pl-lg-0\">\r\n    <abp-breadcrumb></abp-breadcrumb>\r\n  </div>\r\n</div>\r\n\r\n<div\r\n  role=\"alert\"\r\n  class=\"alert alert-danger\"\r\n  [innerHTML]=\"'TextTemplateManagement::InlineContentDescription' | abpLocalization\"\r\n></div>\r\n\r\n<div class=\"card\">\r\n  <div class=\"card-header\">\r\n    <label\r\n      >{{ 'TextTemplateManagement::Name' | abpLocalization }}:\r\n      <strong>{{ templateContent.name }}</strong></label\r\n    >\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <form id=\"template-inline-content-form\" [formGroup]=\"form\">\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <div class=\"form-group\">\r\n            <label for=\"TemplateContent\">{{\r\n              'TextTemplateManagement::TemplateContent' | abpLocalization\r\n            }}</label\r\n            ><span> * </span\r\n            ><textarea\r\n              id=\"TemplateContent\"\r\n              name=\"TemplateContent\"\r\n              rows=\"10\"\r\n              class=\"form-control\"\r\n              formControlName=\"content\"\r\n              [disabled]=\"busy\"\r\n            >\r\n            </textarea>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col col-md-4\">\r\n          <a\r\n            routerLink=\"/text-template-management/text-templates\"\r\n            role=\"button\"\r\n            class=\"btn btn-primary\"\r\n          >\r\n            <i class=\"fa fa-arrow-left mr-1\"></i>\r\n            <span>{{ 'TextTemplateManagement::ReturnToTemplates' | abpLocalization }}</span>\r\n          </a>\r\n        </div>\r\n        <div class=\"col col-md-8\">\r\n          <div class=\"float-right\">\r\n            <button\r\n              id=\"save-content\"\r\n              class=\"btn btn-primary\"\r\n              type=\"button\"\r\n              [disabled]=\"busy\"\r\n              (click)=\"save()\"\r\n            >\r\n              <span>{{ 'TextTemplateManagement::SaveContent' | abpLocalization }}</span>\r\n            </button>\r\n            <button\r\n              id=\"restore-to-default\"\r\n              class=\"btn btn-danger ml-1\"\r\n              type=\"button\"\r\n              [disabled]=\"busy\"\r\n              (click)=\"restoreToDefault()\"\r\n            >\r\n              <span>{{ 'TextTemplateManagement::RestoreToDefault' | abpLocalization }}</span>\r\n            </button>\r\n            <button\r\n              id=\"edit-unique-localization\"\r\n              class=\"btn btn-link ml-1\"\r\n              type=\"button\"\r\n              [disabled]=\"busy\"\r\n              (click)=\"customizePerCulture()\"\r\n            >\r\n              <span>{{ 'TextTemplateManagement::CustomizePerCulture' | abpLocalization }}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
            },] }
];
InlineTemplateContentComponent.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];

class TemplateContentsComponent extends AbstractTemplateContentComponent {
    constructor(injector, configStateService) {
        super(injector);
        this.injector = injector;
        this.configStateService = configStateService;
        this.languages = [];
        this.referenceTemplateContent = { content: '' };
    }
    ngOnInit() {
        this.languages = this.configStateService.getDeep('localization.languages');
        this.selectedCultureName = this.languages[0].cultureName;
        this.referenceTemplateContent.cultureName = this.configStateService.getDeep('localization.currentCulture.cultureName');
        super.ngOnInit();
        this.getReferenceTemplateContent();
    }
    getReferenceTemplateContent() {
        this.templateContentService
            .get({
            templateName: this.route.snapshot.params.name,
            cultureName: this.referenceTemplateContent.cultureName,
        })
            .subscribe(res => {
            this.referenceTemplateContent = res;
        });
    }
    onChangeSelectedCultureName() {
        this.getData().subscribe();
    }
}
TemplateContentsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-template-contents',
                template: "<div class=\"row entry-row\">\r\n  <div class=\"col-auto\">\r\n    <h1 class=\"content-header-title\">\r\n      {{ 'TextTemplateManagement::Contents' | abpLocalization }}\r\n    </h1>\r\n  </div>\r\n  <div class=\"col-lg-auto pl-lg-0\">\r\n    <abp-breadcrumb></abp-breadcrumb>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"card\">\r\n  <div class=\"card-header\">\r\n    <label\r\n      >{{ 'TextTemplateManagement::Name' | abpLocalization }}:\r\n      <strong>{{ templateContent.name }}</strong></label\r\n    >\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"form-group\">\r\n          <label for=\"target-culture-name\">{{\r\n            'TextTemplateManagement::BaseCultureName' | abpLocalization\r\n          }}</label>\r\n          <select\r\n            class=\"culture-selector custom-select form-control\"\r\n            id=\"target-culture-name\"\r\n            name=\"target-culture-name\"\r\n            [(ngModel)]=\"referenceTemplateContent.cultureName\"\r\n            (ngModelChange)=\"getReferenceTemplateContent()\"\r\n            ><option *ngFor=\"let language of languages\" [ngValue]=\"language.cultureName\">{{\r\n              language.displayName\r\n            }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"form-group\">\r\n              <label for=\"reference-content\">{{\r\n                'TextTemplateManagement::BaseContent' | abpLocalization\r\n              }}</label\r\n              ><textarea\r\n                id=\"reference-content\"\r\n                name=\"reference-content\"\r\n                rows=\"10\"\r\n                class=\"form-control\"\r\n                readonly\r\n                [value]=\"referenceTemplateContent.content\"\r\n              >\r\n              </textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <div class=\"form-group\">\r\n          <label for=\"target-culture-name\">{{\r\n            'TextTemplateManagement::TargetCultureName' | abpLocalization\r\n          }}</label>\r\n          <select\r\n            class=\"culture-selector custom-select form-control\"\r\n            id=\"target-culture-name\"\r\n            name=\"target-culture-name\"\r\n            [(ngModel)]=\"selectedCultureName\"\r\n            (ngModelChange)=\"onChangeSelectedCultureName()\"\r\n            ><option *ngFor=\"let language of languages\" [ngValue]=\"language.cultureName\">{{\r\n              language.displayName\r\n            }}</option>\r\n          </select>\r\n        </div>\r\n        <form id=\"template-inline-content-form\" [formGroup]=\"form\">\r\n          <div class=\"row\">\r\n            <div class=\"col\">\r\n              <div class=\"form-group\">\r\n                <label for=\"TemplateContent\">{{\r\n                  'TextTemplateManagement::TemplateContent' | abpLocalization\r\n                }}</label\r\n                ><span> * </span\r\n                ><textarea\r\n                  id=\"TemplateContent\"\r\n                  name=\"TemplateContent\"\r\n                  rows=\"10\"\r\n                  class=\"form-control\"\r\n                  formControlName=\"content\"\r\n                  [disabled]=\"busy\"\r\n                >\r\n                </textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-4\">\r\n        <a\r\n          routerLink=\"/text-template-management/text-templates\"\r\n          role=\"button\"\r\n          class=\"btn btn-primary\"\r\n        >\r\n          <i class=\"fa fa-arrow-left mr-1\"></i>\r\n          <span>{{ 'TextTemplateManagement::ReturnToTemplates' | abpLocalization }}</span>\r\n        </a>\r\n      </div>\r\n      <div class=\"col col-md-8\">\r\n        <div class=\"float-right\">\r\n          <button\r\n            id=\"save-content\"\r\n            class=\"btn btn-primary\"\r\n            type=\"button\"\r\n            [disabled]=\"busy\"\r\n            (click)=\"save()\"\r\n          >\r\n            <span>{{ 'TextTemplateManagement::SaveContent' | abpLocalization }}</span>\r\n          </button>\r\n          <button\r\n            id=\"restore-to-default\"\r\n            class=\"btn btn-danger ml-1\"\r\n            type=\"button\"\r\n            [disabled]=\"busy\"\r\n            (click)=\"restoreToDefault()\"\r\n          >\r\n            <span>{{ 'TextTemplateManagement::RestoreToDefault' | abpLocalization }}</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
            },] }
];
TemplateContentsComponent.ctorParameters = () => [
    { type: Injector },
    { type: ConfigStateService }
];

class GetTemplateDefinitions {
    constructor(payload) {
        this.payload = payload;
    }
}
GetTemplateDefinitions.type = '[TextTemplateManagement] Get template definitions';

class TemplateDefinitionService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'TextTemplateManagement';
        this.get = (name) => this.restService.request({
            method: 'GET',
            url: `/api/text-template-management/template-definitions/${name}`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/text-template-management/template-definitions`,
            params: { filterText: input.filterText, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
    }
}
TemplateDefinitionService.ɵprov = ɵɵdefineInjectable({ factory: function TemplateDefinitionService_Factory() { return new TemplateDefinitionService(ɵɵinject(RestService)); }, token: TemplateDefinitionService, providedIn: "root" });
TemplateDefinitionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
TemplateDefinitionService.ctorParameters = () => [
    { type: RestService }
];

class TextTemplateManagementStateModel {
}
let TextTemplateManagementState = class TextTemplateManagementState {
    constructor(templateDefinitionService) {
        this.templateDefinitionService = templateDefinitionService;
    }
    static getTemplateDefinitions({ templateDefinitions, }) {
        return templateDefinitions;
    }
    fetchTemplateDefinitions({ patchState }, { payload }) {
        return this.templateDefinitionService.getList(payload).pipe(tap(templateDefinitions => patchState({
            templateDefinitions,
        })));
    }
};
TextTemplateManagementState.decorators = [
    { type: Injectable }
];
TextTemplateManagementState.ctorParameters = () => [
    { type: TemplateDefinitionService }
];
__decorate([
    Action(GetTemplateDefinitions)
], TextTemplateManagementState.prototype, "fetchTemplateDefinitions", null);
__decorate([
    Selector()
], TextTemplateManagementState, "getTemplateDefinitions", null);
TextTemplateManagementState = __decorate([
    State({
        name: 'textTemplateManagement',
        defaults: {
            templateDefinitions: { items: [], totalCount: 0 },
        },
    })
], TextTemplateManagementState);

const ɵ0 = "TextTemplateManagement.TextTemplates" /* TextTemplates */;
class TextTemplatesComponent {
    constructor(list, store, router) {
        this.list = list;
        this.store = store;
        this.router = router;
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list
            .hookToQuery((_a) => {
            var { filter: filterText } = _a, query = __rest(_a, ["filter"]);
            return this.store.dispatch(new GetTemplateDefinitions(Object.assign(Object.assign({}, query), { filterText })));
        })
            .subscribe();
    }
    editContents(record) {
        this.router.navigate([
            `/text-template-management/text-templates/contents${record.isInlineLocalized ? '/inline' : ''}/${record.name}`,
        ]);
    }
}
TextTemplatesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-text-templates',
                template: "<ng-container *ngIf=\"pagedData$ | async as pagedData\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">\r\n        {{ 'TextTemplateManagement::Menu:TextTemplates' | abpLocalization }}\r\n      </h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"pagedData.items\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div id=\"data-tables-table-filter\" class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [actionsColumnWidth]=\"170\"\r\n        [data]=\"pagedData.items\"\r\n        [recordsTotal]=\"pagedData.totalCount\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0,
                    },
                ]
            },] }
];
TextTemplatesComponent.ctorParameters = () => [
    { type: ListService },
    { type: Store },
    { type: Router }
];
__decorate([
    Select(TextTemplateManagementState.getTemplateDefinitions)
], TextTemplatesComponent.prototype, "pagedData$", void 0);

const DEFAULT_TEXT_TEMPLATES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'TextTemplateManagement::Name',
        columnWidth: 300,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isInlineLocalized',
        displayName: 'TextTemplateManagement::IsInlineLocalized',
        columnWidth: 150,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isLayout',
        displayName: 'TextTemplateManagement::IsLayout',
        columnWidth: 150,
    },
    {
        type: "string" /* String */,
        name: 'layout',
        displayName: 'TextTemplateManagement::Layout',
        columnWidth: 300,
    },
    {
        type: "string" /* String */,
        name: 'defaultCultureName',
        displayName: 'TextTemplateManagement::DefaultCultureName',
        columnWidth: 150,
    },
]);

const ɵ0$1 = data => {
    const component = data.getInjected(TextTemplatesComponent);
    component.editContents(data.record);
};
const DEFAULT_TEXT_TEMPLATES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'TextTemplateManagement::EditContents',
        action: ɵ0$1,
        permission: 'TextTemplateManagement.TextTemplates.EditContents',
    },
]);

const DEFAULT_TEXT_TEMPLATES_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);

const DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS = {
    ["TextTemplateManagement.TextTemplates" /* TextTemplates */]: DEFAULT_TEXT_TEMPLATES_ENTITY_ACTIONS,
};
const DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS = {
    ["TextTemplateManagement.TextTemplates" /* TextTemplates */]: DEFAULT_TEXT_TEMPLATES_TOOLBAR_ACTIONS,
};
const DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS = {
    ["TextTemplateManagement.TextTemplates" /* TextTemplates */]: DEFAULT_TEXT_TEMPLATES_ENTITY_PROPS,
};
const TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');
const TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');
const TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');

class TextTemplateManagementExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'TextTemplateManagement').pipe(map(entities => ({
            ["TextTemplateManagement.TextTemplates" /* TextTemplates */]: entities.TextDefinition,
        })), mapEntitiesToContributors(configState, 'TextTemplateManagement'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
        }), mapTo(true));
    }
}
TextTemplateManagementExtensionsGuard.decorators = [
    { type: Injectable }
];
TextTemplateManagementExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];

class TextTemplateManagementStateService {
    constructor(store) {
        this.store = store;
    }
    getTemplateDefinitions(params = {}) {
        return this.store.selectSnapshot(TextTemplateManagementState.getTemplateDefinitions);
    }
    dispatchGetTemplateDefinitions(...args) {
        return this.store.dispatch(new GetTemplateDefinitions(...args));
    }
}
TextTemplateManagementStateService.ɵprov = ɵɵdefineInjectable({ factory: function TextTemplateManagementStateService_Factory() { return new TextTemplateManagementStateService(ɵɵinject(Store)); }, token: TextTemplateManagementStateService, providedIn: "root" });
TextTemplateManagementStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
TextTemplateManagementStateService.ctorParameters = () => [
    { type: Store }
];

const ɵ0$2 = {
    requiredPolicy: 'TextTemplateManagement.TextTemplates',
    replaceableComponent: {
        key: "TextTemplateManagement.TextTemplates" /* TextTemplates */,
        defaultComponent: TextTemplatesComponent,
    },
}, ɵ1 = { requiredPolicy: 'TextTemplateManagement.TextTemplates.EditContents' }, ɵ2 = {
    replaceableComponent: {
        key: "TextTemplateManagement.InlineTemplateContent" /* InlineTemplateContent */,
        defaultComponent: InlineTemplateContentComponent,
    },
}, ɵ3 = {
    replaceableComponent: {
        key: "TextTemplateManagement.TemplateContents" /* TemplateContents */,
        defaultComponent: TemplateContentsComponent,
    },
};
const routes = [
    { path: '', redirectTo: 'text-templates', pathMatch: 'full' },
    {
        path: 'text-templates',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, TextTemplateManagementExtensionsGuard],
        children: [
            {
                path: '',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0$2,
            },
            {
                path: 'contents',
                component: RouterOutletComponent,
                canActivate: [PermissionGuard],
                data: ɵ1,
                children: [
                    {
                        path: 'inline/:name',
                        component: InlineTemplateContentComponent,
                        data: ɵ2,
                    },
                    {
                        path: ':name',
                        component: TemplateContentsComponent,
                        data: ɵ3,
                    },
                ],
            },
        ],
    },
];
class TextTemplateManagementRoutingModule {
}
TextTemplateManagementRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

class TextTemplateManagementModule {
    static forChild(options = {}) {
        return {
            ngModule: TextTemplateManagementModule,
            providers: [
                {
                    provide: TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                TextTemplateManagementExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(TextTemplateManagementModule.forChild(options));
    }
}
TextTemplateManagementModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TextTemplatesComponent,
                    TemplateContentsComponent,
                    InlineTemplateContentComponent,
                    AbstractTemplateContentComponent,
                ],
                exports: [
                    TextTemplatesComponent,
                    TemplateContentsComponent,
                    InlineTemplateContentComponent,
                    AbstractTemplateContentComponent,
                ],
                imports: [
                    TextTemplateManagementRoutingModule,
                    NgxsModule.forFeature([TextTemplateManagementState]),
                    NgxValidateCoreModule,
                    CoreModule,
                    CommercialUiModule,
                    ThemeSharedModule,
                    NgbDropdownModule,
                ],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTemplateContentComponent, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS, GetTemplateDefinitions, InlineTemplateContentComponent, TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, TemplateContentService, TemplateContentsComponent, TemplateDefinitionService, TextTemplateManagementExtensionsGuard, TextTemplateManagementModule, TextTemplateManagementState, TextTemplateManagementStateModel, TextTemplateManagementStateService, TextTemplatesComponent, ɵ0, TextTemplatesComponent as ɵa, TextTemplateManagementState as ɵc, TemplateDefinitionService as ɵd, GetTemplateDefinitions as ɵe, TemplateContentsComponent as ɵg, AbstractTemplateContentComponent as ɵh, InlineTemplateContentComponent as ɵi, TextTemplateManagementRoutingModule as ɵj, TextTemplateManagementExtensionsGuard as ɵk, TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS as ɵl, TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS as ɵm, TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS as ɵn };
//# sourceMappingURL=volo-abp.ng.text-template-management.js.map
