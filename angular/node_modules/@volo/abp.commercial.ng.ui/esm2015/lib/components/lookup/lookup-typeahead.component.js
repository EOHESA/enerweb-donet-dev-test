import{PagedAndSortedResultRequestDto}from"@abp/ng.core";import{Component,Injector,Input}from"@angular/core";import{NgControl}from"@angular/forms";import{of}from"rxjs";import{debounceTime,distinctUntilChanged,map,switchMap,tap}from"rxjs/operators";import{AbstractLookupSelectComponent}from"./abstract-lookup-select.component";export class LookupTypeaheadComponent extends AbstractLookupSelectComponent{constructor(t){super(t),this.displayNameProp="name",this.lookupFilterProp="filter",this.filter="",this.createItemToOptionMapper=t=>e=>({[this.lookupNameProp]:e[t],[this.lookupIdProp]:e[this.lookupIdProp]}),this.mapDataToOption=t=>this.createItemToOptionMapper(this.displayNameProp)(t),this.mapResponseToOptions=({items:t})=>t.map(this.createItemToOptionMapper(this.lookupNameProp)),this.search=t=>t?t.pipe(debounceTime(300),distinctUntilChanged(),tap(t=>this.filter=t),switchMap(t=>t?this.getFn(this.pageQuery):of({items:[]})),map(this.mapResponseToOptions)):of([]),this.typeaheadFormatter=t=>t[this.lookupNameProp],this.ngControl=t.get(NgControl),this.ngControl.valueAccessor=this}get model(){return this._model}set model(t){this._model=t;const e=t?t[this.lookupIdProp]:null;e!==this.value&&(this.value=e)}get isInvalid(){return this.ngControl.dirty&&this.ngControl.invalid}createRequestDto(t){return Object.assign(new PagedAndSortedResultRequestDto({maxResultCount:t.maxResultCount,skipCount:t.skipCount,sorting:t.sorting}),{[this.lookupFilterProp]:t.filter})}ngOnChanges({editingData:t}){if(!t)return;const e=t.currentValue;this.model=e?this.mapDataToOption(e):void 0}writeValue(t){t||(this._model=void 0),super.writeValue(t)}}LookupTypeaheadComponent.decorators=[{type:Component,args:[{selector:"abp-lookup-typeahead",template:'<div class="position-relative">\r\n  <input\r\n    #typeahead\r\n    [id]="cid"\r\n    [abpDisabled]="disabled"\r\n    [ngbTypeahead]="search"\r\n    [editable]="false"\r\n    [inputFormatter]="typeaheadFormatter"\r\n    [resultFormatter]="typeaheadFormatter"\r\n    [(ngModel)]="model"\r\n    (blur)="value || (typeahead.value = null)"\r\n    class="form-control"\r\n    [class.input-validation-error]="isInvalid"\r\n  />\r\n</div>\r\n'}]}],LookupTypeaheadComponent.ctorParameters=()=>[{type:Injector}],LookupTypeaheadComponent.propDecorators={displayNameProp:[{type:Input}],lookupFilterProp:[{type:Input}],filter:[{type:Input}],editingData:[{type:Input}]};export function selfFactory(t){return t}