import { AbstractNgModelComponent, PagedAndSortedResultRequestDto, CoreModule, ExtensibleCreationAuditedEntityDto } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import { Component, Input, Injector, EventEmitter, Output, NgModule, InjectionToken } from '@angular/core';
import { NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';
import { NgControl } from '@angular/forms';
import { finalize, debounceTime, distinctUntilChanged, tap, switchMap, map } from 'rxjs/operators';
import { of, BehaviorSubject } from 'rxjs';

class AbstractLookupSelectComponent extends AbstractNgModelComponent {
    constructor() {
        super(...arguments);
        this.lookupNameProp = 'displayName';
        this.lookupIdProp = 'id';
        this.maxResultCount = 10;
        this.skipCount = 0;
        this.disabled = false;
    }
    get pageQuery() {
        return this.createRequestDto(this);
    }
    set pageQuery(value) {
        Object.assign(this, this.createRequestDto(value));
    }
    createRequestDto(value) {
        return new PagedAndSortedResultRequestDto({
            maxResultCount: value.maxResultCount,
            skipCount: value.skipCount,
            sorting: value.sorting,
        });
    }
}
AbstractLookupSelectComponent.decorators = [
    { type: Component, args: [{ template: '' },] }
];
AbstractLookupSelectComponent.propDecorators = {
    getFn: [{ type: Input }],
    lookupNameProp: [{ type: Input }],
    lookupIdProp: [{ type: Input }],
    maxResultCount: [{ type: Input }],
    skipCount: [{ type: Input }],
    sorting: [{ type: Input }],
    disabled: [{ type: Input }],
    cid: [{ type: Input }]
};

class LookupInputComponent extends AbstractNgModelComponent {
    constructor(injector) {
        super(injector);
        this.lookupNameProp = 'displayName';
        this.displayNameProp = 'name';
        this.pickButton = { show: true, disabled: false };
        this.clearButton = { show: true, disabled: false };
        this.selectedName = '';
        this.ngControl = injector.get(NgControl);
        this.ngControl.valueAccessor = this;
    }
    get isInvalid() {
        return this.ngControl.dirty && this.ngControl.invalid;
    }
    ngAfterViewInit() {
        if (this.value && this.editingData && this.editingData[this.displayNameProp]) {
            this.selectedName = this.editingData[this.displayNameProp];
        }
    }
    pick(data) {
        this.value = data.id;
        this.selectedName = data[this.lookupNameProp];
        this.isModalVisible = false;
    }
    onClickPick() {
        this.isModalVisible = true;
    }
    onClickClear() {
        this.value = '';
        this.selectedName = '';
    }
    writeValue(value) {
        if (!value)
            this.selectedName = '';
        super.writeValue(value);
    }
}
LookupInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-lookup-input',
                template: "<div class=\"input-group\">\r\n  <input\r\n    [id]=\"cid\"\r\n    type=\"text\"\r\n    class=\"form-control\"\r\n    disabled\r\n    [ngModel]=\"selectedName\"\r\n    [class.input-validation-error]=\"isInvalid\"\r\n  />\r\n  <div class=\"input-group-append\">\r\n    <button\r\n      *ngIf=\"pickButton.show\"\r\n      [disabled]=\"pickButton.disabled\"\r\n      class=\"btn btn-info\"\r\n      type=\"button\"\r\n      (click)=\"onClickPick()\"\r\n    >\r\n      {{ { key: '::Pick', defaultValue: 'Pick' } | abpLocalization }}\r\n    </button>\r\n    <button\r\n      *ngIf=\"clearButton.show\"\r\n      [disabled]=\"clearButton.disabled\"\r\n      class=\"btn btn-danger\"\r\n      type=\"button\"\r\n      (click)=\"onClickClear()\"\r\n    >\r\n      <i class=\"fa fa-times\"></i>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ { key: '::Pick', defaultValue: 'Pick' } | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <abp-lookup-table\r\n      [getFn]=\"getFn\"\r\n      [lookupNameProp]=\"lookupNameProp\"\r\n      (pick)=\"pick($event)\"\r\n    ></abp-lookup-table>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpUi::Cancel' | abpLocalization }}\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n"
            },] }
];
LookupInputComponent.ctorParameters = () => [
    { type: Injector }
];
LookupInputComponent.propDecorators = {
    getFn: [{ type: Input }],
    lookupNameProp: [{ type: Input }],
    displayNameProp: [{ type: Input }],
    editingData: [{ type: Input }],
    pickButton: [{ type: Input }],
    clearButton: [{ type: Input }],
    cid: [{ type: Input }]
};

class LookupSelectComponent extends AbstractLookupSelectComponent {
    constructor(injector) {
        super(injector);
        this.maxResultCount = 1000;
        this.datas = [];
        this.ngControl = injector.get(NgControl);
        this.ngControl.valueAccessor = this;
    }
    get isInvalid() {
        return this.ngControl.dirty && this.ngControl.invalid;
    }
    ngOnInit() {
        this.get();
    }
    get() {
        this.getFn(this.pageQuery).subscribe(({ items }) => {
            this.datas = items;
        });
    }
}
LookupSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-lookup-select',
                template: "<select\r\n  [id]=\"cid\"\r\n  class=\"custom-select form-control\"\r\n  [(ngModel)]=\"value\"\r\n  [abpDisabled]=\"disabled\"\r\n  [class.input-validation-error]=\"isInvalid\"\r\n>\r\n  <option [ngValue]=\"\"></option>\r\n  <option *ngFor=\"let data of datas\" [ngValue]=\"data[lookupIdProp]\">\r\n    {{ data[lookupNameProp] }}\r\n  </option>\r\n</select>\r\n"
            },] }
];
LookupSelectComponent.ctorParameters = () => [
    { type: Injector }
];
LookupSelectComponent.propDecorators = {
    maxResultCount: [{ type: Input }]
};

class LookupTableComponent {
    constructor() {
        this.lookupNameProp = 'displayName';
        this.pick = new EventEmitter();
        this.data = [];
        this.totalCount = 0;
        this.pageQuery = { maxResultCount: 10, skipCount: 0, filter: '' };
    }
    ngOnInit() {
        this.get();
    }
    get() {
        this.loading = true;
        this.getFn(this.pageQuery)
            .pipe(finalize(() => (this.loading = false)))
            .subscribe(({ totalCount, items }) => {
            this.data = items;
            this.totalCount = totalCount;
        });
    }
    pageChange(page) {
        this.pageQuery.skipCount = this.pageQuery.maxResultCount * (page - 1);
        this.get();
    }
}
LookupTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-lookup-table',
                template: "<div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\r\n      <label\r\n        ><input\r\n          type=\"search\"\r\n          class=\"form-control\"\r\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n          [(ngModel)]=\"pageQuery.filter\"\r\n          (input.debounce)=\"get()\"\r\n      /></label>\r\n    </div>\r\n    <abp-table\r\n      [abpLoading]=\"loading\"\r\n      [abpLoadingDelay]=\"500\"\r\n      [colgroupTemplate]=\"tableColgroup\"\r\n      [bodyTemplate]=\"tableBody\"\r\n      [value]=\"data\"\r\n      [rows]=\"pageQuery.maxResultCount\"\r\n      [totalRecords]=\"totalCount\"\r\n      [scrollable]=\"true\"\r\n      (pageChange)=\"pageChange($event)\"\r\n    >\r\n    </abp-table>\r\n    <ng-template #tableColgroup>\r\n      <colgroup>\r\n        <col [ngStyle]=\"{ 'width.px': 150 }\" />\r\n      </colgroup>\r\n    </ng-template>\r\n    <ng-template #tableBody let-data>\r\n      <tr>\r\n        <td class=\"text-center\">\r\n          <button class=\"btn btn-primary btn-sm\" type=\"button\" (click)=\"pick.emit(data)\">\r\n            {{ '::Pick' | abpLocalization }}\r\n          </button>\r\n        </td>\r\n        <td>{{ data[lookupNameProp] }}</td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n"
            },] }
];
LookupTableComponent.propDecorators = {
    getFn: [{ type: Input }],
    lookupNameProp: [{ type: Input }],
    pick: [{ type: Output }]
};

class LookupTypeaheadComponent extends AbstractLookupSelectComponent {
    constructor(injector) {
        super(injector);
        this.displayNameProp = 'name';
        this.lookupFilterProp = 'filter';
        this.filter = '';
        this.createItemToOptionMapper = (nameProp) => (item) => ({
            [this.lookupNameProp]: item[nameProp],
            [this.lookupIdProp]: item[this.lookupIdProp],
        });
        this.mapDataToOption = (item) => this.createItemToOptionMapper(this.displayNameProp)(item);
        this.mapResponseToOptions = ({ items }) => items.map(this.createItemToOptionMapper(this.lookupNameProp));
        this.search = (text$) => text$
            ? text$.pipe(debounceTime(300), distinctUntilChanged(), tap(text => (this.filter = text)), switchMap(text => (text ? this.getFn(this.pageQuery) : of({ items: [] }))), map(this.mapResponseToOptions))
            : of([]);
        this.typeaheadFormatter = (option) => option[this.lookupNameProp];
        this.ngControl = injector.get(NgControl);
        this.ngControl.valueAccessor = this;
    }
    get model() {
        return this._model;
    }
    set model(selectedOption) {
        this._model = selectedOption;
        const value = selectedOption ? selectedOption[this.lookupIdProp] : null;
        if (value !== this.value)
            this.value = value;
    }
    get isInvalid() {
        return this.ngControl.dirty && this.ngControl.invalid;
    }
    createRequestDto(value) {
        return Object.assign(new PagedAndSortedResultRequestDto({
            maxResultCount: value.maxResultCount,
            skipCount: value.skipCount,
            sorting: value.sorting,
        }), { [this.lookupFilterProp]: value.filter });
    }
    ngOnChanges({ editingData }) {
        if (!editingData)
            return;
        const data = editingData.currentValue;
        this.model = data ? this.mapDataToOption(data) : undefined;
    }
    writeValue(value) {
        if (!value)
            this._model = undefined;
        super.writeValue(value);
    }
}
LookupTypeaheadComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-lookup-typeahead',
                template: "<div class=\"position-relative\">\r\n  <input\r\n    #typeahead\r\n    [id]=\"cid\"\r\n    [abpDisabled]=\"disabled\"\r\n    [ngbTypeahead]=\"search\"\r\n    [editable]=\"false\"\r\n    [inputFormatter]=\"typeaheadFormatter\"\r\n    [resultFormatter]=\"typeaheadFormatter\"\r\n    [(ngModel)]=\"model\"\r\n    (blur)=\"value || (typeahead.value = null)\"\r\n    class=\"form-control\"\r\n    [class.input-validation-error]=\"isInvalid\"\r\n  />\r\n</div>\r\n"
            },] }
];
LookupTypeaheadComponent.ctorParameters = () => [
    { type: Injector }
];
LookupTypeaheadComponent.propDecorators = {
    displayNameProp: [{ type: Input }],
    lookupFilterProp: [{ type: Input }],
    filter: [{ type: Input }],
    editingData: [{ type: Input }]
};
function selfFactory(dependency) {
    return dependency;
}

class BaseCommercialUiModule {
}
BaseCommercialUiModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    AbstractLookupSelectComponent,
                    LookupTableComponent,
                    LookupInputComponent,
                    LookupSelectComponent,
                    LookupTypeaheadComponent,
                    UiExtensionsModule,
                ],
                declarations: [
                    AbstractLookupSelectComponent,
                    LookupTableComponent,
                    LookupInputComponent,
                    LookupSelectComponent,
                    LookupTypeaheadComponent,
                ],
                imports: [CoreModule, ThemeSharedModule, UiExtensionsModule, NgbTypeaheadModule],
            },] }
];
class CommercialUiModule {
}
CommercialUiModule.decorators = [
    { type: NgModule, args: [{
                exports: [BaseCommercialUiModule],
                imports: [BaseCommercialUiModule],
            },] }
];

class IdentitySecurityLogDto extends ExtensibleCreationAuditedEntityDto {
    constructor(initialValues = {}) {
        super(initialValues);
    }
}
class IdentitySecurityLogGetListInput extends PagedAndSortedResultRequestDto {
}

const SHOW_ENTITY_HISTORY = new InjectionToken('SHOW_ENTITY_HISTORY');

const PROFILE_PICTURE = new InjectionToken('PROFILE_PICTURE', {
    providedIn: 'root',
    factory: () => new BehaviorSubject({ type: 'image', source: null }),
});

/**
 * Generated bundle index. Do not edit.
 */

export { BaseCommercialUiModule, CommercialUiModule, IdentitySecurityLogDto, IdentitySecurityLogGetListInput, LookupInputComponent, LookupSelectComponent, LookupTableComponent, PROFILE_PICTURE, SHOW_ENTITY_HISTORY, AbstractLookupSelectComponent as ɵa, LookupTypeaheadComponent as ɵb };
//# sourceMappingURL=volo-abp.commercial.ng.ui.js.map
