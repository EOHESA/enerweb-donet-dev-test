import { PagedAndSortedResultRequestDto } from '@abp/ng.core';
import { Injector, OnChanges, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { AbstractLookupSelectComponent } from './abstract-lookup-select.component';
export declare class LookupTypeaheadComponent<T = any> extends AbstractLookupSelectComponent<T> implements OnChanges {
    displayNameProp: string;
    lookupFilterProp: string;
    filter: string;
    editingData: T;
    private createItemToOptionMapper;
    private mapDataToOption;
    private mapResponseToOptions;
    search: (text$: Observable<string>) => Observable<LookupOption[]>;
    typeaheadFormatter: (option: LookupOption) => string;
    private _model?;
    get model(): LookupOption;
    set model(selectedOption: LookupOption);
    private ngControl;
    get isInvalid(): boolean;
    protected createRequestDto(value: LookupTypeaheadComponent): PagedAndSortedResultRequestDto & {
        [x: string]: string;
    };
    constructor(injector: Injector);
    ngOnChanges({ editingData }: SimpleChanges): void;
    writeValue(value: string): void;
}
declare type LookupOption = Record<string, string>;
export declare function selfFactory(dependency?: any): any;
export {};
