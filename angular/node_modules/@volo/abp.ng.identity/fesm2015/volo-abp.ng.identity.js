import { __rest, __decorate } from 'tslib';
import { RestService, ListService, mapEnumToOptions, generatePassword, ConfigStateService, LocalizationService, getShortDateShortTimeFormat, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { Confirmation, ConfirmationService, getPasswordValidators, ToasterService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, DateAdapter, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.theme.shared/extensions';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, Injector, ViewChild, InjectionToken, Input, EventEmitter, Output, NgModule } from '@angular/core';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { tap, pluck, take, finalize, switchMap, map, mapTo } from 'rxjs/operators';
import { TreeAdapter, TreeModule } from '@abp/ng.components/tree';
import { FormControl, FormBuilder, Validators } from '@angular/forms';
import snq from 'snq';
import { NgbDateAdapter, NgbNavModule, NgbDropdownModule, NgbDatepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { of } from 'rxjs';
import { SHOW_ENTITY_HISTORY, CommercialUiModule } from '@volo/abp.commercial.ng.ui';
import { DatePipe } from '@angular/common';
import { PermissionManagementModule } from '@abp/ng.permission-management';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { RouterModule } from '@angular/router';

class GetRoles {
    constructor(payload = {}) {
        this.payload = payload;
    }
}
GetRoles.type = '[Identity] Get Roles';
class GetRoleById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetRoleById.type = '[Identity] Get Role By Id';
class DeleteRole {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteRole.type = '[Identity] Delete Role';
class CreateRole {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateRole.type = '[Identity] Create Role';
class UpdateRole {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateRole.type = '[Identity] Update Role';
class GetClaimTypes {
    constructor(payload = {}) {
        this.payload = payload;
    }
}
GetClaimTypes.type = '[Identity] Get ClaimTypes';
class GetClaimTypeById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetClaimTypeById.type = '[Identity] Get ClaimType By Id';
class DeleteClaimType {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteClaimType.type = '[Identity] Delete ClaimType';
class CreateClaimType {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateClaimType.type = '[Identity] Create ClaimType';
class UpdateClaimType {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateClaimType.type = '[Identity] Update ClaimType';
class GetUsers {
    constructor(payload = {}) {
        this.payload = payload;
    }
}
GetUsers.type = '[Identity] Get Users';
class GetUserById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetUserById.type = '[Identity] Get User By Id';
class DeleteUser {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteUser.type = '[Identity] Delete User';
class CreateUser {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateUser.type = '[Identity] Create User';
class UpdateUser {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateUser.type = '[Identity] Update User';
class GetUserRoles {
    constructor(payload) {
        this.payload = payload;
    }
}
GetUserRoles.type = '[Identity] Get User Roles';
class UnlockUser {
    constructor(id) {
        this.id = id;
    }
}
UnlockUser.type = '[Identity] Unlock User';
class GetOrganizationUnits {
}
GetOrganizationUnits.type = '[Identity] Get Organization Units';

class IdentityClaimTypeService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity/claim-types`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/claim-types/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/claim-types/${id}`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/claim-types`,
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/claim-types/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityClaimTypeService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityClaimTypeService_Factory() { return new IdentityClaimTypeService(ɵɵinject(RestService)); }, token: IdentityClaimTypeService, providedIn: "root" });
IdentityClaimTypeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityClaimTypeService.ctorParameters = () => [
    { type: RestService }
];

class IdentityRoleService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity/roles`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.getAllClaimTypes = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/all-claim-types`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/all`,
        }, { apiName: this.apiName });
        this.getClaims = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/${id}/claims`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles`,
            params: {
                filter: input.filter,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/roles/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateClaims = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/roles/${id}/claims`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityRoleService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityRoleService_Factory() { return new IdentityRoleService(ɵɵinject(RestService)); }, token: IdentityRoleService, providedIn: "root" });
IdentityRoleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityRoleService.ctorParameters = () => [
    { type: RestService }
];

class IdentityUserService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity/users`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.findByEmail = (email) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/by-email/${email}`,
        }, { apiName: this.apiName });
        this.findByUsername = (username) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/by-username/${username}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.getAllClaimTypes = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/all-claim-types`,
        }, { apiName: this.apiName });
        this.getAssignableRoles = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/assignable-roles`,
        }, { apiName: this.apiName });
        this.getAvailableOrganizationUnits = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/available-organization-units`,
        }, { apiName: this.apiName });
        this.getClaims = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/claims`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users`,
            params: {
                filter: input.filter,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getOrganizationUnits = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/organization-units`,
        }, { apiName: this.apiName });
        this.getRoles = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/roles`,
        }, { apiName: this.apiName });
        this.getTwoFactorEnabled = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/two-factor-enabled`,
        }, { apiName: this.apiName });
        this.lock = (id, lockoutDuration) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/lock/${lockoutDuration}`,
        }, { apiName: this.apiName });
        this.setTwoFactorEnabled = (id, enabled) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/two-factor/${enabled}`,
        }, { apiName: this.apiName });
        this.unlock = (id) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/unlock`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateClaims = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/claims`,
            body: input,
        }, { apiName: this.apiName });
        this.updatePassword = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/change-password`,
            body: input,
        }, { apiName: this.apiName });
        this.updateRoles = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/roles`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityUserService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(ɵɵinject(RestService)); }, token: IdentityUserService, providedIn: "root" });
IdentityUserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityUserService.ctorParameters = () => [
    { type: RestService }
];

class OrganizationUnitService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.addMembers = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/organization-units/${id}/members`,
            body: input,
        }, { apiName: this.apiName });
        this.addRoles = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/organization-units/${id}/roles`,
            body: input,
        }, { apiName: this.apiName });
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity/organization-units`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/organization-units`,
            params: { id },
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units/${id}`,
        }, { apiName: this.apiName });
        this.getAvailableRoles = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units/available-roles`,
            params: {
                filter: input.filter,
                id: input.id,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getAvailableUsers = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units/available-users`,
            params: {
                filter: input.filter,
                id: input.id,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units`,
            params: {
                filter: input.filter,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getListAll = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units/all`,
        }, { apiName: this.apiName });
        this.getMembers = (id, input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units/${id}/members`,
            params: {
                filter: input.filter,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getRoles = (id, input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/organization-units/${id}/roles`,
            params: {
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
                sorting: input.sorting,
            },
        }, { apiName: this.apiName });
        this.move = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/organization-units/${id}/move`,
            body: input,
        }, { apiName: this.apiName });
        this.removeMember = (id, memberId) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/organization-units/${id}/members/${memberId}`,
        }, { apiName: this.apiName });
        this.removeRole = (id, roleId) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/organization-units/${id}/roles/${roleId}`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/organization-units/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
OrganizationUnitService.ɵprov = ɵɵdefineInjectable({ factory: function OrganizationUnitService_Factory() { return new OrganizationUnitService(ɵɵinject(RestService)); }, token: OrganizationUnitService, providedIn: "root" });
OrganizationUnitService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
OrganizationUnitService.ctorParameters = () => [
    { type: RestService }
];

let IdentityState = class IdentityState {
    constructor(roleService, userService, claimTypeService, organizationUnitService) {
        this.roleService = roleService;
        this.userService = userService;
        this.claimTypeService = claimTypeService;
        this.organizationUnitService = organizationUnitService;
    }
    static getRoles({ roles }) {
        return roles.items || [];
    }
    static getRolesTotalCount({ roles }) {
        return roles.totalCount || 0;
    }
    static getUsers({ users }) {
        return users.items || [];
    }
    static getUsersTotalCount({ users }) {
        return users.totalCount || 0;
    }
    static getClaimTypes({ claims }) {
        return claims.items || [];
    }
    static getClaimTypesTotalCount({ claims }) {
        return claims.totalCount || 0;
    }
    getRoles({ patchState }, { payload }) {
        return this.roleService.getList(payload).pipe(tap(roles => patchState({
            roles,
        })));
    }
    deleteRole(_, { payload }) {
        return this.roleService.delete(payload);
    }
    addRole(_, { payload }) {
        return this.roleService.create(payload);
    }
    updateRole(_, _a) {
        var _b = _a.payload, { id } = _b, input = __rest(_b, ["id"]);
        return this.roleService.update(id, input);
    }
    getUsers({ patchState }, { payload }) {
        return this.userService.getList(payload).pipe(tap(users => patchState({
            users,
        })));
    }
    deleteUser(_, { payload }) {
        return this.userService.delete(payload);
    }
    createUser(_, { payload }) {
        return this.userService.create(payload);
    }
    updateUser(_, _a) {
        var _b = _a.payload, { id } = _b, input = __rest(_b, ["id"]);
        return this.userService.update(id, input);
    }
    unlockUser(_, { id }) {
        return this.userService.unlock(id);
    }
    getUserRoles({ patchState }, { payload }) {
        return this.userService.getRoles(payload).pipe(pluck('items'), tap(selectedUserRoles => patchState({
            selectedUserRoles,
        })));
    }
    getClaimTypes({ patchState }, { payload }) {
        return this.claimTypeService.getList(payload).pipe(tap(claims => patchState({
            claims,
        })));
    }
    getClaimType({ patchState }, { payload }) {
        return this.claimTypeService.get(payload).pipe(tap(selectedClaim => patchState({
            selectedClaim,
        })));
    }
    deleteClaimType(_, { payload }) {
        return this.claimTypeService.delete(payload);
    }
    createClaimType(_, { payload }) {
        return this.claimTypeService.create(payload);
    }
    updateClaimType(_, _a) {
        var _b = _a.payload, { id } = _b, input = __rest(_b, ["id"]);
        return this.claimTypeService.update(id, input);
    }
    getOrganizationUnits({ patchState }) {
        return this.organizationUnitService.getListAll().pipe(tap(organizationUnits => patchState({
            organizationUnits,
        })));
    }
};
IdentityState.decorators = [
    { type: Injectable }
];
IdentityState.ctorParameters = () => [
    { type: IdentityRoleService },
    { type: IdentityUserService },
    { type: IdentityClaimTypeService },
    { type: OrganizationUnitService }
];
__decorate([
    Action(GetRoles)
], IdentityState.prototype, "getRoles", null);
__decorate([
    Action(DeleteRole)
], IdentityState.prototype, "deleteRole", null);
__decorate([
    Action(CreateRole)
], IdentityState.prototype, "addRole", null);
__decorate([
    Action(UpdateRole)
], IdentityState.prototype, "updateRole", null);
__decorate([
    Action(GetUsers)
], IdentityState.prototype, "getUsers", null);
__decorate([
    Action(DeleteUser)
], IdentityState.prototype, "deleteUser", null);
__decorate([
    Action(CreateUser)
], IdentityState.prototype, "createUser", null);
__decorate([
    Action(UpdateUser)
], IdentityState.prototype, "updateUser", null);
__decorate([
    Action(UnlockUser)
], IdentityState.prototype, "unlockUser", null);
__decorate([
    Action(GetUserRoles)
], IdentityState.prototype, "getUserRoles", null);
__decorate([
    Action(GetClaimTypes)
], IdentityState.prototype, "getClaimTypes", null);
__decorate([
    Action(GetClaimTypeById)
], IdentityState.prototype, "getClaimType", null);
__decorate([
    Action(DeleteClaimType)
], IdentityState.prototype, "deleteClaimType", null);
__decorate([
    Action(CreateClaimType)
], IdentityState.prototype, "createClaimType", null);
__decorate([
    Action(UpdateClaimType)
], IdentityState.prototype, "updateClaimType", null);
__decorate([
    Action(GetOrganizationUnits)
], IdentityState.prototype, "getOrganizationUnits", null);
__decorate([
    Selector()
], IdentityState, "getRoles", null);
__decorate([
    Selector()
], IdentityState, "getRolesTotalCount", null);
__decorate([
    Selector()
], IdentityState, "getUsers", null);
__decorate([
    Selector()
], IdentityState, "getUsersTotalCount", null);
__decorate([
    Selector()
], IdentityState, "getClaimTypes", null);
__decorate([
    Selector()
], IdentityState, "getClaimTypesTotalCount", null);
IdentityState = __decorate([
    State({
        name: 'IdentityState',
        defaults: {
            roles: {},
            users: {},
            claims: {},
            selectedClaim: {},
            selectedUserRoles: [],
            organizationUnits: {},
        },
    })
], IdentityState);

const ɵ0 = "Identity.ClaimsComponent" /* Claims */;
class ClaimsComponent {
    constructor(list, confirmationService, store, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.store = store;
        this.injector = injector;
        this.modalBusy = false;
        this.trackByFn = (index, item) => Object.keys(item)[0] || index;
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetClaimTypes(query))).subscribe();
    }
    buildForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
    }
    getTypeName(valueType) {
        switch (valueType) {
            case 0:
                return 'String';
            case 1:
                return 'Int';
            case 2:
                return 'Boolean';
            case 3:
                return 'DateTime';
            default:
                return valueType;
        }
    }
    openModal() {
        this.buildForm();
        this.isModalVisible = true;
    }
    onAdd() {
        this.selected = {};
        this.openModal();
    }
    onEdit(id) {
        this.store
            .dispatch(new GetClaimTypeById(id))
            .pipe(pluck('IdentityState'), take(1))
            .subscribe((state) => {
            this.selected = state.selectedClaim;
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(this.selected.id
            ? new UpdateClaimType(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id }))
            : new CreateClaimType(Object.assign({}, this.form.value)))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.list.get();
            this.isModalVisible = false;
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentity::ClaimTypeDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteClaimType(id)).subscribe(() => this.list.get());
            }
        });
    }
}
ClaimsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-claims',
                template: "<ng-container *ngIf=\"data$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'AbpIdentity::ClaimTypes' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"identity-claim-types-wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data\"\r\n        [recordsTotal]=\"totalCount$ | async\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewClaimType') | abpLocalization }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <div class=\"mt-2 fade-in-top\">\r\n        <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"form?.invalid\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0,
                    },
                ]
            },] }
];
ClaimsComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: Store },
    { type: Injector }
];
ClaimsComponent.propDecorators = {
    modalContent: [{ type: ViewChild, args: ['modalContent',] }]
};
__decorate([
    Select(IdentityState.getClaimTypes)
], ClaimsComponent.prototype, "data$", void 0);
__decorate([
    Select(IdentityState.getClaimTypesTotalCount)
], ClaimsComponent.prototype, "totalCount$", void 0);

const ORGANIZATION_UNIT_CONFIG = new InjectionToken('ORGANIZATION_UNIT_CONFIG');
class AbstractOrganizationUnitComponent {
    constructor(injector) {
        this.injector = injector;
        this.currentOrganizationUnits = { items: [] };
        this.checkedUnits = {};
        this.isCheckboxDisabled = (id) => {
            return this.currentOrganizationUnits.items.findIndex((item) => item.id === id) > -1;
        };
        this.list = injector.get(ListService);
        this.list.maxResultCount = 1000;
        this.organizationUnitService = injector.get(OrganizationUnitService);
        this.confirmation = injector.get(ConfirmationService);
        this.config = injector.get(ORGANIZATION_UNIT_CONFIG, {});
    }
    ngOnChanges({ selectedOrganizationUnit }) {
        if (selectedOrganizationUnit === null || selectedOrganizationUnit === void 0 ? void 0 : selectedOrganizationUnit.firstChange) {
            this.hookToQuery();
        }
        else if (selectedOrganizationUnit === null || selectedOrganizationUnit === void 0 ? void 0 : selectedOrganizationUnit.currentValue) {
            this.list.get();
        }
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.organizationUnitService[this.config.getCurrentUnitsMethodName](this.selectedOrganizationUnit.id, query))
            .subscribe((response) => {
            this.currentOrganizationUnits = response;
            this.checkedUnits = {};
            response.items.forEach((item) => {
                this.checkedUnits[item.id] = true;
            });
        });
    }
    addUnits() {
        this.isModalBusy = true;
        this.organizationUnitService[this.config.addUnitsMethodName](this.selectedOrganizationUnit.id, {
            [this.config.addUnitsBodyPropName]: Object.keys(this.checkedUnits),
        })
            .pipe(finalize(() => (this.isModalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(unitId, unitName) {
        this.confirmation
            .warn(this.config.deletionLocalizationKey, 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [unitName, this.selectedOrganizationUnit.displayName],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.organizationUnitService[this.config.deleteMethodName](this.selectedOrganizationUnit.id, unitId).subscribe(() => this.list.get());
            }
        });
    }
    openModal() {
        this.isModalVisible = true;
    }
}
AbstractOrganizationUnitComponent.decorators = [
    { type: Component, args: [{
                template: ''
            },] }
];
AbstractOrganizationUnitComponent.ctorParameters = () => [
    { type: Injector }
];
AbstractOrganizationUnitComponent.propDecorators = {
    selectedOrganizationUnit: [{ type: Input }]
};

const ɵ0$1 = "Identity.OrganizationMembersComponent" /* OrganizationMembers */, ɵ1 = {
    getCurrentUnitsMethodName: 'getMembers',
    addUnitsMethodName: 'addMembers',
    addUnitsBodyPropName: 'userIds',
    deleteMethodName: 'removeMember',
    deletionLocalizationKey: 'AbpIdentity::RemoveUserFromOuWarningMessage',
};
class OrganizationMembersComponent extends AbstractOrganizationUnitComponent {
}
OrganizationMembersComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-organization-members',
                template: "<div class=\"text-right\">\r\n  <button class=\"btn btn-sm btn-primary mb-2\" (click)=\"openModal()\">\r\n    <i class=\"fas fa-plus mr-1\"></i> {{ 'AbpIdentity::AddMember' | abpLocalization }}\r\n  </button>\r\n</div>\r\n\r\n<abp-extensible-table\r\n  [data]=\"currentOrganizationUnits.items\"\r\n  [recordsTotal]=\"currentOrganizationUnits.totalCount\"\r\n  [list]=\"list\"\r\n></abp-extensible-table>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"isModalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'AbpIdentity::SelectUsers' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <abp-organization-members-modal-body\r\n      [checkedUnits]=\"checkedUnits\"\r\n      [isCheckboxDisabled]=\"isCheckboxDisabled\"\r\n    ></abp-organization-members-modal-body>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"addUnits()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$1,
                    },
                    {
                        provide: ORGANIZATION_UNIT_CONFIG,
                        useValue: ɵ1,
                    },
                ]
            },] }
];

const ɵ0$2 = "Identity.OrganizationRolesComponent" /* OrganizationRoles */, ɵ1$1 = {
    getCurrentUnitsMethodName: 'getRoles',
    addUnitsMethodName: 'addRoles',
    addUnitsBodyPropName: 'roleIds',
    deleteMethodName: 'removeRole',
    deletionLocalizationKey: 'AbpIdentity::RemoveRoleFromOuWarningMessage',
};
class OrganizationRolesComponent extends AbstractOrganizationUnitComponent {
}
OrganizationRolesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-organization-roles',
                template: "<div class=\"text-right\">\r\n  <button class=\"btn btn-sm btn-primary mb-2\" (click)=\"openModal()\">\r\n    <i class=\"fas fa-plus mr-1\"></i> {{ 'AbpIdentity::AddRole' | abpLocalization }}\r\n  </button>\r\n</div>\r\n\r\n<abp-extensible-table\r\n  [data]=\"currentOrganizationUnits.items\"\r\n  [recordsTotal]=\"currentOrganizationUnits.totalCount\"\r\n  [list]=\"list\"\r\n></abp-extensible-table>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"isModalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'AbpIdentity::SelectRoles' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <abp-organization-roles-modal-body\r\n      [checkedUnits]=\"checkedUnits\"\r\n      [isCheckboxDisabled]=\"isCheckboxDisabled\"\r\n    ></abp-organization-roles-modal-body>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"addUnits()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$2,
                    },
                    {
                        provide: ORGANIZATION_UNIT_CONFIG,
                        useValue: ɵ1$1,
                    },
                ]
            },] }
];

const ɵ0$3 = "Identity.OrganizationUnitsComponent" /* OrganizationUnits */;
class OrganizationUnitsComponent {
    constructor(injector, store, organizationUnitService, fb, confirmation) {
        this.injector = injector;
        this.store = store;
        this.organizationUnitService = organizationUnitService;
        this.fb = fb;
        this.confirmation = confirmation;
        this.organizationUnits = [];
        this.nodes = [];
        this.expandedKeys = [];
        this.organizationMembersKey = "Identity.OrganizationMembersComponent" /* OrganizationMembers */;
        this.organizationRolesKey = "Identity.OrganizationRolesComponent" /* OrganizationRoles */;
        this.get = () => {
            this.loading = true;
            this.store
                .dispatch(new GetOrganizationUnits())
                .pipe(pluck('IdentityState', 'organizationUnits', 'items'), finalize(() => (this.loading = false)))
                .subscribe((items = []) => {
                this.organizationUnits = items;
                this.treeAdapter = new TreeAdapter(items);
                this.nodes = this.treeAdapter.getTree();
                this.expandedKeys = [...this.expandedKeys];
            });
        };
    }
    ngOnInit() {
        this.get();
    }
    buildForm(selected = {}) {
        const data = new FormPropData(this.injector, selected);
        this.nodeForm = generateFormFromProps(data);
        this.nodeForm.addControl('parentId', new FormControl(undefined));
        this.nodeForm.addControl('id', new FormControl(undefined));
    }
    add() {
        this.buildForm();
        this.isNodeModalVisible = true;
    }
    edit(selected) {
        this.buildForm(selected);
        this.nodeForm.patchValue({
            parentId: '',
            displayName: selected.displayName,
            id: selected.id,
        });
        this.isNodeModalVisible = true;
    }
    addSubUnit({ id }) {
        this.buildForm();
        this.nodeForm.patchValue({ parentId: id, displayName: '', id: undefined });
        this.isNodeModalVisible = true;
        this.expandedKeys = this.expandedKeys.concat(id);
    }
    save() {
        if (this.nodeForm.invalid)
            return;
        const _a = this.nodeForm.value, { id } = _a, form = __rest(_a, ["id"]);
        const request = id
            ? this.organizationUnitService.update(id, {
                displayName: form.displayName,
            })
            : this.organizationUnitService.create(form);
        this.isModalBusy = true;
        request.pipe(finalize(() => (this.isModalBusy = false))).subscribe(() => {
            this.get();
            this.isNodeModalVisible = false;
        });
    }
    delete({ id, displayName }) {
        this.confirmation
            .warn('AbpIdentity::OrganizationUnitDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [displayName],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.organizationUnitService.delete(id).subscribe(() => this.get());
            }
        });
    }
    getParentName(parentId) {
        const parent = this.organizationUnits.find(unit => unit.id === parentId);
        if (!parent)
            return '';
        return parent.displayName;
    }
    onDrop(event) {
        if (!event.node)
            return;
        let parentId = event.node.key;
        if (!event.node.origin.parentId && event.pos === -1) {
            parentId = null;
        }
        this.move(event.dragNode.key, parentId);
    }
    move(id, newParentId) {
        this.organizationUnitService.move(id, { newParentId }).subscribe(this.get);
    }
}
OrganizationUnitsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-organization-units',
                template: "<div class=\"row entry-row\">\r\n  <div class=\"col-auto\">\r\n    <h1 class=\"content-header-title\">{{ 'AbpIdentity::OrganizationUnits' | abpLocalization }}</h1>\r\n  </div>\r\n  <div class=\"col-lg-auto pl-lg-0\">\r\n    <abp-breadcrumb></abp-breadcrumb>\r\n  </div>\r\n  <div class=\"col\">\r\n    <abp-page-toolbar [record]=\"organizationUnits\"></abp-page-toolbar>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div *abpPermission=\"'AbpIdentity.OrganizationUnits.ManageOU'\" class=\"col-12 col-lg-6 col-xl-5\">\r\n    <div class=\"card\">\r\n      <div class=\"card-header d-flex justify-content-between\">\r\n        <h5>\r\n          {{ 'AbpIdentity::OrganizationTree' | abpLocalization }}\r\n        </h5>\r\n        <button class=\"btn btn-sm btn-primary\" (click)=\"add()\">\r\n          <i class=\"fas fa-plus mr-1\"></i> {{ 'AbpIdentity::AddRootUnit' | abpLocalization }}\r\n        </button>\r\n      </div>\r\n      <div class=\"card-body\" [abpLoading]=\"loading\">\r\n        <abp-tree\r\n          [nodes]=\"nodes\"\r\n          [(expandedKeys)]=\"expandedKeys\"\r\n          [(selectedNode)]=\"selectedUnit\"\r\n          [draggable]=\"true\"\r\n          (dropOver)=\"onDrop($event)\"\r\n        >\r\n          <ng-template abpTreeNodeTemplate let-node>\r\n            <i class=\"fas fa-folder fs-15px text-primary mr-1\"></i>\r\n            {{ node.title }}\r\n          </ng-template>\r\n\r\n          <ng-template #menu let-node>\r\n            <li class=\"pointer\" ngbDropdownItem (click)=\"edit(node.origin.entity)\">\r\n              {{ 'AbpIdentity::Edit' | abpLocalization }}\r\n            </li>\r\n            <li class=\"pointer\" ngbDropdownItem (click)=\"addSubUnit(node.origin.entity)\">\r\n              {{ 'AbpIdentity::AddSubUnit' | abpLocalization }}\r\n            </li>\r\n            <li class=\"pointer\" ngbDropdownItem (click)=\"delete(node.origin.entity)\">\r\n              {{ 'AbpIdentity::Delete' | abpLocalization }}\r\n            </li>\r\n          </ng-template>\r\n        </abp-tree>\r\n        <p *ngIf=\"!loading && !nodes?.length\" class=\"text-muted\">\r\n          {{ 'AbpIdentity::NoOrganizationUnits' | abpLocalization }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    *abpPermission=\"\r\n      'AbpIdentity.OrganizationUnits.ManageMembers || AbpIdentity.OrganizationUnits.ManageRoles'\r\n    \"\r\n    class=\"col-12 col-lg-6 col-xl-7\"\r\n  >\r\n    <div class=\"card\">\r\n      <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\r\n        <li ngbNavItem *abpPermission=\"'AbpIdentity.OrganizationUnits.ManageMembers'\">\r\n          <a ngbNavLink>{{ 'AbpIdentity::Members' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngIf=\"selectedUnit; else selectUnitMsg\">\r\n              <abp-organization-members\r\n                *abpReplaceableTemplate=\"{\r\n                  inputs: {\r\n                    selectedOrganizationUnit: { value: selectedUnit }\r\n                  },\r\n                  componentKey: organizationMembersKey\r\n                }\"\r\n                [selectedOrganizationUnit]=\"selectedUnit\"\r\n              ></abp-organization-members>\r\n            </ng-container>\r\n            <ng-template #selectUnitMsg>\r\n              <p class=\"text-muted\">\r\n                {{ 'AbpIdentity::SelectAnOrganizationUnitToSeeMembers' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n        <li ngbNavItem *abpPermission=\"'AbpIdentity.OrganizationUnits.ManageRoles'\">\r\n          <a ngbNavLink>{{ 'AbpIdentity::Roles' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngIf=\"selectedUnit; else selectUnitMsg\">\r\n              <abp-organization-roles\r\n                *abpReplaceableTemplate=\"{\r\n                  inputs: {\r\n                    selectedOrganizationUnit: { value: selectedUnit }\r\n                  },\r\n                  componentKey: organizationRolesKey\r\n                }\"\r\n                [selectedOrganizationUnit]=\"selectedUnit\"\r\n              ></abp-organization-roles>\r\n            </ng-container>\r\n            <ng-template #selectUnitMsg>\r\n              <p class=\"text-muted\">\r\n                {{ 'AbpIdentity::SelectAnOrganizationUnitToSeeRoles' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n      <div [ngbNavOutlet]=\"nav\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isNodeModalVisible\" [busy]=\"isModalBusy\" size=\"md\">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (nodeForm.get('id').value\r\n          ? 'AbpIdentity::EditOrganizationUnit'\r\n          : 'AbpIdentity::NewOrganizationUnit'\r\n        ) | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class=\"mb-3\" *ngIf=\"nodeForm.get('parentId').value as parentId\">\r\n      <strong>{{\r\n        'AbpIdentity::OrganizationUnit:Parent{0}' | abpLocalization: getParentName(parentId)\r\n      }}</strong>\r\n    </div>\r\n    <form [formGroup]=\"nodeForm\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]=\"selectedUnit\"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"nodeForm?.invalid\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$3,
                    },
                ],
                styles: [`
      .fs-15px {
        font-size: 15px;
      }
    `]
            },] }
];
OrganizationUnitsComponent.ctorParameters = () => [
    { type: Injector },
    { type: Store },
    { type: OrganizationUnitService },
    { type: FormBuilder },
    { type: ConfirmationService }
];

const ɵ0$4 = "Identity.RolesComponent" /* Roles */;
class RolesComponent {
    constructor(list, confirmationService, roleService, store, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.roleService = roleService;
        this.store = store;
        this.injector = injector;
        this.visiblePermissions = false;
        this.modalBusy = false;
        this.visibleClaims = false;
        this.claimSubject = {};
        this.onVisiblePermissionChange = (value) => {
            this.visiblePermissions = value;
        };
    }
    createForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetRoles(query))).subscribe();
    }
    ngOnInit() {
        this.hookToQuery();
    }
    openModal() {
        this.createForm();
        this.isModalVisible = true;
    }
    onAdd() {
        this.selected = {};
        this.openModal();
    }
    onEdit(id) {
        this.roleService
            .get(id)
            .pipe(take(1))
            .subscribe(selectedRole => {
            this.selected = selectedRole;
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(this.selected.id
            ? new UpdateRole(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id, concurrencyStamp: this.selected.concurrencyStamp }))
            : new CreateRole(this.form.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.list.get();
            this.isModalVisible = false;
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteRole(id)).subscribe(() => this.list.get());
            }
        });
    }
    onManageClaims(id) {
        this.claimSubject = {
            id,
            type: 'roles',
        };
        this.visibleClaims = true;
    }
    openPermissionsModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
}
RolesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-roles',
                template: "<ng-container *ngIf=\"data$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"identity-roles-wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data\"\r\n        [recordsTotal]=\"totalCount$ | async\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'R' },\r\n      providerKey: { value: providerKey },\r\n      hideBadges: { value: true },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: 'PermissionManagement.PermissionManagementComponent'\r\n  }\"\r\n  [(visible)]=\"visiblePermissions\"\r\n  [providerKey]=\"providerKey\"\r\n  providerName=\"R\"\r\n  [hideBadges]=\"true\"\r\n>\r\n</abp-permission-management>\r\n\r\n<abp-claim-modal [(visible)]=\"visibleClaims\" [subject]=\"claimSubject\"></abp-claim-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$4,
                    },
                ]
            },] }
];
RolesComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: IdentityRoleService },
    { type: Store },
    { type: Injector }
];
RolesComponent.propDecorators = {
    modalContent: [{ type: ViewChild, args: ['modalContent',] }]
};
__decorate([
    Select(IdentityState.getRoles)
], RolesComponent.prototype, "data$", void 0);
__decorate([
    Select(IdentityState.getRolesTotalCount)
], RolesComponent.prototype, "totalCount$", void 0);

var eIdentityTwoFactorBehaviour;
(function (eIdentityTwoFactorBehaviour) {
    eIdentityTwoFactorBehaviour[eIdentityTwoFactorBehaviour["Optional"] = 0] = "Optional";
    eIdentityTwoFactorBehaviour[eIdentityTwoFactorBehaviour["Disabled"] = 1] = "Disabled";
    eIdentityTwoFactorBehaviour[eIdentityTwoFactorBehaviour["Forced"] = 2] = "Forced";
})(eIdentityTwoFactorBehaviour || (eIdentityTwoFactorBehaviour = {}));
const identityTwoFactorBehaviourOptions = mapEnumToOptions(eIdentityTwoFactorBehaviour);

var UserLockDurationType;
(function (UserLockDurationType) {
    UserLockDurationType[UserLockDurationType["Second"] = 1] = "Second";
    UserLockDurationType[UserLockDurationType["Minute"] = 60] = "Minute";
    UserLockDurationType[UserLockDurationType["Hour"] = 3600] = "Hour";
    UserLockDurationType[UserLockDurationType["Day"] = 86400] = "Day";
    UserLockDurationType[UserLockDurationType["Month"] = 2592000] = "Month";
    UserLockDurationType[UserLockDurationType["Year"] = 31536000] = "Year";
})(UserLockDurationType || (UserLockDurationType = {}));
const ɵ0$5 = "Identity.UsersComponent" /* Users */;
class UsersComponent {
    constructor(list, confirmationService, userService, fb, store, toasterService, injector, configState) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.userService = userService;
        this.fb = fb;
        this.store = store;
        this.toasterService = toasterService;
        this.injector = injector;
        this.configState = configState;
        this.setPasswordForm = this.fb.group({
            newPassword: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
        });
        this.visiblePermissions = false;
        this.modalBusy = false;
        this.visibleClaims = false;
        this.claimSubject = {};
        this.organization = {
            response: {},
            nodes: [],
            checkedKeys: [],
            expandedKeys: [],
            selectFn: () => false,
        };
        this.twoFactor = {
            isModalVisible: false,
            checkboxValue: false,
            isOptional: false,
        };
        this.lockForm = this.fb.group({
            lockoutDuration: [0, [Validators.required]],
            lockDurationType: [UserLockDurationType.Second],
        });
        this.lockDurationTypeOptions = mapEnumToOptions(UserLockDurationType);
        this.trackByFn = (index, item) => Object.keys(item)[0] || index;
        this.onVisiblePermissionChange = (value) => {
            this.visiblePermissions = value;
        };
    }
    get roleGroups() {
        return snq(() => this.form.get('roleNames').controls, []);
    }
    ngOnInit() {
        const { key } = identityTwoFactorBehaviourOptions[0];
        this.twoFactor.isOptional =
            this.configState.getFeature('Identity.TwoFactor') === key &&
                this.configState.getSetting('Abp.Identity.TwoFactor.Behaviour') === key;
        this.hookToQuery();
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetUsers(query))).subscribe();
    }
    buildForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
        this.userService.getAssignableRoles().subscribe(({ items }) => {
            this.roles = items;
            this.form.addControl('roleNames', this.fb.array(this.roles.map(role => this.fb.group({
                [role.name]: [
                    this.selected.id
                        ? !!snq(() => this.selectedUserRoles.find(userRole => userRole.id === role.id))
                        : role.isDefault,
                ],
            }))));
        });
        this.userService.getAvailableOrganizationUnits().subscribe(res => {
            this.organization.response = res;
            this.organization.nodes = new TreeAdapter(res.items).getTree();
            this.organization.expandedKeys = res.items.map(item => item.id);
            this.organization.checkedKeys = this.selectedOrganizationUnits.map(unit => unit.id);
        });
    }
    openModal() {
        this.buildForm();
        this.isModalVisible = true;
    }
    onAdd() {
        this.selected = {};
        this.selectedUserRoles = [];
        this.selectedOrganizationUnits = [];
        this.openModal();
    }
    onEdit(id) {
        this.userService
            .get(id)
            .pipe(tap(selectedUser => (this.selected = selectedUser)), switchMap(() => this.store.dispatch(new GetUserRoles(id))), pluck('IdentityState'), tap(state => (this.selectedUserRoles = state.selectedUserRoles || [])), switchMap(() => this.userService.getOrganizationUnits(id)), tap(res => (this.selectedOrganizationUnits = res)), take(1))
            .subscribe(() => this.openModal());
    }
    save() {
        if (!this.form.valid)
            return;
        this.modalBusy = true;
        const { roleNames } = this.form.value;
        const mappedRoleNames = snq(() => roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]), []);
        this.store
            .dispatch(this.selected.id
            ? new UpdateUser(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id, roleNames: mappedRoleNames, organizationUnitIds: this.organization.checkedKeys }))
            : new CreateUser(Object.assign(Object.assign({}, this.form.value), { roleNames: mappedRoleNames, organizationUnitIds: this.organization.checkedKeys })))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.list.get();
            this.isModalVisible = false;
        });
    }
    delete(id, userName) {
        this.confirmationService
            .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [userName],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteUser(id)).subscribe(() => this.list.get());
            }
        });
    }
    onManageClaims(id) {
        this.claimSubject = {
            id,
            type: 'users',
        };
        this.visibleClaims = true;
    }
    unlock(id) {
        this.store.dispatch(new UnlockUser(id)).subscribe(() => {
            this.toasterService.success('AbpIdentity::UserUnlocked');
            this.list.get();
        });
    }
    openPermissionsModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
    setPassword() {
        if (this.setPasswordForm.invalid)
            return;
        this.modalBusy = true;
        this.userService
            .updatePassword(this.selected.id, this.setPasswordForm.value)
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isSetPasswordModalVisible = false;
            this.selected = {};
            this.setPasswordForm.reset();
        });
    }
    generatePassword() {
        this.setPasswordForm.get('newPassword').setValue(generatePassword());
    }
    lock() {
        const { lockoutDuration, lockDurationType } = this.lockForm.value;
        this.modalBusy = true;
        this.userService
            .lock(this.selected.id, lockoutDuration * lockDurationType)
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isLockModalVisible = false;
            this.lockForm.reset({
                lockoutDuration: 0,
                lockDurationType: UserLockDurationType.Second,
            });
            this.list.get();
        });
    }
    setTwoFactor() {
        this.modalBusy = true;
        this.userService
            .setTwoFactorEnabled(this.selected.id, this.twoFactor.checkboxValue)
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => (this.twoFactor.isModalVisible = false));
    }
}
UsersComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-users',
                template: "<ng-container *ngIf=\"data$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'AbpIdentity::Users' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"identity-users-wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data\"\r\n        [recordsTotal]=\"totalCount$ | async\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\" (disappear)=\"form = null\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <ul id=\"user-nav-tabs\" ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\r\n        <li id=\"user-informations\" ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::UserInformations' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent\r\n            ><abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form\r\n          ></ng-template>\r\n        </li>\r\n        <li id=\"user-roles\" ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::Roles' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor=\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\"\r\n              class=\"custom-checkbox custom-control mb-2\"\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                class=\"custom-control-input\"\r\n                [attr.id]=\"'roles-' + i\"\r\n                [formControl]=\"roleGroup.controls[roles[i].name]\"\r\n              />\r\n              <label class=\"custom-control-label\" [attr.for]=\"'roles-' + i\">{{\r\n                roles[i].name\r\n              }}</label>\r\n            </div></ng-template\r\n          >\r\n        </li>\r\n        <li id=\"user-organization-units\" ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::OrganizationUnits' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <abp-tree\r\n              *ngIf=\"organization.nodes?.length; else noDataMessage\"\r\n              [checkStrictly]=\"true\"\r\n              [checkable]=\"true\"\r\n              [nodes]=\"organization.nodes\"\r\n              [isNodeSelected]=\"organization.selectFn\"\r\n              [(checkedKeys)]=\"organization.checkedKeys\"\r\n              [(expandedKeys)]=\"organization.expandedKeys\"\r\n            ></abp-tree>\r\n\r\n            <ng-template #noDataMessage>\r\n              <p class=\"text-muted\">\r\n                {{ 'AbpIdentity::NoOrganizationUnits' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n      <div [ngbNavOutlet]=\"nav\" class=\"mt-2 fade-in-top\"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"form?.invalid\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'U' },\r\n      providerKey: { value: providerKey },\r\n      hideBadges: { value: true },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: 'PermissionManagement.PermissionManagementComponent'\r\n  }\"\r\n  [(visible)]=\"visiblePermissions\"\r\n  [providerKey]=\"providerKey\"\r\n  [hideBadges]=\"true\"\r\n  providerName=\"U\"\r\n>\r\n</abp-permission-management>\r\n\r\n<abp-claim-modal [(visible)]=\"visibleClaims\" [subject]=\"claimSubject\"></abp-claim-modal>\r\n\r\n<abp-modal [(visible)]=\"isSetPasswordModalVisible\" [busy]=\"modalBusy\" size=\"md\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'AbpIdentity::SetPassword' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"setPasswordForm\" (ngSubmit)=\"setPassword()\" validateOnSubmit>\r\n      <div class=\"mt-2 fade-in-top\">\r\n        <div class=\"form-group\">\r\n          <label for=\"new-password\">{{ 'AbpIdentity::Password' | abpLocalization }}</label>\r\n          <div class=\"input-group\">\r\n            <div class=\"col-10 p-0\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"new-password\"\r\n                class=\"form-control\"\r\n                formControlName=\"newPassword\"\r\n                autofocus\r\n              />\r\n            </div>\r\n            <div class=\"input-group-append col-2 p-0\">\r\n              <button\r\n                class=\"btn btn-secondary mh-35\"\r\n                id=\"generate-random-password-button\"\r\n                type=\"button\"\r\n                (click)=\"generatePassword()\"\r\n              >\r\n                <i class=\"fa fa-refresh\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass=\"fa fa-check\"\r\n      (click)=\"setPassword()\"\r\n      [disabled]=\"setPasswordForm?.invalid\"\r\n      >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n    >\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-modal [(visible)]=\"isLockModalVisible\" [busy]=\"modalBusy\" size=\"md\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'AbpIdentity::Lock' | abpLocalization }} - {{ selected.userName }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"lockForm\" (ngSubmit)=\"lock()\" validateOnSubmit>\r\n      <div class=\"mt-2 fade-in-top\">\r\n        <div class=\"form-group\" [formGroup]=\"lockForm\">\r\n          <label>{{ 'AbpIdentity::DisplayName:LockoutDuration' | abpLocalization }}</label>\r\n          <input type=\"number\" class=\"form-control\" formControlName=\"lockoutDuration\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"httpMethod\">{{\r\n            'AbpIdentity::DisplayName:LockDurationType' | abpLocalization\r\n          }}</label\r\n          ><select class=\"custom-select form-control\" formControlName=\"lockDurationType\">\r\n            <option *ngFor=\"let option of lockDurationTypeOptions\" [ngValue]=\"option.value\">\r\n              {{ 'AbpIdentity::Enum:LockDurationType.' + option.key | abpLocalization }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass=\"fa fa-check\"\r\n      (click)=\"lock()\"\r\n      [disabled]=\"lockForm?.invalid || modalBusy\"\r\n      >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n    >\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-modal [(visible)]=\"twoFactor.isModalVisible\" [busy]=\"modalBusy\" size=\"md\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'AbpIdentity::TwoFactor' | abpLocalization }} - {{ selected.userName }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class=\"mt-2 fade-in-top\">\r\n      <div class=\"custom-checkbox custom-control mb-2\">\r\n        <input\r\n          type=\"checkbox\"\r\n          class=\"custom-control-input\"\r\n          id=\"two-factor-enabled\"\r\n          [(ngModel)]=\"twoFactor.checkboxValue\"\r\n        />\r\n        <label class=\"custom-control-label\" for=\"two-factor-enabled\">{{\r\n          'AbpIdentity::DisplayName:TwoFactorEnabled' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"setTwoFactor()\" [disabled]=\"modalBusy\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$5,
                    },
                ],
                styles: [`
      .mh-35 {
        max-height: 35px;
      }
    `]
            },] }
];
UsersComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: IdentityUserService },
    { type: FormBuilder },
    { type: Store },
    { type: ToasterService },
    { type: Injector },
    { type: ConfigStateService }
];
UsersComponent.propDecorators = {
    modalContent: [{ type: ViewChild, args: ['modalContent',] }]
};
__decorate([
    Select(IdentityState.getUsers)
], UsersComponent.prototype, "data$", void 0);
__decorate([
    Select(IdentityState.getUsersTotalCount)
], UsersComponent.prototype, "totalCount$", void 0);

class IdentitySecurityLogService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/security-logs/${id}`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/security-logs`,
            params: {
                startTime: input.startTime,
                endTime: input.endTime,
                applicationName: input.applicationName,
                identity: input.identity,
                action: input.action,
                userName: input.userName,
                clientId: input.clientId,
                correlationId: input.correlationId,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getMy = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/security-logs/my/${id}`,
        }, { apiName: this.apiName });
        this.getMyList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/security-logs/my`,
            params: {
                startTime: input.startTime,
                endTime: input.endTime,
                applicationName: input.applicationName,
                identity: input.identity,
                action: input.action,
                userName: input.userName,
                clientId: input.clientId,
                correlationId: input.correlationId,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
    }
}
IdentitySecurityLogService.ɵprov = ɵɵdefineInjectable({ factory: function IdentitySecurityLogService_Factory() { return new IdentitySecurityLogService(ɵɵinject(RestService)); }, token: IdentitySecurityLogService, providedIn: "root" });
IdentitySecurityLogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentitySecurityLogService.ctorParameters = () => [
    { type: RestService }
];

const ɵ0$6 = "Identity.SecurityLogs" /* SecurityLogs */;
class SecurityLogsComponent {
    constructor(list, service) {
        this.list = list;
        this.service = service;
        this.data = { items: [], totalCount: 0 };
        this.filter = {};
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.service.getList(Object.assign(Object.assign({}, query), this.filter)))
            .subscribe(res => (this.data = res));
    }
}
SecurityLogsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-security-logs',
                template: "<div id=\"wrapper\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'AbpIdentity::SecurityLogs' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n  <div class=\"card\">\r\n    <div class=\"card-body pb-lg-3\">\r\n      <div class=\"row\" (keyup.enter)=\"list.get()\">\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:StartTime' | abpLocalization }}</label>\r\n            <input\r\n              #startDate=\"ngbDatepicker\"\r\n              class=\"form-control\"\r\n              name=\"start-date\"\r\n              readonly\r\n              [(ngModel)]=\"filter.startTime\"\r\n              [dayTemplate]=\"startDateTemplate\"\r\n              ngbDatepicker\r\n              (click)=\"startDate.toggle()\"\r\n            />\r\n            <ng-template\r\n              #startDateTemplate\r\n              let-date\r\n              let-focused=\"focused\"\r\n              let-selected=\"selected\"\r\n              let-currentMonth=\"currentMonth\"\r\n            >\r\n              <div\r\n                class=\"btn-light custom-day\"\r\n                [class.bg-primary]=\"selected\"\r\n                [class.text-white]=\"selected\"\r\n                [class.text-muted]=\"currentMonth !== date.month\"\r\n                [class.ng-range]=\"date.after(filter.startTime) && date.before(filter.endTime)\"\r\n                [class.ng-range-end]=\"date.equals(filter.endTime)\"\r\n              >\r\n                {{ date.day }}\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:EndTime' | abpLocalization }}</label>\r\n            <input\r\n              #endDate=\"ngbDatepicker\"\r\n              class=\"form-control\"\r\n              name=\"end-date\"\r\n              readonly\r\n              [(ngModel)]=\"filter.endTime\"\r\n              [dayTemplate]=\"endDateTemplate\"\r\n              ngbDatepicker\r\n              (click)=\"endDate.toggle()\"\r\n            />\r\n            <ng-template\r\n              #endDateTemplate\r\n              let-date\r\n              let-focused=\"focused\"\r\n              let-selected=\"selected\"\r\n              let-currentMonth=\"currentMonth\"\r\n            >\r\n              <div\r\n                class=\"btn-light custom-day\"\r\n                [class.bg-primary]=\"selected\"\r\n                [class.text-white]=\"selected\"\r\n                [class.text-muted]=\"currentMonth !== date.month\"\r\n                [class.ng-range]=\"date.after(filter.startTime) && date.before(filter.endTime)\"\r\n                [class.ng-range-end]=\"date.equals(filter.startTime)\"\r\n              >\r\n                {{ date.day }}\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:Application' | abpLocalization }}</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filter.applicationName\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:Identity' | abpLocalization }}</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filter.identity\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:UserName' | abpLocalization }}</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filter.userName\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:Action' | abpLocalization }}</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filter.action\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:Client' | abpLocalization }}</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filter.clientId\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <div class=\"form-group\">\r\n            <label>{{ 'AbpIdentity::SecurityLogs:CorrelationId' | abpLocalization }}</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filter.correlationId\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6 col-lg-3\">\r\n          <button (click)=\"list.get()\" class=\"mt-md-2 mb-md-2 btn btn-primary btn-block\">\r\n            <i class=\"fas fa-search\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"card\">\r\n    <div class=\"card-body p-0\">\r\n      <abp-extensible-table\r\n        [data]=\"data.items\"\r\n        [recordsTotal]=\"data.totalCount\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$6,
                    },
                    { provide: NgbDateAdapter, useClass: DateAdapter },
                ]
            },] }
];
SecurityLogsComponent.ctorParameters = () => [
    { type: ListService },
    { type: IdentitySecurityLogService }
];

const ɵ0$7 = data => {
    const component = data.getInjected(ClaimsComponent);
    component.onEdit(data.record.id);
}, ɵ1$2 = data => !data.record.isStatic, ɵ2 = data => {
    const component = data.getInjected(ClaimsComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_CLAIMS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: ɵ0$7,
        permission: 'AbpIdentity.ClaimTypes.Update',
        visible: ɵ1$2,
    },
    {
        text: 'AbpIdentity::Delete',
        action: ɵ2,
        permission: 'AbpIdentity.ClaimTypes.Delete',
    },
]);

const ɵ0$8 = data => of(data.getInjected(ClaimsComponent).getTypeName(data.record.valueType));
const DEFAULT_CLAIMS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::Name',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'valueType',
        displayName: 'AbpIdentity::ValueType',
        sortable: true,
        columnWidth: 200,
        valueResolver: ɵ0$8,
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentity::Description',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'regex',
        displayName: 'AbpIdentity::Regex',
        sortable: true,
        columnWidth: 200,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'required',
        displayName: 'AbpIdentity::Required',
        sortable: true,
        columnWidth: 150,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isStatic',
        displayName: 'AbpIdentity::IsStatic',
        sortable: true,
        columnWidth: 150,
    },
]);

const ɵ0$9 = () => [Validators.required, Validators.maxLength(256)], ɵ1$3 = () => of([
    { key: 'String', value: 0 },
    { key: 'Int', value: 1 },
    { key: 'Boolean', value: 2 },
    { key: 'DateTime', value: 3 },
]);
const DEFAULT_CLAIMS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::Name',
        id: 'name',
        validators: ɵ0$9,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'required',
        displayName: 'AbpIdentity::Required',
        id: 'required',
        defaultValue: false,
    },
    {
        type: "string" /* String */,
        name: 'regex',
        displayName: 'AbpIdentity::Regex',
        id: 'regex',
    },
    {
        type: "string" /* String */,
        name: 'regexDescription',
        displayName: 'AbpIdentity::RegexDescription',
        id: 'regex-description',
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentity::Description',
        id: 'description',
    },
    {
        type: "number" /* Number */,
        name: 'valueType',
        displayName: 'AbpIdentity::ValueType',
        id: 'value-type',
        defaultValue: 0,
        options: ɵ1$3,
    },
]);
const DEFAULT_CLAIMS_EDIT_FORM_PROPS = DEFAULT_CLAIMS_CREATE_FORM_PROPS;

const ɵ0$a = data => {
    const component = data.getInjected(ClaimsComponent);
    component.onAdd();
};
const DEFAULT_CLAIMS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewClaimType',
        action: ɵ0$a,
        permission: 'AbpIdentity.ClaimTypes.Create',
        icon: 'fa fa-plus',
    },
]);

/* tslint:disable:max-line-length */
const ɵ0$b = data => {
    const component = data.getInjected(OrganizationMembersComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_ORGANIZATION_MEMBERS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Delete',
        action: ɵ0$b,
        permission: 'AbpIdentity.OrganizationUnits.ManageMembers',
    },
]);

const ɵ0$c = data => {
    const { email, emailConfirmed } = data.record;
    return of((email || '') + (emailConfirmed ? `<i class="fa fa-check text-success ml-1"></i>` : ''));
};
const DEFAULT_ORGANIZATION_MEMBERS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        sortable: true,
        columnWidth: 180,
    },
    {
        type: "string" /* String */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        sortable: true,
        columnWidth: 200,
        valueResolver: ɵ0$c,
    },
]);

/* tslint:disable:max-line-length */
const ɵ0$d = data => {
    const component = data.getInjected(OrganizationRolesComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_ORGANIZATION_ROLES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Delete',
        action: ɵ0$d,
        permission: 'AbpIdentity.OrganizationUnits.ManageRoles',
    },
]);

const DEFAULT_ORGANIZATION_ROLES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        sortable: true,
    },
]);

const ɵ0$e = () => [Validators.required, Validators.maxLength(256)];
const DEFAULT_ORGANIZATION_UNITS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentity::DisplayName',
        id: 'organization-unit-display-name',
        validators: ɵ0$e,
    },
]);
const DEFAULT_ORGANIZATION_UNITS_EDIT_FORM_PROPS = DEFAULT_ORGANIZATION_UNITS_CREATE_FORM_PROPS;

const DEFAULT_ORGANIZATION_UNITS_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);

const ɵ0$f = data => {
    const component = data.getInjected(RolesComponent);
    component.onEdit(data.record.id);
}, ɵ1$4 = data => {
    const component = data.getInjected(RolesComponent);
    component.onManageClaims(data.record.id);
}, ɵ2$1 = data => {
    const component = data.getInjected(RolesComponent);
    component.openPermissionsModal(data.record.name);
}, ɵ3 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Abp.Identity.IdentityRole');
}, ɵ4 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ5 = data => {
    const component = data.getInjected(RolesComponent);
    component.delete(data.record.id, data.record.name);
}, ɵ6 = data => !data.record.isStatic;
const DEFAULT_ROLES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: ɵ0$f,
        permission: 'AbpIdentity.Roles.Update',
    },
    {
        text: 'AbpIdentity::Claims',
        action: ɵ1$4,
        permission: 'AbpIdentity.Roles.Update',
    },
    {
        text: 'AbpIdentity::Permissions',
        action: ɵ2$1,
        permission: 'AbpIdentity.Roles.ManagePermissions',
    },
    {
        text: 'AbpIdentity::ChangeHistory',
        action: ɵ3,
        permission: 'AbpIdentity.Roles.ViewChangeHistory',
        visible: ɵ4,
    },
    {
        text: 'AbpIdentity::Delete',
        action: ɵ5,
        permission: 'AbpIdentity.Roles.Delete',
        visible: ɵ6,
    },
]);

const ɵ0$g = data => {
    const l10n = data.getInjected(LocalizationService);
    const t = l10n.instant.bind(l10n);
    const { isDefault, isPublic, name } = data.record;
    return of(name +
        (isDefault
            ? `<span class="badge badge-pill badge-success ml-1">${t('AbpIdentity::DisplayName:IsDefault')}</span>`
            : '') +
        (isPublic
            ? `<span class="badge badge-pill badge-info ml-1">${t('AbpIdentity::DisplayName:IsPublic')}</span>`
            : ''));
};
const DEFAULT_ROLES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        sortable: true,
        valueResolver: ɵ0$g,
    },
]);

const ɵ0$h = (data) => data.record && data.record.isStatic, ɵ1$5 = () => [Validators.required];
const DEFAULT_ROLES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        id: 'role-name',
        disabled: ɵ0$h,
        validators: ɵ1$5,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isDefault',
        displayName: 'AbpIdentity::DisplayName:IsDefault',
        id: 'role-is-default',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isPublic',
        displayName: 'AbpIdentity::DisplayName:IsPublic',
        id: 'role-is-public',
        defaultValue: false,
    },
]);
const DEFAULT_ROLES_EDIT_FORM_PROPS = DEFAULT_ROLES_CREATE_FORM_PROPS;

const ɵ0$i = data => {
    const component = data.getInjected(RolesComponent);
    component.onAdd();
};
const DEFAULT_ROLES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewRole',
        action: ɵ0$i,
        permission: 'AbpIdentity.Roles.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_SECURITY_LOGS_ENTITY_ACTIONS = EntityAction.createMany([]);

const ɵ0$j = data => {
    const config = data.getInjected(ConfigStateService);
    const datePipe = data.getInjected(DatePipe);
    return of(datePipe.transform(data.record.creationTime, getShortDateShortTimeFormat(config)));
}, ɵ1$6 = data => {
    return of(`<div style="max-width: 160px" class="pointer abp-ellipsis-inline">${data.record.action ||
        ''}</div>`);
}, ɵ2$2 = data => {
    const component = data.getInjected(SecurityLogsComponent);
    component.filter.action = data.record.action;
    component.list.get();
}, ɵ3$1 = data => {
    return of(`<div style="max-width: 180px" class="abp-ellipsis-inline">${data.record.clientIpAddress ||
        ''}</div>`);
}, ɵ4$1 = data => {
    return of(`<div style="max-width: 180px" class="abp-ellipsis-inline">${data.record.browserInfo ||
        ''}</div>`);
}, ɵ5$1 = data => {
    return of(`<div style="max-width: 135px" class="pointer abp-ellipsis-inline">${data.record
        .applicationName || ''}</div>`);
}, ɵ6$1 = data => {
    const component = data.getInjected(SecurityLogsComponent);
    component.filter.applicationName = data.record.applicationName;
    component.list.get();
}, ɵ7 = data => {
    return of(`<div style="max-width: 135px" class="pointer abp-ellipsis-inline">${data.record.identity ||
        ''}</div>`);
}, ɵ8 = data => {
    const component = data.getInjected(SecurityLogsComponent);
    component.filter.identity = data.record.identity;
    component.list.get();
}, ɵ9 = data => {
    return of(`<div style="max-width: 135px" class="pointer abp-ellipsis-inline">${data.record.userName ||
        ''}</div>`);
}, ɵ10 = data => {
    const component = data.getInjected(SecurityLogsComponent);
    component.filter.userName = data.record.userName;
    component.list.get();
}, ɵ11 = data => {
    return of(`<div class="pointer">${data.record.clientId || ''}</div>`);
}, ɵ12 = data => {
    const component = data.getInjected(SecurityLogsComponent);
    component.filter.clientId = data.record.clientId;
    component.list.get();
}, ɵ13 = data => {
    return of(`<div class="pointer">${data.record.correlationId || ''}</div>`);
}, ɵ14 = data => {
    const component = data.getInjected(SecurityLogsComponent);
    component.filter.correlationId = data.record.correlationId;
    component.list.get();
};
const DEFAULT_SECURITY_LOGS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'creationTime',
        displayName: 'AbpIdentity::SecurityLogs:Time',
        sortable: true,
        columnWidth: 180,
        valueResolver: ɵ0$j,
    },
    {
        type: "string" /* String */,
        name: 'action',
        displayName: 'AbpIdentity::SecurityLogs:Action',
        sortable: true,
        columnWidth: 180,
        valueResolver: ɵ1$6,
        action: ɵ2$2,
    },
    {
        type: "string" /* String */,
        name: 'clientIpAddress',
        displayName: 'AbpIdentity::SecurityLogs:IpAddress',
        sortable: false,
        columnWidth: 200,
        valueResolver: ɵ3$1,
    },
    {
        type: "string" /* String */,
        name: 'browserInfo',
        displayName: 'AbpIdentity::SecurityLogs:Browser',
        sortable: false,
        columnWidth: 200,
        valueResolver: ɵ4$1,
    },
    {
        type: "string" /* String */,
        name: 'applicationName',
        displayName: 'AbpIdentity::SecurityLogs:Application',
        sortable: true,
        columnWidth: 150,
        valueResolver: ɵ5$1,
        action: ɵ6$1,
    },
    {
        type: "string" /* String */,
        name: 'identity',
        displayName: 'AbpIdentity::SecurityLogs:Identity',
        sortable: true,
        columnWidth: 150,
        valueResolver: ɵ7,
        action: ɵ8,
    },
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::SecurityLogs:UserName',
        sortable: true,
        columnWidth: 150,
        valueResolver: ɵ9,
        action: ɵ10,
    },
    {
        type: "string" /* String */,
        name: 'clientId',
        displayName: 'AbpIdentity::SecurityLogs:Client',
        sortable: true,
        columnWidth: 320,
        valueResolver: ɵ11,
        action: ɵ12,
    },
    {
        type: "string" /* String */,
        name: 'correlationId',
        displayName: 'AbpIdentity::SecurityLogs:CorrelationId',
        sortable: true,
        columnWidth: 320,
        valueResolver: ɵ13,
        action: ɵ14,
    },
]);

const DEFAULT_SECURITY_LOGS_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);

const ɵ0$k = data => {
    const component = data.getInjected(UsersComponent);
    component.onEdit(data.record.id);
}, ɵ1$7 = data => {
    const component = data.getInjected(UsersComponent);
    component.onManageClaims(data.record.id);
}, ɵ2$3 = data => {
    const component = data.getInjected(UsersComponent);
    component.selected = data.record;
    component.isLockModalVisible = true;
}, ɵ3$2 = data => !data.record.isLockedOut && data.record.lockoutEnabled, ɵ4$2 = data => {
    const component = data.getInjected(UsersComponent);
    component.unlock(data.record.id);
}, ɵ5$2 = data => data.record.isLockedOut, ɵ6$2 = data => {
    const component = data.getInjected(UsersComponent);
    component.openPermissionsModal(data.record.id);
}, ɵ7$1 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Abp.Identity.IdentityUser');
}, ɵ8$1 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ9$1 = data => {
    const component = data.getInjected(UsersComponent);
    component.selected = data.record;
    component.isSetPasswordModalVisible = true;
}, ɵ10$1 = data => {
    const component = data.getInjected(UsersComponent);
    component.selected = data.record;
    component.userService.getTwoFactorEnabled(data.record.id).subscribe(res => {
        component.twoFactor.checkboxValue = res;
        component.twoFactor.isModalVisible = true;
    });
}, ɵ11$1 = data => data.getInjected(UsersComponent).twoFactor.isOptional, ɵ12$1 = data => {
    const component = data.getInjected(UsersComponent);
    component.delete(data.record.id, data.record.name || data.record.userName);
};
const DEFAULT_USERS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: ɵ0$k,
        permission: 'AbpIdentity.Users.Update',
    },
    {
        text: 'AbpIdentity::Claims',
        action: ɵ1$7,
        permission: 'AbpIdentity.Users.Update',
    },
    {
        text: 'AbpIdentity::Lock',
        action: ɵ2$3,
        permission: 'AbpIdentity.Users.Update',
        visible: ɵ3$2,
    },
    {
        text: 'AbpIdentity::Unlock',
        action: ɵ4$2,
        permission: 'AbpIdentity.Users.Update',
        visible: ɵ5$2,
    },
    {
        text: 'AbpIdentity::Permissions',
        action: ɵ6$2,
        permission: 'AbpIdentity.Users.ManagePermissions',
    },
    {
        text: 'AbpIdentity::ChangeHistory',
        action: ɵ7$1,
        permission: 'AbpIdentity.Users.ViewChangeHistory',
        visible: ɵ8$1,
    },
    {
        text: 'AbpIdentity::SetPassword',
        action: ɵ9$1,
        permission: 'AbpIdentity.Users.Update',
    },
    {
        text: 'AbpIdentity::TwoFactor',
        action: ɵ10$1,
        permission: 'AbpIdentity.Users.Update',
        visible: ɵ11$1,
    },
    {
        text: 'AbpIdentity::Delete',
        action: ɵ12$1,
        permission: 'AbpIdentity.Users.Delete',
    },
]);

const ɵ0$l = data => {
    const l10n = data.getInjected(LocalizationService);
    const t = l10n.instant.bind(l10n);
    return of(data.record.isLockedOut
        ? `<i title="${t('AbpIdentity::ThisUserIsLockedOutMessage')}" class="fa fa-lock text-danger mr-1"></i><span class="opc-65">${data.record.userName}</span>`
        : data.record.userName);
}, ɵ1$8 = data => {
    const { email, emailConfirmed } = data.record;
    return of((email || '') + (emailConfirmed ? `<i class="fa fa-check text-success ml-1"></i>` : ''));
}, ɵ2$4 = data => {
    const { phoneNumber, phoneNumberConfirmed } = data.record;
    return of((phoneNumber || '') +
        (phoneNumberConfirmed ? `<i class="fa fa-check text-success ml-1"></i>` : ''));
};
const DEFAULT_USERS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        sortable: true,
        columnWidth: 250,
        valueResolver: ɵ0$l,
    },
    {
        type: "string" /* String */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        sortable: true,
        columnWidth: 250,
        valueResolver: ɵ1$8,
    },
    {
        type: "string" /* String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        sortable: true,
        columnWidth: 250,
        valueResolver: ɵ2$4,
    },
]);

const ɵ0$m = () => [Validators.required, Validators.maxLength(256)], ɵ1$9 = data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })], ɵ2$5 = () => [Validators.maxLength(64)], ɵ3$3 = () => [Validators.maxLength(64)], ɵ4$3 = () => [Validators.required, Validators.maxLength(256), Validators.email], ɵ5$3 = () => [Validators.maxLength(16)];
const DEFAULT_USERS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        id: 'user-name',
        validators: ɵ0$m,
    },
    {
        type: "password" /* Password */,
        name: 'password',
        displayName: 'AbpIdentity::Password',
        id: 'password',
        autocomplete: 'new-password',
        validators: ɵ1$9,
    },
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::DisplayName:Name',
        id: 'name',
        validators: ɵ2$5,
    },
    {
        type: "string" /* String */,
        name: 'surname',
        displayName: 'AbpIdentity::DisplayName:Surname',
        id: 'surname',
        validators: ɵ3$3,
    },
    {
        type: "email" /* Email */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        id: 'email',
        validators: ɵ4$3,
    },
    {
        type: "string" /* String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        id: 'phone-number',
        validators: ɵ5$3,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'lockoutEnabled',
        displayName: 'AbpIdentity::DisplayName:LockoutEnabled',
        id: 'lockout-checkbox',
        defaultValue: true,
    },
]);
const ɵ6$3 = prop => prop.name !== 'password';
const DEFAULT_USERS_EDIT_FORM_PROPS = DEFAULT_USERS_CREATE_FORM_PROPS.filter(ɵ6$3);

const ɵ0$n = data => {
    const component = data.getInjected(UsersComponent);
    component.onAdd();
};
const DEFAULT_USERS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewUser',
        action: ɵ0$n,
        permission: 'AbpIdentity.Users.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_IDENTITY_ENTITY_ACTIONS = {
    ["Identity.ClaimsComponent" /* Claims */]: DEFAULT_CLAIMS_ENTITY_ACTIONS,
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_ENTITY_ACTIONS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_ENTITY_ACTIONS,
    ["Identity.OrganizationMembersComponent" /* OrganizationMembers */]: DEFAULT_ORGANIZATION_MEMBERS_ENTITY_ACTIONS,
    ["Identity.OrganizationRolesComponent" /* OrganizationRoles */]: DEFAULT_ORGANIZATION_ROLES_ENTITY_ACTIONS,
    ["Identity.SecurityLogs" /* SecurityLogs */]: DEFAULT_SECURITY_LOGS_ENTITY_ACTIONS,
};
const DEFAULT_IDENTITY_TOOLBAR_ACTIONS = {
    ["Identity.ClaimsComponent" /* Claims */]: DEFAULT_CLAIMS_TOOLBAR_ACTIONS,
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_TOOLBAR_ACTIONS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_TOOLBAR_ACTIONS,
    ["Identity.OrganizationUnitsComponent" /* OrganizationUnits */]: DEFAULT_ORGANIZATION_UNITS_TOOLBAR_ACTIONS,
    ["Identity.SecurityLogs" /* SecurityLogs */]: DEFAULT_SECURITY_LOGS_TOOLBAR_ACTIONS,
};
const DEFAULT_IDENTITY_ENTITY_PROPS = {
    ["Identity.ClaimsComponent" /* Claims */]: DEFAULT_CLAIMS_ENTITY_PROPS,
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_ENTITY_PROPS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_ENTITY_PROPS,
    ["Identity.OrganizationMembersComponent" /* OrganizationMembers */]: DEFAULT_ORGANIZATION_MEMBERS_ENTITY_PROPS,
    ["Identity.OrganizationRolesComponent" /* OrganizationRoles */]: DEFAULT_ORGANIZATION_ROLES_ENTITY_PROPS,
    ["Identity.SecurityLogs" /* SecurityLogs */]: DEFAULT_SECURITY_LOGS_ENTITY_PROPS,
};
const DEFAULT_IDENTITY_CREATE_FORM_PROPS = {
    ["Identity.ClaimsComponent" /* Claims */]: DEFAULT_CLAIMS_CREATE_FORM_PROPS,
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_CREATE_FORM_PROPS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_CREATE_FORM_PROPS,
    ["Identity.OrganizationUnitsComponent" /* OrganizationUnits */]: DEFAULT_ORGANIZATION_UNITS_CREATE_FORM_PROPS,
};
const DEFAULT_IDENTITY_EDIT_FORM_PROPS = {
    ["Identity.ClaimsComponent" /* Claims */]: DEFAULT_CLAIMS_EDIT_FORM_PROPS,
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_EDIT_FORM_PROPS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_EDIT_FORM_PROPS,
    ["Identity.OrganizationUnitsComponent" /* OrganizationUnits */]: DEFAULT_ORGANIZATION_UNITS_EDIT_FORM_PROPS,
};
const IDENTITY_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_ACTION_CONTRIBUTORS');
const IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS');
const IDENTITY_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_PROP_CONTRIBUTORS');
const IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS');
const IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS');

class IdentityExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(IDENTITY_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(IDENTITY_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(map(entities => ({
            ["Identity.ClaimsComponent" /* Claims */]: entities.ClaimType,
            ["Identity.RolesComponent" /* Roles */]: entities.Role,
            ["Identity.UsersComponent" /* Users */]: entities.User,
            ["Identity.OrganizationUnitsComponent" /* OrganizationUnits */]: entities.OrganizationUnit,
        })), mapEntitiesToContributors(configState, 'AbpIdentity'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_IDENTITY_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_IDENTITY_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_IDENTITY_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_IDENTITY_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
IdentityExtensionsGuard.decorators = [
    { type: Injectable }
];
IdentityExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];

class ClaimModalComponent {
    constructor(roleService, userService, store) {
        this.roleService = roleService;
        this.userService = userService;
        this.store = store;
        this.visibleChange = new EventEmitter();
        this.modalBusy = false;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (this._visible === value)
            return;
        this._visible = value;
        this.visibleChange.emit(value);
    }
    ngOnChanges({ visible, subject }) {
        if (subject && subject.currentValue) {
            this.service = subject.currentValue.type === 'roles' ? this.roleService : this.userService;
        }
        if (!visible)
            return;
        if (visible.currentValue)
            this.initModal();
        else {
            this.newClaimType = null;
            this.newClaimValue = null;
            this.subjectClaims = null;
        }
    }
    ngOnInit() { }
    initModal() {
        this.getClaimTypeNames();
        this.getSubjectClaims(this.subject);
    }
    getClaimTypeNames() {
        this.service.getAllClaimTypes().subscribe(claimTypes => (this.claimTypes = claimTypes));
    }
    getSubjectClaims(subject) {
        this.service.getClaims(subject.id)
            .pipe(take(1))
            .subscribe(claims => (this.subjectClaims = claims));
    }
    addClaim() {
        if (!this.newClaimType || !this.newClaimValue)
            return;
        let claim = {
            claimType: this.newClaimType,
            claimValue: this.newClaimValue,
        };
        const key = this.subject.type === 'roles' ? 'roleId' : 'userId';
        claim = Object.assign({ [key]: this.subject.id }, claim);
        this.subjectClaims.push(claim);
        this.newClaimType = '';
        this.newClaimValue = '';
    }
    removeClaim(index) {
        if (!this.subjectClaims[index])
            return;
        this.subjectClaims = this.subjectClaims.filter((_, i) => i !== index);
    }
    save() {
        if (this.modalBusy)
            return;
        this.modalBusy = true;
        this.service
            .updateClaims(this.subject.id, this.subjectClaims)
            .pipe(take(1), finalize(() => (this.modalBusy = false)))
            .subscribe(() => (this.visible = false));
    }
}
ClaimModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-claim-modal',
                template: "<abp-modal size=\"md\" [(visible)]=\"visible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h5 class=\"modal-title\">{{ 'AbpIdentity::Claims' | abpLocalization }}</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)=\"addClaim()\">\r\n      <div class=\"form-row\">\r\n        <div class=\"col col-sm-6\">\r\n          <div class=\"form-group\">\r\n            <label for=\"claimTypeSelect\">{{ 'AbpIdentity::Type' | abpLocalization }}</label\r\n            ><select\r\n              autofocus\r\n              id=\"claimTypeSelect\"\r\n              class=\"custom-select form-control\"\r\n              [(ngModel)]=\"newClaimType\"\r\n              [ngModelOptions]=\"{ standalone: true }\"\r\n            >\r\n              <option *ngFor=\"let type of claimTypes\" [ngValue]=\"type.name\">{{ type.name }}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col col-sm-6\">\r\n          <div class=\"form-group\">\r\n            <label for=\"newClaimValue\">Value</label>\r\n            <input\r\n              required\r\n              id=\"newClaimValue\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              [(ngModel)]=\"newClaimValue\"\r\n              [ngModelOptions]=\"{ standalone: true }\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col col-sm-12 align-self-center\">\r\n          <button class=\"btn btn-success btn-block\" type=\"button\" (click)=\"addClaim()\">\r\n            <i class=\"fa fa-plus\"></i>\r\n            {{ 'AbpIdentity::AddClaim' | abpLocalization }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <hr class=\"my-4\" />\r\n    <div class=\"willBeHidden\" *ngIf=\"subjectClaims && subjectClaims.length\">\r\n      <div class=\"input-group mb-3\" *ngFor=\"let claim of subjectClaims; let i = index\">\r\n        <div class=\"input-group-prepend\">\r\n          <label class=\"input-group-text mw-100 fs-9\">{{ claim.claimType }}</label>\r\n        </div>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"subjectClaims[i].claimValue\" required />\r\n        <div class=\"input-group-append\">\r\n          <button class=\"btn btn-danger deleteClaim\" (click)=\"removeClaim(i)\"><i class=\"fa fa-trash\"></i></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>{{ 'AbpIdentity::Cancel' | abpLocalization }}</button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\">{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n"
            },] }
];
ClaimModalComponent.ctorParameters = () => [
    { type: IdentityRoleService },
    { type: IdentityUserService },
    { type: Store }
];
ClaimModalComponent.propDecorators = {
    subject: [{ type: Input }],
    visible: [{ type: Input }],
    visibleChange: [{ type: Output }]
};

class OrganizationMembersModalBodyComponent {
    constructor(list, userService) {
        this.list = list;
        this.userService = userService;
        this.allUnits = { items: [] };
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.userService.getList(query))
            .subscribe(response => {
            this.allUnits = response;
        });
    }
}
OrganizationMembersModalBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-organization-members-modal-body',
                template: `
    <div id="data-tables-table-filter" class="data-tables-filter">
      <div class="input-group">
        <input
          type="search"
          class="form-control"
          [placeholder]="'AbpUi::PagerSearch' | abpLocalization"
          [(ngModel)]="list.filter"
        />
        <div class="input-group-append">
          <button class="btn btn-sm btn-primary" (click)="list.get()">
            <i class="fas fa-search"></i>
          </button>
        </div>
      </div>
    </div>

    <div class="card">
      <abp-extensible-table
        actionsText=""
        [data]="allUnits.items"
        [recordsTotal]="allUnits.totalCount"
        [actionsColumnWidth]="38"
        [actionsTemplate]="customAction"
        [list]="list"
      ></abp-extensible-table>
    </div>

    <ng-template #customAction let-row>
      <input
        type="checkbox"
        [(ngModel)]="checkedUnits[row.id]"
        [disabled]="isCheckboxDisabled(row.id)"
      />
    </ng-template>
  `,
                providers: [ListService]
            },] }
];
OrganizationMembersModalBodyComponent.ctorParameters = () => [
    { type: ListService },
    { type: IdentityUserService }
];
OrganizationMembersModalBodyComponent.propDecorators = {
    checkedUnits: [{ type: Input }],
    isCheckboxDisabled: [{ type: Input }]
};

class OrganizationRolesModalBodyComponent {
    constructor(list, roleService) {
        this.list = list;
        this.roleService = roleService;
        this.allUnits = { items: [] };
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.roleService.getList(query))
            .subscribe(response => {
            this.allUnits = response;
        });
    }
}
OrganizationRolesModalBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-organization-roles-modal-body',
                template: `
    <div class="card">
      <abp-extensible-table
        actionsText=""
        [data]="allUnits.items"
        [recordsTotal]="allUnits.totalCount"
        [actionsColumnWidth]="38"
        [actionsTemplate]="customAction"
        [list]="list"
      ></abp-extensible-table>
    </div>

    <ng-template #customAction let-row>
      <input
        type="checkbox"
        [(ngModel)]="checkedUnits[row.id]"
        [disabled]="isCheckboxDisabled(row.id)"
      />
    </ng-template>
  `,
                providers: [ListService]
            },] }
];
OrganizationRolesModalBodyComponent.ctorParameters = () => [
    { type: ListService },
    { type: IdentityRoleService }
];
OrganizationRolesModalBodyComponent.propDecorators = {
    checkedUnits: [{ type: Input }],
    isCheckboxDisabled: [{ type: Input }]
};

const ɵ0$o = {
    requiredPolicy: 'AbpIdentity.Roles',
    replaceableComponent: {
        key: "Identity.RolesComponent" /* Roles */,
        defaultComponent: RolesComponent,
    },
}, ɵ1$a = {
    requiredPolicy: 'AbpIdentity.Users',
    replaceableComponent: {
        key: "Identity.UsersComponent" /* Users */,
        defaultComponent: UsersComponent,
    },
}, ɵ2$6 = {
    requiredPolicy: 'AbpIdentity.ClaimTypes',
    replaceableComponent: {
        key: "Identity.ClaimsComponent" /* Claims */,
        defaultComponent: ClaimsComponent,
    },
}, ɵ3$4 = {
    requiredPolicy: 'AbpIdentity.OrganizationUnits',
    replaceableComponent: {
        key: "Identity.OrganizationUnitsComponent" /* OrganizationUnits */,
        defaultComponent: OrganizationUnitsComponent,
    },
}, ɵ4$4 = {
    requiredPolicy: 'AbpIdentity.SecurityLogs',
    replaceableComponent: {
        key: "Identity.SecurityLogs" /* SecurityLogs */,
        defaultComponent: SecurityLogsComponent,
    },
};
const routes = [
    { path: '', redirectTo: 'roles', pathMatch: 'full' },
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, IdentityExtensionsGuard],
        children: [
            {
                path: 'roles',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0$o,
            },
            {
                path: 'users',
                component: ReplaceableRouteContainerComponent,
                data: ɵ1$a,
            },
            {
                path: 'claim-types',
                component: ReplaceableRouteContainerComponent,
                data: ɵ2$6,
            },
            {
                path: 'organization-units',
                component: ReplaceableRouteContainerComponent,
                data: ɵ3$4,
            },
            {
                path: 'security-logs',
                component: ReplaceableRouteContainerComponent,
                data: ɵ4$4,
            },
        ],
    },
];
class IdentityRoutingModule {
}
IdentityRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

/* tslint:disable:max-line-length */
class IdentityModule {
    static forChild(options = {}) {
        return {
            ngModule: IdentityModule,
            providers: [
                {
                    provide: IDENTITY_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: IDENTITY_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                IdentityExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(IdentityModule.forChild(options));
    }
}
IdentityModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    RolesComponent,
                    UsersComponent,
                    ClaimModalComponent,
                    ClaimsComponent,
                    OrganizationUnitsComponent,
                    OrganizationMembersComponent,
                    OrganizationMembersModalBodyComponent,
                    OrganizationRolesComponent,
                    OrganizationRolesModalBodyComponent,
                    AbstractOrganizationUnitComponent,
                    SecurityLogsComponent,
                ],
                exports: [
                    RolesComponent,
                    UsersComponent,
                    ClaimModalComponent,
                    ClaimsComponent,
                    OrganizationUnitsComponent,
                    OrganizationMembersComponent,
                    OrganizationMembersModalBodyComponent,
                    OrganizationRolesComponent,
                    OrganizationRolesModalBodyComponent,
                    AbstractOrganizationUnitComponent,
                    SecurityLogsComponent,
                ],
                imports: [
                    NgxsModule.forFeature([IdentityState]),
                    CoreModule,
                    CommercialUiModule,
                    IdentityRoutingModule,
                    NgbNavModule,
                    ThemeSharedModule,
                    NgbDropdownModule,
                    NgbDatepickerModule,
                    PermissionManagementModule,
                    NgxValidateCoreModule,
                    TreeModule,
                ],
                entryComponents: [],
            },] }
];

class IdentityStateService {
    constructor(store) {
        this.store = store;
    }
    getRoles() {
        return this.store.selectSnapshot(IdentityState.getRoles);
    }
    getRolesTotalCount() {
        return this.store.selectSnapshot(IdentityState.getRolesTotalCount);
    }
    getUsers() {
        return this.store.selectSnapshot(IdentityState.getUsers);
    }
    getUsersTotalCount() {
        return this.store.selectSnapshot(IdentityState.getUsersTotalCount);
    }
    getClaimTypes() {
        return this.store.selectSnapshot(IdentityState.getClaimTypes);
    }
    getClaimTypesTotalCount() {
        return this.store.selectSnapshot(IdentityState.getClaimTypesTotalCount);
    }
    dispatchGetRoles(...args) {
        return this.store.dispatch(new GetRoles(...args));
    }
    dispatchGetRoleById(...args) {
        return this.store.dispatch(new GetRoleById(...args));
    }
    dispatchDeleteRole(...args) {
        return this.store.dispatch(new DeleteRole(...args));
    }
    dispatchCreateRole(...args) {
        return this.store.dispatch(new CreateRole(...args));
    }
    dispatchUpdateRole(...args) {
        return this.store.dispatch(new UpdateRole(...args));
    }
    dispatchGetClaimTypes(...args) {
        return this.store.dispatch(new GetClaimTypes(...args));
    }
    dispatchGetClaimTypeById(...args) {
        return this.store.dispatch(new GetClaimTypeById(...args));
    }
    dispatchDeleteClaimType(...args) {
        return this.store.dispatch(new DeleteClaimType(...args));
    }
    dispatchCreateClaimType(...args) {
        return this.store.dispatch(new CreateClaimType(...args));
    }
    dispatchUpdateClaimType(...args) {
        return this.store.dispatch(new UpdateClaimType(...args));
    }
    dispatchGetUsers(...args) {
        return this.store.dispatch(new GetUsers(...args));
    }
    dispatchGetUserById(...args) {
        return this.store.dispatch(new GetUserById(...args));
    }
    dispatchDeleteUser(...args) {
        return this.store.dispatch(new DeleteUser(...args));
    }
    dispatchCreateUser(...args) {
        return this.store.dispatch(new CreateUser(...args));
    }
    dispatchUpdateUser(...args) {
        return this.store.dispatch(new UpdateUser(...args));
    }
    dispatchGetUserRoles(...args) {
        return this.store.dispatch(new GetUserRoles(...args));
    }
}
IdentityStateService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityStateService_Factory() { return new IdentityStateService(ɵɵinject(Store)); }, token: IdentityStateService, providedIn: "root" });
IdentityStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityStateService.ctorParameters = () => [
    { type: Store }
];

var IdentityClaimValueType;
(function (IdentityClaimValueType) {
    IdentityClaimValueType[IdentityClaimValueType["String"] = 0] = "String";
    IdentityClaimValueType[IdentityClaimValueType["Int"] = 1] = "Int";
    IdentityClaimValueType[IdentityClaimValueType["Boolean"] = 2] = "Boolean";
    IdentityClaimValueType[IdentityClaimValueType["DateTime"] = 3] = "DateTime";
})(IdentityClaimValueType || (IdentityClaimValueType = {}));
const identityClaimValueTypeOptions = mapEnumToOptions(IdentityClaimValueType);

class IdentitySettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.get = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/settings`,
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/settings`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentitySettingsService.ɵprov = ɵɵdefineInjectable({ factory: function IdentitySettingsService_Factory() { return new IdentitySettingsService(ɵɵinject(RestService)); }, token: IdentitySettingsService, providedIn: "root" });
IdentitySettingsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentitySettingsService.ctorParameters = () => [
    { type: RestService }
];

class IdentityUserLookupService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.findById = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/${id}`,
        }, { apiName: this.apiName });
        this.findByUserName = (userName) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/by-username/${userName}`,
        }, { apiName: this.apiName });
        this.getCount = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/count`,
            params: { filter: input.filter },
        }, { apiName: this.apiName });
        this.search = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/search`,
            params: {
                sorting: input.sorting,
                filter: input.filter,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
    }
}
IdentityUserLookupService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityUserLookupService_Factory() { return new IdentityUserLookupService(ɵɵinject(RestService)); }, token: IdentityUserLookupService, providedIn: "root" });
IdentityUserLookupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityUserLookupService.ctorParameters = () => [
    { type: RestService }
];

class ProfileService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.changePassword = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity/my-profile/change-password`,
            body: input,
        }, { apiName: this.apiName });
        this.get = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/my-profile`,
        }, { apiName: this.apiName });
        this.getTwoFactorEnabled = () => this.restService.request({
            method: 'GET',
            url: `/api/identity/my-profile/two-factor-enabled`,
        }, { apiName: this.apiName });
        this.setTwoFactorEnabled = (enabled) => this.restService.request({
            method: 'POST',
            url: `/api/identity/my-profile/set-two-factor-enabled`,
            params: { enabled },
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/my-profile`,
            body: input,
        }, { apiName: this.apiName });
    }
}
ProfileService.ɵprov = ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(ɵɵinject(RestService)); }, token: ProfileService, providedIn: "root" });
ProfileService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProfileService.ctorParameters = () => [
    { type: RestService }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractOrganizationUnitComponent, ClaimsComponent, CreateClaimType, CreateRole, CreateUser, DEFAULT_IDENTITY_CREATE_FORM_PROPS, DEFAULT_IDENTITY_EDIT_FORM_PROPS, DEFAULT_IDENTITY_ENTITY_ACTIONS, DEFAULT_IDENTITY_ENTITY_PROPS, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, DeleteClaimType, DeleteRole, DeleteUser, GetClaimTypeById, GetClaimTypes, GetOrganizationUnits, GetRoleById, GetRoles, GetUserById, GetUserRoles, GetUsers, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, IDENTITY_ENTITY_ACTION_CONTRIBUTORS, IDENTITY_ENTITY_PROP_CONTRIBUTORS, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, IdentityClaimTypeService, IdentityClaimValueType, IdentityExtensionsGuard, IdentityModule, IdentityRoleService, IdentitySecurityLogService, IdentitySettingsService, IdentityState, IdentityStateService, IdentityUserLookupService, IdentityUserService, ORGANIZATION_UNIT_CONFIG, OrganizationMembersComponent, OrganizationRolesComponent, OrganizationUnitService, OrganizationUnitsComponent, ProfileService, RolesComponent, SecurityLogsComponent, UnlockUser, UpdateClaimType, UpdateRole, UpdateUser, UsersComponent, eIdentityTwoFactorBehaviour, identityClaimValueTypeOptions, identityTwoFactorBehaviourOptions, ɵ0, ɵ1, RolesComponent as ɵa, UsersComponent as ɵbd, ClaimModalComponent as ɵbe, ClaimsComponent as ɵbf, OrganizationUnitsComponent as ɵbg, OrganizationMembersComponent as ɵbh, ORGANIZATION_UNIT_CONFIG as ɵbi, AbstractOrganizationUnitComponent as ɵbj, OrganizationMembersModalBodyComponent as ɵbk, OrganizationRolesComponent as ɵbl, OrganizationRolesModalBodyComponent as ɵbm, SecurityLogsComponent as ɵbn, IdentitySecurityLogService as ɵbo, IdentityRoutingModule as ɵbp, IdentityExtensionsGuard as ɵbq, IDENTITY_ENTITY_ACTION_CONTRIBUTORS as ɵbr, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS as ɵbs, IDENTITY_ENTITY_PROP_CONTRIBUTORS as ɵbt, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS as ɵbu, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS as ɵbv, IdentityState as ɵc, IdentityRoleService as ɵd, IdentityUserService as ɵe, IdentityClaimTypeService as ɵf, OrganizationUnitService as ɵg, GetRoles as ɵh, DeleteRole as ɵi, CreateRole as ɵj, UpdateRole as ɵk, GetClaimTypes as ɵl, GetClaimTypeById as ɵm, DeleteClaimType as ɵn, CreateClaimType as ɵo, UpdateClaimType as ɵp, GetUsers as ɵq, DeleteUser as ɵr, CreateUser as ɵs, UpdateUser as ɵt, GetUserRoles as ɵu, UnlockUser as ɵv, GetOrganizationUnits as ɵw };
//# sourceMappingURL=volo-abp.ng.identity.js.map
