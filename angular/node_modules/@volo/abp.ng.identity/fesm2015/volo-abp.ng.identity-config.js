import { RestService, SubscriptionService, ConfigStateService, ApplicationConfigurationService, RoutesService, SettingTabsService, CoreModule } from '@abp/ng.core';
import { ToasterService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, APP_INITIALIZER, NgModule } from '@angular/core';
import { Validators, FormBuilder } from '@angular/forms';
import { Store } from '@ngxs/store';
import { filter, finalize } from 'rxjs/operators';
import snq from 'snq';

class IdentityConfigService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
    }
    getSettings() {
        return this.restService.request({
            method: 'GET',
            url: '/api/identity/settings',
        }, { apiName: this.apiName });
    }
    updateSettings(body) {
        return this.restService.request({
            method: 'PUT',
            url: `/api/identity/settings`,
            body,
        }, { apiName: this.apiName });
    }
}
IdentityConfigService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityConfigService_Factory() { return new IdentityConfigService(ɵɵinject(RestService)); }, token: IdentityConfigService, providedIn: "root" });
IdentityConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityConfigService.ctorParameters = () => [
    { type: RestService }
];

const { required, max, min } = Validators;
class IdentitySettingsComponent {
    constructor(identityConfigService, toaster, fb, store, subscription, configState, appConfigService) {
        this.identityConfigService = identityConfigService;
        this.toaster = toaster;
        this.fb = fb;
        this.store = store;
        this.subscription = subscription;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.settings = {};
        this.doNotRequireConfirmedPhoneNumber = () => {
            this.form.get('signIn.requireConfirmedPhoneNumber').setValue(false);
        };
        this.enablePhoneNumberConfirmation = () => {
            this.form.get('signIn.enablePhoneNumberConfirmation').setValue(true);
        };
        identityConfigService.getSettings().subscribe(settings => {
            this.settings = settings;
            this.buildForm();
            this.syncConfirmationOptions();
        });
    }
    get initialized() {
        return JSON.stringify(this.settings) !== '{}';
    }
    buildForm() {
        const passwordSettings = snq(() => this.settings.password, {});
        const password = this.fb.group({
            requiredLength: [passwordSettings.requiredLength, [required, max(32), min(2)]],
            requiredUniqueChars: [passwordSettings.requiredUniqueChars, [required, max(32), min(1)]],
            requireNonAlphanumeric: passwordSettings.requireNonAlphanumeric,
            requireLowercase: passwordSettings.requireLowercase,
            requireUppercase: passwordSettings.requireUppercase,
            requireDigit: passwordSettings.requireDigit,
        });
        const lockoutSettings = snq(() => this.settings.lockout, {});
        const lockout = this.fb.group({
            allowedForNewUsers: lockoutSettings.allowedForNewUsers,
            lockoutDuration: [lockoutSettings.lockoutDuration, [required]],
            maxFailedAccessAttempts: [lockoutSettings.maxFailedAccessAttempts, [required]],
        });
        const signInSettings = snq(() => this.settings.signIn, {});
        const signIn = this.fb.group({
            requireConfirmedEmail: signInSettings.requireConfirmedEmail,
            enablePhoneNumberConfirmation: signInSettings.enablePhoneNumberConfirmation,
            requireConfirmedPhoneNumber: signInSettings.requireConfirmedPhoneNumber,
        });
        const userSettings = snq(() => this.settings.user, {});
        const user = this.fb.group({
            isUserNameUpdateEnabled: userSettings.isUserNameUpdateEnabled,
            isEmailUpdateEnabled: userSettings.isEmailUpdateEnabled,
        });
        this.form = this.fb.group({
            password,
            lockout,
            signIn,
            user,
        });
    }
    syncConfirmationOptions() {
        this.subscription.addOne(this.form.get('signIn.requireConfirmedPhoneNumber').valueChanges.pipe(filter(Boolean)), this.enablePhoneNumberConfirmation);
        this.subscription.addOne(this.form
            .get('signIn.enablePhoneNumberConfirmation')
            .valueChanges.pipe(filter(value => !value)), this.doNotRequireConfirmedPhoneNumber);
    }
    submit() {
        this.loading = true;
        this.identityConfigService
            .updateSettings(this.form.value)
            .pipe(finalize(() => {
            this.loading = false;
            this.appConfigService.getConfiguration().subscribe(res => this.configState.setState(res));
        }))
            .subscribe(() => this.toaster.success('AbpIdentity::SavedSuccessfully', null));
    }
}
IdentitySettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-settings',
                template: "<h2>{{ 'AbpIdentity::Menu:IdentityManagement' | abpLocalization }}</h2>\r\n<hr class=\"my-4\" />\r\n<form\r\n  *ngIf=\"form\"\r\n  id=\"IdentitySettingsForm\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit()\"\r\n  validateOnSubmit\r\n>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n      <div formGroupName=\"password\">\r\n        <h4>{{ 'AbpIdentity::PasswordSettings' | abpLocalization }}</h4>\r\n        <div class=\"form-group\">\r\n          <label for=\"Password_RequiredLength\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Password.RequiredLength' | abpLocalization\r\n          }}</label\r\n          ><input\r\n            type=\"number\"\r\n            id=\"Password_RequiredLength\"\r\n            name=\"Password.RequiredLength\"\r\n            class=\"form-control\"\r\n            formControlName=\"requiredLength\"\r\n            min=\"2\"\r\n            max=\"32\"\r\n          />\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Password.RequiredLength' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"Password_RequiredUniqueChars\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Password.RequiredUniqueChars' | abpLocalization\r\n          }}</label\r\n          ><input\r\n            type=\"number\"\r\n            id=\"Password_RequiredUniqueChars\"\r\n            name=\"Password.RequiredUniqueChars\"\r\n            class=\"form-control\"\r\n            formControlName=\"requiredUniqueChars\"\r\n            min=\"0\"\r\n            max=\"32\"\r\n          />\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Password.RequiredUniqueChars' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"Password_RequireNonAlphanumeric\"\r\n            name=\"Password.RequireNonAlphanumeric\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"requireNonAlphanumeric\"\r\n          /><label class=\"custom-control-label\" for=\"Password_RequireNonAlphanumeric\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Password.RequireNonAlphanumeric'\r\n              | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Password.RequireNonAlphanumeric'\r\n              | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"Password_RequireLowercase\"\r\n            name=\"Password.RequireLowercase\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"requireLowercase\"\r\n          /><label class=\"custom-control-label\" for=\"Password_RequireLowercase\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Password.RequireLowercase' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Password.RequireLowercase' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"Password_RequireUppercase\"\r\n            name=\"Password.RequireUppercase\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"requireUppercase\"\r\n          /><label class=\"custom-control-label\" for=\"Password_RequireUppercase\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Password.RequireUppercase' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Password.RequireUppercase' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"Password_RequireDigit\"\r\n            name=\"Password.RequireDigit\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"requireDigit\"\r\n          /><label class=\"custom-control-label\" for=\"Password_RequireDigit\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Password.RequireDigit' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Password.RequireDigit' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n      </div>\r\n      <hr class=\"my-4\" />\r\n      <div formGroupName=\"lockout\">\r\n        <h4>{{ 'AbpIdentity::LockoutSettings' | abpLocalization }}</h4>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"Lockout_AllowedForNewUsers\"\r\n            name=\"Lockout.AllowedForNewUsers\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"allowedForNewUsers\"\r\n          /><label class=\"custom-control-label\" for=\"Lockout_AllowedForNewUsers\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Lockout.AllowedForNewUsers' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Lockout.AllowedForNewUsers' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"Lockout_LockoutDuration\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Lockout.LockoutDuration' | abpLocalization\r\n          }}</label\r\n          ><input\r\n            type=\"number\"\r\n            id=\"Lockout_LockoutDuration\"\r\n            name=\"Lockout.LockoutDuration\"\r\n            class=\"form-control\"\r\n            formControlName=\"lockoutDuration\"\r\n          />\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Lockout.LockoutDuration' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"Lockout_MaxFailedAccessAttempts\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.Lockout.MaxFailedAccessAttempts'\r\n              | abpLocalization\r\n          }}</label\r\n          ><input\r\n            type=\"number\"\r\n            id=\"Lockout_MaxFailedAccessAttempts\"\r\n            name=\"Lockout.MaxFailedAccessAttempts\"\r\n            class=\"form-control\"\r\n            formControlName=\"maxFailedAccessAttempts\"\r\n          />\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.Lockout.MaxFailedAccessAttempts'\r\n              | abpLocalization\r\n          }}</small>\r\n        </div>\r\n      </div>\r\n      <hr class=\"my-4\" />\r\n      <div formGroupName=\"signIn\">\r\n        <h4>{{ 'AbpIdentity::SignInSettings' | abpLocalization }}</h4>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"SignIn_RequireConfirmedEmail\"\r\n            name=\"SignIn.RequireConfirmedEmail\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"requireConfirmedEmail\"\r\n          /><label class=\"custom-control-label\" for=\"SignIn_RequireConfirmedEmail\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.SignIn.RequireConfirmedEmail' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.SignIn.RequireConfirmedEmail' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"SignIn_EnablePhoneNumberConfirmation\"\r\n            name=\"SignIn.EnablePhoneNumberConfirmation\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"enablePhoneNumberConfirmation\"\r\n          /><label class=\"custom-control-label\" for=\"SignIn_EnablePhoneNumberConfirmation\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.SignIn.EnablePhoneNumberConfirmation'\r\n              | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.SignIn.EnablePhoneNumberConfirmation'\r\n              | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"SignIn_RequireConfirmedPhoneNumber\"\r\n            name=\"SignIn.RequireConfirmedPhoneNumber\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"requireConfirmedPhoneNumber\"\r\n          /><label class=\"custom-control-label\" for=\"SignIn_RequireConfirmedPhoneNumber\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.SignIn.RequireConfirmedPhoneNumber'\r\n              | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.SignIn.RequireConfirmedPhoneNumber'\r\n              | abpLocalization\r\n          }}</small>\r\n        </div>\r\n      </div>\r\n      <hr class=\"my-4\" />\r\n      <div formGroupName=\"user\">\r\n        <h4>{{ 'AbpIdentity::UserSettings' | abpLocalization }}</h4>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"User_IsEmailUpdateEnabled\"\r\n            name=\"User.IsEmailUpdateEnabled\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"isEmailUpdateEnabled\"\r\n          /><label class=\"custom-control-label\" for=\"User_IsEmailUpdateEnabled\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.User.IsEmailUpdateEnabled' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.User.IsEmailUpdateEnabled' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"User_IsUserNameUpdateEnabled\"\r\n            name=\"User.IsUserNameUpdateEnabled\"\r\n            class=\"custom-control-input \"\r\n            formControlName=\"isUserNameUpdateEnabled\"\r\n          /><label class=\"custom-control-label\" for=\"User_IsUserNameUpdateEnabled\">{{\r\n            'AbpIdentity::DisplayName:Abp.Identity.User.IsUserNameUpdateEnabled' | abpLocalization\r\n          }}</label>\r\n          <small class=\"form-text text-muted\">{{\r\n            'AbpIdentity::Description:Abp.Identity.User.IsUserNameUpdateEnabled' | abpLocalization\r\n          }}</small>\r\n        </div>\r\n      </div>\r\n      <hr class=\"my-4\" />\r\n      <div>\r\n        <abp-button\r\n          iconClass=\"fa fa-save\"\r\n          [loading]=\"loading\"\r\n          buttonType=\"submit\"\r\n          [disabled]=\"form?.invalid\"\r\n        >\r\n          {{ 'AbpIdentity::Save' | abpLocalization }}\r\n        </abp-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n",
                providers: [SubscriptionService]
            },] }
];
IdentitySettingsComponent.ctorParameters = () => [
    { type: IdentityConfigService },
    { type: ToasterService },
    { type: FormBuilder },
    { type: Store },
    { type: SubscriptionService },
    { type: ConfigStateService },
    { type: ApplicationConfigurationService }
];

const IDENTITY_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
];
function configureRoutes(routes) {
    return () => {
        routes.add([
            {
                path: '/identity',
                name: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                order: 2,
                layout: "application" /* application */,
                iconClass: 'fa fa-id-card-o',
                requiredPolicy: "AbpIdentity.Roles || AbpIdentity.Users || AbpIdentity.ClaimTypes || AbpIdentity.OrganizationUnits" /* IdentityManagement */,
            },
            {
                path: '/identity/organization-units',
                name: "AbpIdentity::OrganizationUnits" /* OrganizationUnits */,
                parentName: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                order: 1,
                requiredPolicy: "AbpIdentity.OrganizationUnits" /* OrganizationUnits */,
            },
            {
                path: '/identity/roles',
                name: "AbpIdentity::Roles" /* Roles */,
                parentName: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                order: 2,
                requiredPolicy: "AbpIdentity.Roles" /* Roles */,
            },
            {
                path: '/identity/users',
                name: "AbpIdentity::Users" /* Users */,
                parentName: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                order: 3,
                requiredPolicy: "AbpIdentity.Users" /* Users */,
            },
            {
                path: '/identity/claim-types',
                name: "AbpIdentity::ClaimTypes" /* ClaimTypes */,
                parentName: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                order: 4,
                requiredPolicy: "AbpIdentity.ClaimTypes" /* ClaimTypes */,
            },
            {
                path: '/identity/security-logs',
                name: "AbpIdentity::SecurityLogs" /* SecurityLogs */,
                parentName: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                order: 4,
                requiredPolicy: "AbpIdentity.SecurityLogs" /* SecurityLogs */,
            },
        ]);
    };
}

const IDENTITY_SETTING_TAB_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureSettingTabs,
        deps: [SettingTabsService],
        multi: true,
    },
];
function configureSettingTabs(settingtabs) {
    return () => {
        settingtabs.add([
            {
                name: "AbpIdentity::Menu:IdentityManagement" /* IdentityManagement */,
                order: 1,
                requiredPolicy: 'AbpIdentity.SettingManagement',
                component: IdentitySettingsComponent,
            },
        ]);
    };
}

class IdentityConfigModule {
    static forRoot() {
        return {
            ngModule: IdentityConfigModule,
            providers: [IDENTITY_ROUTE_PROVIDERS, IDENTITY_SETTING_TAB_PROVIDERS],
        };
    }
}
IdentityConfigModule.decorators = [
    { type: NgModule, args: [{
                exports: [IdentitySettingsComponent],
                entryComponents: [IdentitySettingsComponent],
                declarations: [IdentitySettingsComponent],
                imports: [CoreModule, ThemeSharedModule],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { IDENTITY_ROUTE_PROVIDERS, IDENTITY_SETTING_TAB_PROVIDERS, IdentityConfigModule, IdentityConfigService, IdentitySettingsComponent, configureRoutes, configureSettingTabs, IdentitySettingsComponent as ɵa, IdentityConfigService as ɵb, IDENTITY_ROUTE_PROVIDERS as ɵc, configureRoutes as ɵd, IDENTITY_SETTING_TAB_PROVIDERS as ɵe, configureSettingTabs as ɵf };
//# sourceMappingURL=volo-abp.ng.identity-config.js.map
