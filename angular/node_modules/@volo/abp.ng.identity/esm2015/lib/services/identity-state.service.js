import{Injectable}from"@angular/core";import{Store}from"@ngxs/store";import{IdentityState}from"../states/identity.state";import{GetRoles,GetRoleById,DeleteRole,UpdateRole,GetClaimTypes,GetClaimTypeById,DeleteClaimType,CreateClaimType,GetUsers,GetUserById,DeleteUser,CreateRole,CreateUser,UpdateUser,GetUserRoles,UpdateClaimType}from"../actions/identity.actions";import*as i0 from"@angular/core";import*as i1 from"@ngxs/store";export class IdentityStateService{constructor(e){this.store=e}getRoles(){return this.store.selectSnapshot(IdentityState.getRoles)}getRolesTotalCount(){return this.store.selectSnapshot(IdentityState.getRolesTotalCount)}getUsers(){return this.store.selectSnapshot(IdentityState.getUsers)}getUsersTotalCount(){return this.store.selectSnapshot(IdentityState.getUsersTotalCount)}getClaimTypes(){return this.store.selectSnapshot(IdentityState.getClaimTypes)}getClaimTypesTotalCount(){return this.store.selectSnapshot(IdentityState.getClaimTypesTotalCount)}dispatchGetRoles(...e){return this.store.dispatch(new GetRoles(...e))}dispatchGetRoleById(...e){return this.store.dispatch(new GetRoleById(...e))}dispatchDeleteRole(...e){return this.store.dispatch(new DeleteRole(...e))}dispatchCreateRole(...e){return this.store.dispatch(new CreateRole(...e))}dispatchUpdateRole(...e){return this.store.dispatch(new UpdateRole(...e))}dispatchGetClaimTypes(...e){return this.store.dispatch(new GetClaimTypes(...e))}dispatchGetClaimTypeById(...e){return this.store.dispatch(new GetClaimTypeById(...e))}dispatchDeleteClaimType(...e){return this.store.dispatch(new DeleteClaimType(...e))}dispatchCreateClaimType(...e){return this.store.dispatch(new CreateClaimType(...e))}dispatchUpdateClaimType(...e){return this.store.dispatch(new UpdateClaimType(...e))}dispatchGetUsers(...e){return this.store.dispatch(new GetUsers(...e))}dispatchGetUserById(...e){return this.store.dispatch(new GetUserById(...e))}dispatchDeleteUser(...e){return this.store.dispatch(new DeleteUser(...e))}dispatchCreateUser(...e){return this.store.dispatch(new CreateUser(...e))}dispatchUpdateUser(...e){return this.store.dispatch(new UpdateUser(...e))}dispatchGetUserRoles(...e){return this.store.dispatch(new GetUserRoles(...e))}}IdentityStateService.ɵprov=i0.ɵɵdefineInjectable({factory:function(){return new IdentityStateService(i0.ɵɵinject(i1.Store))},token:IdentityStateService,providedIn:"root"}),IdentityStateService.decorators=[{type:Injectable,args:[{providedIn:"root"}]}],IdentityStateService.ctorParameters=()=>[{type:Store}];