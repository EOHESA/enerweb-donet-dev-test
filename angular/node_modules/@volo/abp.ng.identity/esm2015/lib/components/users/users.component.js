import{__decorate}from"tslib";import{TreeAdapter}from"@abp/ng.components/tree";import{ConfigStateService,generatePassword,ListService,mapEnumToOptions}from"@abp/ng.core";import{Confirmation,ConfirmationService,getPasswordValidators,ToasterService}from"@abp/ng.theme.shared";import{EXTENSIONS_IDENTIFIER,FormPropData,generateFormFromProps}from"@abp/ng.theme.shared/extensions";import{Component,Injector,ViewChild}from"@angular/core";import{FormBuilder,Validators}from"@angular/forms";import{Select,Store}from"@ngxs/store";import{finalize,pluck,switchMap,take,tap}from"rxjs/operators";import snq from"snq";import{CreateUser,DeleteUser,GetUserRoles,GetUsers,UnlockUser,UpdateUser}from"../../actions/identity.actions";import{identityTwoFactorBehaviourOptions}from"../../enums/two-factor-behaviour";import{IdentityUserService}from"../../proxy/identity/identity-user.service";import{IdentityState}from"../../states/identity.state";var UserLockDurationType;!function(e){e[e.Second=1]="Second",e[e.Minute=60]="Minute",e[e.Hour=3600]="Hour",e[e.Day=86400]="Day",e[e.Month=2592e3]="Month",e[e.Year=31536e3]="Year"}(UserLockDurationType||(UserLockDurationType={}));const Éµ0="Identity.UsersComponent";export class UsersComponent{constructor(e,t,n,r,o,i,s,a){this.list=e,this.confirmationService=t,this.userService=n,this.fb=r,this.store=o,this.toasterService=i,this.injector=s,this.configState=a,this.setPasswordForm=this.fb.group({newPassword:["",[Validators.required,...getPasswordValidators(this.injector)]]}),this.visiblePermissions=!1,this.modalBusy=!1,this.visibleClaims=!1,this.claimSubject={},this.organization={response:{},nodes:[],checkedKeys:[],expandedKeys:[],selectFn:()=>!1},this.twoFactor={isModalVisible:!1,checkboxValue:!1,isOptional:!1},this.lockForm=this.fb.group({lockoutDuration:[0,[Validators.required]],lockDurationType:[UserLockDurationType.Second]}),this.lockDurationTypeOptions=mapEnumToOptions(UserLockDurationType),this.trackByFn=(e,t)=>Object.keys(t)[0]||e,this.onVisiblePermissionChange=e=>{this.visiblePermissions=e}}get roleGroups(){return snq(()=>this.form.get("roleNames").controls,[])}ngOnInit(){const{key:e}=identityTwoFactorBehaviourOptions[0];this.twoFactor.isOptional=this.configState.getFeature("Identity.TwoFactor")===e&&this.configState.getSetting("Abp.Identity.TwoFactor.Behaviour")===e,this.hookToQuery()}hookToQuery(){this.list.hookToQuery(e=>this.store.dispatch(new GetUsers(e))).subscribe()}buildForm(){const e=new FormPropData(this.injector,this.selected);this.form=generateFormFromProps(e),this.userService.getAssignableRoles().subscribe(({items:e})=>{this.roles=e,this.form.addControl("roleNames",this.fb.array(this.roles.map(e=>this.fb.group({[e.name]:[this.selected.id?!!snq(()=>this.selectedUserRoles.find(t=>t.id===e.id)):e.isDefault]}))))}),this.userService.getAvailableOrganizationUnits().subscribe(e=>{this.organization.response=e,this.organization.nodes=new TreeAdapter(e.items).getTree(),this.organization.expandedKeys=e.items.map(e=>e.id),this.organization.checkedKeys=this.selectedOrganizationUnits.map(e=>e.id)})}openModal(){this.buildForm(),this.isModalVisible=!0}onAdd(){this.selected={},this.selectedUserRoles=[],this.selectedOrganizationUnits=[],this.openModal()}onEdit(e){this.userService.get(e).pipe(tap(e=>this.selected=e),switchMap(()=>this.store.dispatch(new GetUserRoles(e))),pluck("IdentityState"),tap(e=>this.selectedUserRoles=e.selectedUserRoles||[]),switchMap(()=>this.userService.getOrganizationUnits(e)),tap(e=>this.selectedOrganizationUnits=e),take(1)).subscribe(()=>this.openModal())}save(){if(!this.form.valid)return;this.modalBusy=!0;const{roleNames:e}=this.form.value,t=snq(()=>e.filter(e=>!!e[Object.keys(e)[0]]).map(e=>Object.keys(e)[0]),[]);this.store.dispatch(this.selected.id?new UpdateUser(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,roleNames:t,organizationUnitIds:this.organization.checkedKeys})):new CreateUser(Object.assign(Object.assign({},this.form.value),{roleNames:t,organizationUnitIds:this.organization.checkedKeys}))).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.list.get(),this.isModalVisible=!1})}delete(e,t){this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe(t=>{t===Confirmation.Status.confirm&&this.store.dispatch(new DeleteUser(e)).subscribe(()=>this.list.get())})}onManageClaims(e){this.claimSubject={id:e,type:"users"},this.visibleClaims=!0}unlock(e){this.store.dispatch(new UnlockUser(e)).subscribe(()=>{this.toasterService.success("AbpIdentity::UserUnlocked"),this.list.get()})}openPermissionsModal(e){this.providerKey=e,setTimeout(()=>{this.visiblePermissions=!0},0)}setPassword(){this.setPasswordForm.invalid||(this.modalBusy=!0,this.userService.updatePassword(this.selected.id,this.setPasswordForm.value).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.isSetPasswordModalVisible=!1,this.selected={},this.setPasswordForm.reset()}))}generatePassword(){this.setPasswordForm.get("newPassword").setValue(generatePassword())}lock(){const{lockoutDuration:e,lockDurationType:t}=this.lockForm.value;this.modalBusy=!0,this.userService.lock(this.selected.id,e*t).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.isLockModalVisible=!1,this.lockForm.reset({lockoutDuration:0,lockDurationType:UserLockDurationType.Second}),this.list.get()})}setTwoFactor(){this.modalBusy=!0,this.userService.setTwoFactorEnabled(this.selected.id,this.twoFactor.checkboxValue).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>this.twoFactor.isModalVisible=!1)}}UsersComponent.decorators=[{type:Component,args:[{selector:"abp-users",template:'<ng-container *ngIf="data$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="identity-users-wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy" (disappear)="form = null">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form *ngIf="form" [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <ul id="user-nav-tabs" ngbNav #nav="ngbNav" class="nav-tabs">\r\n        <li id="user-informations" ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::UserInformations\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent\r\n            ><abp-extensible-form [selectedRecord]="selected"></abp-extensible-form\r\n          ></ng-template>\r\n        </li>\r\n        <li id="user-roles" ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\r\n              class="custom-checkbox custom-control mb-2"\r\n            >\r\n              <input\r\n                type="checkbox"\r\n                class="custom-control-input"\r\n                [attr.id]="\'roles-\' + i"\r\n                [formControl]="roleGroup.controls[roles[i].name]"\r\n              />\r\n              <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{\r\n                roles[i].name\r\n              }}</label>\r\n            </div></ng-template\r\n          >\r\n        </li>\r\n        <li id="user-organization-units" ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::OrganizationUnits\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <abp-tree\r\n              *ngIf="organization.nodes?.length; else noDataMessage"\r\n              [checkStrictly]="true"\r\n              [checkable]="true"\r\n              [nodes]="organization.nodes"\r\n              [isNodeSelected]="organization.selectFn"\r\n              [(checkedKeys)]="organization.checkedKeys"\r\n              [(expandedKeys)]="organization.expandedKeys"\r\n            ></abp-tree>\r\n\r\n            <ng-template #noDataMessage>\r\n              <p class="text-muted">\r\n                {{ \'AbpIdentity::NoOrganizationUnits\' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n      <div [ngbNavOutlet]="nav" class="mt-2 fade-in-top"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'U\' },\r\n      providerKey: { value: providerKey },\r\n      hideBadges: { value: true },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n  }"\r\n  [(visible)]="visiblePermissions"\r\n  [providerKey]="providerKey"\r\n  [hideBadges]="true"\r\n  providerName="U"\r\n>\r\n</abp-permission-management>\r\n\r\n<abp-claim-modal [(visible)]="visibleClaims" [subject]="claimSubject"></abp-claim-modal>\r\n\r\n<abp-modal [(visible)]="isSetPasswordModalVisible" [busy]="modalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::SetPassword\' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="setPasswordForm" (ngSubmit)="setPassword()" validateOnSubmit>\r\n      <div class="mt-2 fade-in-top">\r\n        <div class="form-group">\r\n          <label for="new-password">{{ \'AbpIdentity::Password\' | abpLocalization }}</label>\r\n          <div class="input-group">\r\n            <div class="col-10 p-0">\r\n              <input\r\n                type="text"\r\n                id="new-password"\r\n                class="form-control"\r\n                formControlName="newPassword"\r\n                autofocus\r\n              />\r\n            </div>\r\n            <div class="input-group-append col-2 p-0">\r\n              <button\r\n                class="btn btn-secondary mh-35"\r\n                id="generate-random-password-button"\r\n                type="button"\r\n                (click)="generatePassword()"\r\n              >\r\n                <i class="fa fa-refresh"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      (click)="setPassword()"\r\n      [disabled]="setPasswordForm?.invalid"\r\n      >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n    >\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-modal [(visible)]="isLockModalVisible" [busy]="modalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::Lock\' | abpLocalization }} - {{ selected.userName }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="lockForm" (ngSubmit)="lock()" validateOnSubmit>\r\n      <div class="mt-2 fade-in-top">\r\n        <div class="form-group" [formGroup]="lockForm">\r\n          <label>{{ \'AbpIdentity::DisplayName:LockoutDuration\' | abpLocalization }}</label>\r\n          <input type="number" class="form-control" formControlName="lockoutDuration" />\r\n        </div>\r\n        <div class="form-group">\r\n          <label for="httpMethod">{{\r\n            \'AbpIdentity::DisplayName:LockDurationType\' | abpLocalization\r\n          }}</label\r\n          ><select class="custom-select form-control" formControlName="lockDurationType">\r\n            <option *ngFor="let option of lockDurationTypeOptions" [ngValue]="option.value">\r\n              {{ \'AbpIdentity::Enum:LockDurationType.\' + option.key | abpLocalization }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      (click)="lock()"\r\n      [disabled]="lockForm?.invalid || modalBusy"\r\n      >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n    >\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-modal [(visible)]="twoFactor.isModalVisible" [busy]="modalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::TwoFactor\' | abpLocalization }} - {{ selected.userName }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class="mt-2 fade-in-top">\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          class="custom-control-input"\r\n          id="two-factor-enabled"\r\n          [(ngModel)]="twoFactor.checkboxValue"\r\n        />\r\n        <label class="custom-control-label" for="two-factor-enabled">{{\r\n          \'AbpIdentity::DisplayName:TwoFactorEnabled\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="setTwoFactor()" [disabled]="modalBusy">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[ListService,{provide:EXTENSIONS_IDENTIFIER,useValue:Éµ0}],styles:["\n      .mh-35 {\n        max-height: 35px;\n      }\n    "]}]}],UsersComponent.ctorParameters=()=>[{type:ListService},{type:ConfirmationService},{type:IdentityUserService},{type:FormBuilder},{type:Store},{type:ToasterService},{type:Injector},{type:ConfigStateService}],UsersComponent.propDecorators={modalContent:[{type:ViewChild,args:["modalContent"]}]},__decorate([Select(IdentityState.getUsers)],UsersComponent.prototype,"data$",void 0),__decorate([Select(IdentityState.getUsersTotalCount)],UsersComponent.prototype,"totalCount$",void 0);export{Éµ0};