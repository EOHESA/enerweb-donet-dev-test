import{__rest}from"tslib";import{TreeAdapter}from"@abp/ng.components/tree";import{Confirmation,ConfirmationService}from"@abp/ng.theme.shared";import{EXTENSIONS_IDENTIFIER,FormPropData,generateFormFromProps}from"@abp/ng.theme.shared/extensions";import{Component,Injector}from"@angular/core";import{FormBuilder,FormControl}from"@angular/forms";import{Store}from"@ngxs/store";import{finalize,pluck}from"rxjs/operators";import{GetOrganizationUnits}from"../../actions/identity.actions";import{OrganizationUnitService}from"../../proxy/identity/organization-unit.service";const ɵ0="Identity.OrganizationUnitsComponent";export class OrganizationUnitsComponent{constructor(n,e,t,i,r){this.injector=n,this.store=e,this.organizationUnitService=t,this.fb=i,this.confirmation=r,this.organizationUnits=[],this.nodes=[],this.expandedKeys=[],this.organizationMembersKey="Identity.OrganizationMembersComponent",this.organizationRolesKey="Identity.OrganizationRolesComponent",this.get=()=>{this.loading=!0,this.store.dispatch(new GetOrganizationUnits).pipe(pluck("IdentityState","organizationUnits","items"),finalize(()=>this.loading=!1)).subscribe((n=[])=>{this.organizationUnits=n,this.treeAdapter=new TreeAdapter(n),this.nodes=this.treeAdapter.getTree(),this.expandedKeys=[...this.expandedKeys]})}}ngOnInit(){this.get()}buildForm(n={}){const e=new FormPropData(this.injector,n);this.nodeForm=generateFormFromProps(e),this.nodeForm.addControl("parentId",new FormControl(void 0)),this.nodeForm.addControl("id",new FormControl(void 0))}add(){this.buildForm(),this.isNodeModalVisible=!0}edit(n){this.buildForm(n),this.nodeForm.patchValue({parentId:"",displayName:n.displayName,id:n.id}),this.isNodeModalVisible=!0}addSubUnit({id:n}){this.buildForm(),this.nodeForm.patchValue({parentId:n,displayName:"",id:void 0}),this.isNodeModalVisible=!0,this.expandedKeys=this.expandedKeys.concat(n)}save(){if(this.nodeForm.invalid)return;const n=this.nodeForm.value,{id:e}=n,t=__rest(n,["id"]),i=e?this.organizationUnitService.update(e,{displayName:t.displayName}):this.organizationUnitService.create(t);this.isModalBusy=!0,i.pipe(finalize(()=>this.isModalBusy=!1)).subscribe(()=>{this.get(),this.isNodeModalVisible=!1})}delete({id:n,displayName:e}){this.confirmation.warn("AbpIdentity::OrganizationUnitDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[e]}).subscribe(e=>{e===Confirmation.Status.confirm&&this.organizationUnitService.delete(n).subscribe(()=>this.get())})}getParentName(n){const e=this.organizationUnits.find(e=>e.id===n);return e?e.displayName:""}onDrop(n){if(!n.node)return;let e=n.node.key;n.node.origin.parentId||-1!==n.pos||(e=null),this.move(n.dragNode.key,e)}move(n,e){this.organizationUnitService.move(n,{newParentId:e}).subscribe(this.get)}}OrganizationUnitsComponent.decorators=[{type:Component,args:[{selector:"abp-organization-units",template:'<div class="row entry-row">\r\n  <div class="col-auto">\r\n    <h1 class="content-header-title">{{ \'AbpIdentity::OrganizationUnits\' | abpLocalization }}</h1>\r\n  </div>\r\n  <div class="col-lg-auto pl-lg-0">\r\n    <abp-breadcrumb></abp-breadcrumb>\r\n  </div>\r\n  <div class="col">\r\n    <abp-page-toolbar [record]="organizationUnits"></abp-page-toolbar>\r\n  </div>\r\n</div>\r\n\r\n<div class="row">\r\n  <div *abpPermission="\'AbpIdentity.OrganizationUnits.ManageOU\'" class="col-12 col-lg-6 col-xl-5">\r\n    <div class="card">\r\n      <div class="card-header d-flex justify-content-between">\r\n        <h5>\r\n          {{ \'AbpIdentity::OrganizationTree\' | abpLocalization }}\r\n        </h5>\r\n        <button class="btn btn-sm btn-primary" (click)="add()">\r\n          <i class="fas fa-plus mr-1"></i> {{ \'AbpIdentity::AddRootUnit\' | abpLocalization }}\r\n        </button>\r\n      </div>\r\n      <div class="card-body" [abpLoading]="loading">\r\n        <abp-tree\r\n          [nodes]="nodes"\r\n          [(expandedKeys)]="expandedKeys"\r\n          [(selectedNode)]="selectedUnit"\r\n          [draggable]="true"\r\n          (dropOver)="onDrop($event)"\r\n        >\r\n          <ng-template abpTreeNodeTemplate let-node>\r\n            <i class="fas fa-folder fs-15px text-primary mr-1"></i>\r\n            {{ node.title }}\r\n          </ng-template>\r\n\r\n          <ng-template #menu let-node>\r\n            <li class="pointer" ngbDropdownItem (click)="edit(node.origin.entity)">\r\n              {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n            </li>\r\n            <li class="pointer" ngbDropdownItem (click)="addSubUnit(node.origin.entity)">\r\n              {{ \'AbpIdentity::AddSubUnit\' | abpLocalization }}\r\n            </li>\r\n            <li class="pointer" ngbDropdownItem (click)="delete(node.origin.entity)">\r\n              {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n            </li>\r\n          </ng-template>\r\n        </abp-tree>\r\n        <p *ngIf="!loading && !nodes?.length" class="text-muted">\r\n          {{ \'AbpIdentity::NoOrganizationUnits\' | abpLocalization }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    *abpPermission="\r\n      \'AbpIdentity.OrganizationUnits.ManageMembers || AbpIdentity.OrganizationUnits.ManageRoles\'\r\n    "\r\n    class="col-12 col-lg-6 col-xl-7"\r\n  >\r\n    <div class="card">\r\n      <ul ngbNav #nav="ngbNav" class="nav-tabs">\r\n        <li ngbNavItem *abpPermission="\'AbpIdentity.OrganizationUnits.ManageMembers\'">\r\n          <a ngbNavLink>{{ \'AbpIdentity::Members\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngIf="selectedUnit; else selectUnitMsg">\r\n              <abp-organization-members\r\n                *abpReplaceableTemplate="{\r\n                  inputs: {\r\n                    selectedOrganizationUnit: { value: selectedUnit }\r\n                  },\r\n                  componentKey: organizationMembersKey\r\n                }"\r\n                [selectedOrganizationUnit]="selectedUnit"\r\n              ></abp-organization-members>\r\n            </ng-container>\r\n            <ng-template #selectUnitMsg>\r\n              <p class="text-muted">\r\n                {{ \'AbpIdentity::SelectAnOrganizationUnitToSeeMembers\' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n        <li ngbNavItem *abpPermission="\'AbpIdentity.OrganizationUnits.ManageRoles\'">\r\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngIf="selectedUnit; else selectUnitMsg">\r\n              <abp-organization-roles\r\n                *abpReplaceableTemplate="{\r\n                  inputs: {\r\n                    selectedOrganizationUnit: { value: selectedUnit }\r\n                  },\r\n                  componentKey: organizationRolesKey\r\n                }"\r\n                [selectedOrganizationUnit]="selectedUnit"\r\n              ></abp-organization-roles>\r\n            </ng-container>\r\n            <ng-template #selectUnitMsg>\r\n              <p class="text-muted">\r\n                {{ \'AbpIdentity::SelectAnOrganizationUnitToSeeRoles\' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n      <div [ngbNavOutlet]="nav"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]="isNodeModalVisible" [busy]="isModalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (nodeForm.get(\'id\').value\r\n          ? \'AbpIdentity::EditOrganizationUnit\'\r\n          : \'AbpIdentity::NewOrganizationUnit\'\r\n        ) | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class="mb-3" *ngIf="nodeForm.get(\'parentId\').value as parentId">\r\n      <strong>{{\r\n        \'AbpIdentity::OrganizationUnit:Parent{0}\' | abpLocalization: getParentName(parentId)\r\n      }}</strong>\r\n    </div>\r\n    <form [formGroup]="nodeForm" (ngSubmit)="save()" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]="selectedUnit"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="nodeForm?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[{provide:EXTENSIONS_IDENTIFIER,useValue:ɵ0}],styles:["\n      .fs-15px {\n        font-size: 15px;\n      }\n    "]}]}],OrganizationUnitsComponent.ctorParameters=()=>[{type:Injector},{type:Store},{type:OrganizationUnitService},{type:FormBuilder},{type:ConfirmationService}];export{ɵ0};