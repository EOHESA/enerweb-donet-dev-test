import{__decorate}from"tslib";import{ListService}from"@abp/ng.core";import{Confirmation,ConfirmationService}from"@abp/ng.theme.shared";import{EXTENSIONS_IDENTIFIER,FormPropData,generateFormFromProps}from"@abp/ng.theme.shared/extensions";import{Component,Injector,ViewChild}from"@angular/core";import{Select,Store}from"@ngxs/store";import{finalize,take}from"rxjs/operators";import{CreateRole,DeleteRole,GetRoles,UpdateRole}from"../../actions/identity.actions";import{IdentityRoleService}from"../../proxy/identity/identity-role.service";import{IdentityState}from"../../states/identity.state";const ɵ0="Identity.RolesComponent";export class RolesComponent{constructor(e,t,i,r,o){this.list=e,this.confirmationService=t,this.roleService=i,this.store=r,this.injector=o,this.visiblePermissions=!1,this.modalBusy=!1,this.visibleClaims=!1,this.claimSubject={},this.onVisiblePermissionChange=e=>{this.visiblePermissions=e}}createForm(){const e=new FormPropData(this.injector,this.selected);this.form=generateFormFromProps(e)}hookToQuery(){this.list.hookToQuery(e=>this.store.dispatch(new GetRoles(e))).subscribe()}ngOnInit(){this.hookToQuery()}openModal(){this.createForm(),this.isModalVisible=!0}onAdd(){this.selected={},this.openModal()}onEdit(e){this.roleService.get(e).pipe(take(1)).subscribe(e=>{this.selected=e,this.openModal()})}save(){this.form.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new UpdateRole(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,concurrencyStamp:this.selected.concurrencyStamp})):new CreateRole(this.form.value)).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.list.get(),this.isModalVisible=!1}))}delete(e,t){this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe(t=>{t===Confirmation.Status.confirm&&this.store.dispatch(new DeleteRole(e)).subscribe(()=>this.list.get())})}onManageClaims(e){this.claimSubject={id:e,type:"roles"},this.visibleClaims=!0}openPermissionsModal(e){this.providerKey=e,setTimeout(()=>{this.visiblePermissions=!0},0)}}RolesComponent.decorators=[{type:Component,args:[{selector:"abp-roles",template:'<ng-container *ngIf="data$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="identity-roles-wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="save()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'R\' },\r\n      providerKey: { value: providerKey },\r\n      hideBadges: { value: true },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n  }"\r\n  [(visible)]="visiblePermissions"\r\n  [providerKey]="providerKey"\r\n  providerName="R"\r\n  [hideBadges]="true"\r\n>\r\n</abp-permission-management>\r\n\r\n<abp-claim-modal [(visible)]="visibleClaims" [subject]="claimSubject"></abp-claim-modal>\r\n',providers:[ListService,{provide:EXTENSIONS_IDENTIFIER,useValue:ɵ0}]}]}],RolesComponent.ctorParameters=()=>[{type:ListService},{type:ConfirmationService},{type:IdentityRoleService},{type:Store},{type:Injector}],RolesComponent.propDecorators={modalContent:[{type:ViewChild,args:["modalContent"]}]},__decorate([Select(IdentityState.getRoles)],RolesComponent.prototype,"data$",void 0),__decorate([Select(IdentityState.getRolesTotalCount)],RolesComponent.prototype,"totalCount$",void 0);export{ɵ0};