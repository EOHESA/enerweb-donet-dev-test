import { StateContext } from '@ngxs/store';
import { CreateClaimType, CreateRole, CreateUser, GetClaimTypeById, GetClaimTypes, GetRoleById, GetRoles, GetUserById, GetUserRoles, GetUsers, UnlockUser, UpdateClaimType, UpdateRole, UpdateUser } from '../actions/identity.actions';
import { Identity } from '../models/identity';
import { IdentityClaimTypeService } from '../proxy/identity/identity-claim-type.service';
import { IdentityRoleService } from '../proxy/identity/identity-role.service';
import { IdentityUserService } from '../proxy/identity/identity-user.service';
import { ClaimTypeDto, IdentityRoleDto, IdentityUserDto } from '../proxy/identity/models';
import { OrganizationUnitService } from '../proxy/identity/organization-unit.service';
export declare class IdentityState {
    private roleService;
    private userService;
    private claimTypeService;
    private organizationUnitService;
    static getRoles({ roles }: Identity.State): IdentityRoleDto[];
    static getRolesTotalCount({ roles }: Identity.State): number;
    static getUsers({ users }: Identity.State): IdentityUserDto[];
    static getUsersTotalCount({ users }: Identity.State): number;
    static getClaimTypes({ claims }: Identity.State): ClaimTypeDto[];
    static getClaimTypesTotalCount({ claims }: Identity.State): number;
    constructor(roleService: IdentityRoleService, userService: IdentityUserService, claimTypeService: IdentityClaimTypeService, organizationUnitService: OrganizationUnitService);
    getRoles({ patchState }: StateContext<Identity.State>, { payload }: GetRoles): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<IdentityRoleDto>>;
    deleteRole(_: any, { payload }: GetRoleById): import("rxjs").Observable<void>;
    addRole(_: any, { payload }: CreateRole): import("rxjs").Observable<IdentityRoleDto>;
    updateRole(_: any, { payload: { id, ...input } }: UpdateRole): import("rxjs").Observable<IdentityRoleDto>;
    getUsers({ patchState }: StateContext<Identity.State>, { payload }: GetUsers): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<IdentityUserDto>>;
    deleteUser(_: any, { payload }: GetUserById): import("rxjs").Observable<void>;
    createUser(_: any, { payload }: CreateUser): import("rxjs").Observable<IdentityUserDto>;
    updateUser(_: any, { payload: { id, ...input } }: UpdateUser): import("rxjs").Observable<IdentityUserDto>;
    unlockUser(_: any, { id }: UnlockUser): import("rxjs").Observable<void>;
    getUserRoles({ patchState }: StateContext<Identity.State>, { payload }: GetUserRoles): import("rxjs").Observable<IdentityRoleDto[]>;
    getClaimTypes({ patchState }: StateContext<Identity.State>, { payload }: GetClaimTypes): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<ClaimTypeDto>>;
    getClaimType({ patchState }: StateContext<Identity.State>, { payload }: GetClaimTypeById): import("rxjs").Observable<ClaimTypeDto>;
    deleteClaimType(_: any, { payload }: GetClaimTypeById): import("rxjs").Observable<void>;
    createClaimType(_: any, { payload }: CreateClaimType): import("rxjs").Observable<ClaimTypeDto>;
    updateClaimType(_: any, { payload: { id, ...input } }: UpdateClaimType): import("rxjs").Observable<ClaimTypeDto>;
    getOrganizationUnits({ patchState }: StateContext<Identity.State>): import("rxjs").Observable<import("@abp/ng.core").ListResultDto<import("../proxy/identity/models").OrganizationUnitWithDetailsDto>>;
}
