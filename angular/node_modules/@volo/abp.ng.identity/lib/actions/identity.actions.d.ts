import { CreateClaimTypeDto, GetIdentityClaimTypesInput, GetIdentityRoleListInput, GetIdentityUsersInput, IdentityRoleCreateDto, IdentityRoleUpdateDto, IdentityUserCreateDto, IdentityUserUpdateDto, UpdateClaimTypeDto } from '../proxy/identity/models';
export declare class GetRoles {
    payload: GetIdentityRoleListInput;
    static readonly type = "[Identity] Get Roles";
    constructor(payload?: GetIdentityRoleListInput);
}
export declare class GetRoleById {
    payload: string;
    static readonly type = "[Identity] Get Role By Id";
    constructor(payload: string);
}
export declare class DeleteRole {
    payload: string;
    static readonly type = "[Identity] Delete Role";
    constructor(payload: string);
}
export declare class CreateRole {
    payload: IdentityRoleCreateDto;
    static readonly type = "[Identity] Create Role";
    constructor(payload: IdentityRoleCreateDto);
}
export declare class UpdateRole {
    payload: IdentityRoleUpdateDto & {
        id: string;
    };
    static readonly type = "[Identity] Update Role";
    constructor(payload: IdentityRoleUpdateDto & {
        id: string;
    });
}
export declare class GetClaimTypes {
    payload: GetIdentityClaimTypesInput;
    static readonly type = "[Identity] Get ClaimTypes";
    constructor(payload?: GetIdentityClaimTypesInput);
}
export declare class GetClaimTypeById {
    payload: string;
    static readonly type = "[Identity] Get ClaimType By Id";
    constructor(payload: string);
}
export declare class DeleteClaimType {
    payload: string;
    static readonly type = "[Identity] Delete ClaimType";
    constructor(payload: string);
}
export declare class CreateClaimType {
    payload: CreateClaimTypeDto;
    static readonly type = "[Identity] Create ClaimType";
    constructor(payload: CreateClaimTypeDto);
}
export declare class UpdateClaimType {
    payload: UpdateClaimTypeDto & {
        id: string;
    };
    static readonly type = "[Identity] Update ClaimType";
    constructor(payload: UpdateClaimTypeDto & {
        id: string;
    });
}
export declare class GetUsers {
    payload: GetIdentityUsersInput;
    static readonly type = "[Identity] Get Users";
    constructor(payload?: GetIdentityUsersInput);
}
export declare class GetUserById {
    payload: string;
    static readonly type = "[Identity] Get User By Id";
    constructor(payload: string);
}
export declare class DeleteUser {
    payload: string;
    static readonly type = "[Identity] Delete User";
    constructor(payload: string);
}
export declare class CreateUser {
    payload: IdentityUserCreateDto;
    static readonly type = "[Identity] Create User";
    constructor(payload: IdentityUserCreateDto);
}
export declare class UpdateUser {
    payload: IdentityUserUpdateDto & {
        id: string;
    };
    static readonly type = "[Identity] Update User";
    constructor(payload: IdentityUserUpdateDto & {
        id: string;
    });
}
export declare class GetUserRoles {
    payload: string;
    static readonly type = "[Identity] Get User Roles";
    constructor(payload: string);
}
export declare class UnlockUser {
    id: string;
    static readonly type = "[Identity] Unlock User";
    constructor(id: string);
}
export declare class GetOrganizationUnits {
    static readonly type = "[Identity] Get Organization Units";
}
