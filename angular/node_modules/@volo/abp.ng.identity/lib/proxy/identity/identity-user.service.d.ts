import type { ClaimTypeDto, GetIdentityUsersInput, IdentityRoleDto, IdentityUserClaimDto, IdentityUserCreateDto, IdentityUserDto, IdentityUserUpdateDto, IdentityUserUpdatePasswordInput, IdentityUserUpdateRolesDto, OrganizationUnitDto, OrganizationUnitWithDetailsDto } from './models';
import { RestService } from '@abp/ng.core';
import type { ListResultDto, PagedResultDto } from '@abp/ng.core';
export declare class IdentityUserService {
    private restService;
    apiName: string;
    create: (input: IdentityUserCreateDto) => import("rxjs").Observable<IdentityUserDto>;
    delete: (id: string) => import("rxjs").Observable<void>;
    findByEmail: (email: string) => import("rxjs").Observable<IdentityUserDto>;
    findByUsername: (username: string) => import("rxjs").Observable<IdentityUserDto>;
    get: (id: string) => import("rxjs").Observable<IdentityUserDto>;
    getAllClaimTypes: () => import("rxjs").Observable<ClaimTypeDto[]>;
    getAssignableRoles: () => import("rxjs").Observable<ListResultDto<IdentityRoleDto>>;
    getAvailableOrganizationUnits: () => import("rxjs").Observable<ListResultDto<OrganizationUnitWithDetailsDto>>;
    getClaims: (id: string) => import("rxjs").Observable<IdentityUserClaimDto[]>;
    getList: (input: GetIdentityUsersInput) => import("rxjs").Observable<PagedResultDto<IdentityUserDto>>;
    getOrganizationUnits: (id: string) => import("rxjs").Observable<OrganizationUnitDto[]>;
    getRoles: (id: string) => import("rxjs").Observable<ListResultDto<IdentityRoleDto>>;
    getTwoFactorEnabled: (id: string) => import("rxjs").Observable<boolean>;
    lock: (id: string, lockoutDuration: number) => import("rxjs").Observable<void>;
    setTwoFactorEnabled: (id: string, enabled: boolean) => import("rxjs").Observable<void>;
    unlock: (id: string) => import("rxjs").Observable<void>;
    update: (id: string, input: IdentityUserUpdateDto) => import("rxjs").Observable<IdentityUserDto>;
    updateClaims: (id: string, input: IdentityUserClaimDto[]) => import("rxjs").Observable<void>;
    updatePassword: (id: string, input: IdentityUserUpdatePasswordInput) => import("rxjs").Observable<void>;
    updateRoles: (id: string, input: IdentityUserUpdateRolesDto) => import("rxjs").Observable<void>;
    constructor(restService: RestService);
}
