!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@abp/ng.theme.shared/extensions"),require("@angular/core"),require("@ngxs/store"),require("rxjs/operators"),require("@abp/ng.components/tree"),require("@angular/forms"),require("snq"),require("@ng-bootstrap/ng-bootstrap"),require("rxjs"),require("@volo/abp.commercial.ng.ui"),require("@angular/common"),require("@abp/ng.permission-management"),require("@ngx-validate/core"),require("@angular/router")):"function"==typeof define&&define.amd?define("@volo/abp.ng.identity",["exports","@abp/ng.core","@abp/ng.theme.shared","@abp/ng.theme.shared/extensions","@angular/core","@ngxs/store","rxjs/operators","@abp/ng.components/tree","@angular/forms","snq","@ng-bootstrap/ng-bootstrap","rxjs","@volo/abp.commercial.ng.ui","@angular/common","@abp/ng.permission-management","@ngx-validate/core","@angular/router"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).volo=e.volo||{},e.volo.abp=e.volo.abp||{},e.volo.abp.ng=e.volo.abp.ng||{},e.volo.abp.ng.identity={}),e.i1,e.ng_theme_shared,e.extensions,e.ng.core,e.i1$1,e.rxjs.operators,e.tree,e.ng.forms,e.snq,e.ngBootstrap,e.rxjs,e.abp_commercial_ng_ui,e.ng.common,e.ng_permissionManagement,e.core,e.ng.router)}(this,(function(e,t,n,i,r,o,a,s,l,c,p,d,u,m,b,y,g){"use strict";var v=function(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}(c),f=function(e){void 0===e&&(e={}),this.payload=e};f.type="[Identity] Get Roles";var h=function(e){this.payload=e};h.type="[Identity] Get Role By Id";var I=function(e){this.payload=e};I.type="[Identity] Delete Role";var C=function(e){this.payload=e};C.type="[Identity] Create Role";var T=function(e){this.payload=e};T.type="[Identity] Update Role";var N=function(e){void 0===e&&(e={}),this.payload=e};N.type="[Identity] Get ClaimTypes";var S=function(e){this.payload=e};S.type="[Identity] Get ClaimType By Id";var A=function(e){this.payload=e};A.type="[Identity] Delete ClaimType";var U=function(e){this.payload=e};U.type="[Identity] Create ClaimType";var R=function(e){this.payload=e};R.type="[Identity] Update ClaimType";var k=function(e){void 0===e&&(e={}),this.payload=e};k.type="[Identity] Get Users";var z=function(e){this.payload=e};z.type="[Identity] Get User By Id";var O=function(e){this.payload=e};O.type="[Identity] Delete User";var w=function(e){this.payload=e};w.type="[Identity] Create User";var M=function(e){this.payload=e};M.type="[Identity] Update User";var x=function(e){this.payload=e};x.type="[Identity] Get User Roles";var P=function(e){this.id=e};P.type="[Identity] Unlock User";var L=function(){};L.type="[Identity] Get Organization Units";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
var E=function(e,t){return(E=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function j(e,t){function n(){this.constructor=e}E(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function D(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n}function F(e,t,n,i){var r,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(o<3?r(a):o>3?r(t,n,a):r(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function q(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return a}function V(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(q(arguments[t]));return e}Object.create,Object.create;var B=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/claim-types",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/claim-types/"+e},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/claim-types/"+e},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/claim-types",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/claim-types/"+e,body:n},{apiName:t.apiName})}};B.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new B(r.ɵɵinject(t.RestService))},token:B,providedIn:"root"}),B.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],B.ctorParameters=function(){return[{type:t.RestService}]};var _=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/roles",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/roles/"+e},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles/"+e},{apiName:t.apiName})},this.getAllClaimTypes=function(){return t.restService.request({method:"GET",url:"/api/identity/roles/all-claim-types"},{apiName:t.apiName})},this.getAllList=function(){return t.restService.request({method:"GET",url:"/api/identity/roles/all"},{apiName:t.apiName})},this.getClaims=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles/"+e+"/claims"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/roles/"+e,body:n},{apiName:t.apiName})},this.updateClaims=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/roles/"+e+"/claims",body:n},{apiName:t.apiName})}};_.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new _(r.ɵɵinject(t.RestService))},token:_,providedIn:"root"}),_.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],_.ctorParameters=function(){return[{type:t.RestService}]};var G=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/users",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/users/"+e},{apiName:t.apiName})},this.findByEmail=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/by-email/"+e},{apiName:t.apiName})},this.findByUsername=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/by-username/"+e},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e},{apiName:t.apiName})},this.getAllClaimTypes=function(){return t.restService.request({method:"GET",url:"/api/identity/users/all-claim-types"},{apiName:t.apiName})},this.getAssignableRoles=function(){return t.restService.request({method:"GET",url:"/api/identity/users/assignable-roles"},{apiName:t.apiName})},this.getAvailableOrganizationUnits=function(){return t.restService.request({method:"GET",url:"/api/identity/users/available-organization-units"},{apiName:t.apiName})},this.getClaims=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e+"/claims"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/users",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getOrganizationUnits=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e+"/organization-units"},{apiName:t.apiName})},this.getRoles=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e+"/roles"},{apiName:t.apiName})},this.getTwoFactorEnabled=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e+"/two-factor-enabled"},{apiName:t.apiName})},this.lock=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/lock/"+n},{apiName:t.apiName})},this.setTwoFactorEnabled=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/two-factor/"+n},{apiName:t.apiName})},this.unlock=function(e){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/unlock"},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e,body:n},{apiName:t.apiName})},this.updateClaims=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/claims",body:n},{apiName:t.apiName})},this.updatePassword=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/change-password",body:n},{apiName:t.apiName})},this.updateRoles=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/roles",body:n},{apiName:t.apiName})}};G.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new G(r.ɵɵinject(t.RestService))},token:G,providedIn:"root"}),G.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],G.ctorParameters=function(){return[{type:t.RestService}]};var K=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.addMembers=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/organization-units/"+e+"/members",body:n},{apiName:t.apiName})},this.addRoles=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/organization-units/"+e+"/roles",body:n},{apiName:t.apiName})},this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/organization-units",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/organization-units",params:{id:e}},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/organization-units/"+e},{apiName:t.apiName})},this.getAvailableRoles=function(e){return t.restService.request({method:"GET",url:"/api/identity/organization-units/available-roles",params:{filter:e.filter,id:e.id,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getAvailableUsers=function(e){return t.restService.request({method:"GET",url:"/api/identity/organization-units/available-users",params:{filter:e.filter,id:e.id,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/organization-units",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getListAll=function(){return t.restService.request({method:"GET",url:"/api/identity/organization-units/all"},{apiName:t.apiName})},this.getMembers=function(e,n){return t.restService.request({method:"GET",url:"/api/identity/organization-units/"+e+"/members",params:{filter:n.filter,sorting:n.sorting,skipCount:n.skipCount,maxResultCount:n.maxResultCount}},{apiName:t.apiName})},this.getRoles=function(e,n){return t.restService.request({method:"GET",url:"/api/identity/organization-units/"+e+"/roles",params:{skipCount:n.skipCount,maxResultCount:n.maxResultCount,sorting:n.sorting}},{apiName:t.apiName})},this.move=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/organization-units/"+e+"/move",body:n},{apiName:t.apiName})},this.removeMember=function(e,n){return t.restService.request({method:"DELETE",url:"/api/identity/organization-units/"+e+"/members/"+n},{apiName:t.apiName})},this.removeRole=function(e,n){return t.restService.request({method:"DELETE",url:"/api/identity/organization-units/"+e+"/roles/"+n},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/organization-units/"+e,body:n},{apiName:t.apiName})}};K.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new K(r.ɵɵinject(t.RestService))},token:K,providedIn:"root"}),K.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],K.ctorParameters=function(){return[{type:t.RestService}]},e.ɵc=function(){function e(e,t,n,i){this.roleService=e,this.userService=t,this.claimTypeService=n,this.organizationUnitService=i}return e.getRoles=function(e){return e.roles.items||[]},e.getRolesTotalCount=function(e){return e.roles.totalCount||0},e.getUsers=function(e){return e.users.items||[]},e.getUsersTotalCount=function(e){return e.users.totalCount||0},e.getClaimTypes=function(e){return e.claims.items||[]},e.getClaimTypesTotalCount=function(e){return e.claims.totalCount||0},e.prototype.getRoles=function(e,t){var n=e.patchState,i=t.payload;return this.roleService.getList(i).pipe(a.tap((function(e){return n({roles:e})})))},e.prototype.deleteRole=function(e,t){var n=t.payload;return this.roleService.delete(n)},e.prototype.addRole=function(e,t){var n=t.payload;return this.roleService.create(n)},e.prototype.updateRole=function(e,t){var n=t.payload,i=n.id,r=D(n,["id"]);return this.roleService.update(i,r)},e.prototype.getUsers=function(e,t){var n=e.patchState,i=t.payload;return this.userService.getList(i).pipe(a.tap((function(e){return n({users:e})})))},e.prototype.deleteUser=function(e,t){var n=t.payload;return this.userService.delete(n)},e.prototype.createUser=function(e,t){var n=t.payload;return this.userService.create(n)},e.prototype.updateUser=function(e,t){var n=t.payload,i=n.id,r=D(n,["id"]);return this.userService.update(i,r)},e.prototype.unlockUser=function(e,t){var n=t.id;return this.userService.unlock(n)},e.prototype.getUserRoles=function(e,t){var n=e.patchState,i=t.payload;return this.userService.getRoles(i).pipe(a.pluck("items"),a.tap((function(e){return n({selectedUserRoles:e})})))},e.prototype.getClaimTypes=function(e,t){var n=e.patchState,i=t.payload;return this.claimTypeService.getList(i).pipe(a.tap((function(e){return n({claims:e})})))},e.prototype.getClaimType=function(e,t){var n=e.patchState,i=t.payload;return this.claimTypeService.get(i).pipe(a.tap((function(e){return n({selectedClaim:e})})))},e.prototype.deleteClaimType=function(e,t){var n=t.payload;return this.claimTypeService.delete(n)},e.prototype.createClaimType=function(e,t){var n=t.payload;return this.claimTypeService.create(n)},e.prototype.updateClaimType=function(e,t){var n=t.payload,i=n.id,r=D(n,["id"]);return this.claimTypeService.update(i,r)},e.prototype.getOrganizationUnits=function(e){var t=e.patchState;return this.organizationUnitService.getListAll().pipe(a.tap((function(e){return t({organizationUnits:e})})))},e}(),e.ɵc.decorators=[{type:r.Injectable}],e.ɵc.ctorParameters=function(){return[{type:_},{type:G},{type:B},{type:K}]},F([o.Action(f)],e.ɵc.prototype,"getRoles",null),F([o.Action(I)],e.ɵc.prototype,"deleteRole",null),F([o.Action(C)],e.ɵc.prototype,"addRole",null),F([o.Action(T)],e.ɵc.prototype,"updateRole",null),F([o.Action(k)],e.ɵc.prototype,"getUsers",null),F([o.Action(O)],e.ɵc.prototype,"deleteUser",null),F([o.Action(w)],e.ɵc.prototype,"createUser",null),F([o.Action(M)],e.ɵc.prototype,"updateUser",null),F([o.Action(P)],e.ɵc.prototype,"unlockUser",null),F([o.Action(x)],e.ɵc.prototype,"getUserRoles",null),F([o.Action(N)],e.ɵc.prototype,"getClaimTypes",null),F([o.Action(S)],e.ɵc.prototype,"getClaimType",null),F([o.Action(A)],e.ɵc.prototype,"deleteClaimType",null),F([o.Action(U)],e.ɵc.prototype,"createClaimType",null),F([o.Action(R)],e.ɵc.prototype,"updateClaimType",null),F([o.Action(L)],e.ɵc.prototype,"getOrganizationUnits",null),F([o.Selector()],e.ɵc,"getRoles",null),F([o.Selector()],e.ɵc,"getRolesTotalCount",null),F([o.Selector()],e.ɵc,"getUsers",null),F([o.Selector()],e.ɵc,"getUsersTotalCount",null),F([o.Selector()],e.ɵc,"getClaimTypes",null),F([o.Selector()],e.ɵc,"getClaimTypesTotalCount",null),e.ɵc=F([o.State({name:"IdentityState",defaults:{roles:{},users:{},claims:{},selectedClaim:{},selectedUserRoles:[],organizationUnits:{}}})],e.ɵc);var Y="Identity.ClaimsComponent",W=function(){function e(e,t,n,i){this.list=e,this.confirmationService=t,this.store=n,this.injector=i,this.modalBusy=!1,this.trackByFn=function(e,t){return Object.keys(t)[0]||e}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new N(t))})).subscribe()},e.prototype.buildForm=function(){var e=new i.FormPropData(this.injector,this.selected);this.form=i.generateFormFromProps(e)},e.prototype.getTypeName=function(e){switch(e){case 0:return"String";case 1:return"Int";case 2:return"Boolean";case 3:return"DateTime";default:return e}},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.onAdd=function(){this.selected={},this.openModal()},e.prototype.onEdit=function(e){var t=this;this.store.dispatch(new S(e)).pipe(a.pluck("IdentityState"),a.take(1)).subscribe((function(e){t.selected=e.selectedClaim,t.openModal()}))},e.prototype.save=function(){var e=this;this.form.valid&&!this.modalBusy&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new R(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id})):new U(Object.assign({},this.form.value))).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.list.get(),e.isModalVisible=!1})))},e.prototype.delete=function(e,t){var i=this;this.confirmationService.warn("AbpIdentity::ClaimTypeDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===n.Confirmation.Status.confirm&&i.store.dispatch(new A(e)).subscribe((function(){return i.list.get()}))}))},e}();W.decorators=[{type:r.Component,args:[{selector:"abp-claims",template:'<ng-container *ngIf="data$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'AbpIdentity::ClaimTypes\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="identity-claim-types-wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewClaimType\') | abpLocalization }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <div class="mt-2 fade-in-top">\r\n        <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:Y}]}]}],W.ctorParameters=function(){return[{type:t.ListService},{type:n.ConfirmationService},{type:o.Store},{type:r.Injector}]},W.propDecorators={modalContent:[{type:r.ViewChild,args:["modalContent"]}]},F([o.Select(e.ɵc.getClaimTypes)],W.prototype,"data$",void 0),F([o.Select(e.ɵc.getClaimTypesTotalCount)],W.prototype,"totalCount$",void 0);var H=new r.InjectionToken("ORGANIZATION_UNIT_CONFIG"),Q=function(){function e(e){var i=this;this.injector=e,this.currentOrganizationUnits={items:[]},this.checkedUnits={},this.isCheckboxDisabled=function(e){return i.currentOrganizationUnits.items.findIndex((function(t){return t.id===e}))>-1},this.list=e.get(t.ListService),this.list.maxResultCount=1e3,this.organizationUnitService=e.get(K),this.confirmation=e.get(n.ConfirmationService),this.config=e.get(H,{})}return e.prototype.ngOnChanges=function(e){var t=e.selectedOrganizationUnit;(null==t?void 0:t.firstChange)?this.hookToQuery():(null==t?void 0:t.currentValue)&&this.list.get()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.organizationUnitService[e.config.getCurrentUnitsMethodName](e.selectedOrganizationUnit.id,t)})).subscribe((function(t){e.currentOrganizationUnits=t,e.checkedUnits={},t.items.forEach((function(t){e.checkedUnits[t.id]=!0}))}))},e.prototype.addUnits=function(){var e,t=this;this.isModalBusy=!0,this.organizationUnitService[this.config.addUnitsMethodName](this.selectedOrganizationUnit.id,(e={},e[this.config.addUnitsBodyPropName]=Object.keys(this.checkedUnits),e)).pipe(a.finalize((function(){return t.isModalBusy=!1}))).subscribe((function(){t.isModalVisible=!1,t.list.get()}))},e.prototype.delete=function(e,t){var i=this;this.confirmation.warn(this.config.deletionLocalizationKey,"AbpIdentity::AreYouSure",{messageLocalizationParams:[t,this.selectedOrganizationUnit.displayName]}).subscribe((function(t){t===n.Confirmation.Status.confirm&&i.organizationUnitService[i.config.deleteMethodName](i.selectedOrganizationUnit.id,e).subscribe((function(){return i.list.get()}))}))},e.prototype.openModal=function(){this.isModalVisible=!0},e}();Q.decorators=[{type:r.Component,args:[{template:""}]}],Q.ctorParameters=function(){return[{type:r.Injector}]},Q.propDecorators={selectedOrganizationUnit:[{type:r.Input}]};var $={getCurrentUnitsMethodName:"getMembers",addUnitsMethodName:"addMembers",addUnitsBodyPropName:"userIds",deleteMethodName:"removeMember",deletionLocalizationKey:"AbpIdentity::RemoveUserFromOuWarningMessage"},X=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return j(t,e),t}(Q);X.decorators=[{type:r.Component,args:[{selector:"abp-organization-members",template:'<div class="text-right">\r\n  <button class="btn btn-sm btn-primary mb-2" (click)="openModal()">\r\n    <i class="fas fa-plus mr-1"></i> {{ \'AbpIdentity::AddMember\' | abpLocalization }}\r\n  </button>\r\n</div>\r\n\r\n<abp-extensible-table\r\n  [data]="currentOrganizationUnits.items"\r\n  [recordsTotal]="currentOrganizationUnits.totalCount"\r\n  [list]="list"\r\n></abp-extensible-table>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="isModalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::SelectUsers\' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <abp-organization-members-modal-body\r\n      [checkedUnits]="checkedUnits"\r\n      [isCheckboxDisabled]="isCheckboxDisabled"\r\n    ></abp-organization-members-modal-body>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="addUnits()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.OrganizationMembersComponent"},{provide:H,useValue:$}]}]}];var Z=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return j(t,e),t}(Q);Z.decorators=[{type:r.Component,args:[{selector:"abp-organization-roles",template:'<div class="text-right">\r\n  <button class="btn btn-sm btn-primary mb-2" (click)="openModal()">\r\n    <i class="fas fa-plus mr-1"></i> {{ \'AbpIdentity::AddRole\' | abpLocalization }}\r\n  </button>\r\n</div>\r\n\r\n<abp-extensible-table\r\n  [data]="currentOrganizationUnits.items"\r\n  [recordsTotal]="currentOrganizationUnits.totalCount"\r\n  [list]="list"\r\n></abp-extensible-table>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="isModalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::SelectRoles\' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <abp-organization-roles-modal-body\r\n      [checkedUnits]="checkedUnits"\r\n      [isCheckboxDisabled]="isCheckboxDisabled"\r\n    ></abp-organization-roles-modal-body>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="addUnits()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.OrganizationRolesComponent"},{provide:H,useValue:{getCurrentUnitsMethodName:"getRoles",addUnitsMethodName:"addRoles",addUnitsBodyPropName:"roleIds",deleteMethodName:"removeRole",deletionLocalizationKey:"AbpIdentity::RemoveRoleFromOuWarningMessage"}}]}]}];var J=function(){function e(e,t,n,i,r){var o=this;this.injector=e,this.store=t,this.organizationUnitService=n,this.fb=i,this.confirmation=r,this.organizationUnits=[],this.nodes=[],this.expandedKeys=[],this.organizationMembersKey="Identity.OrganizationMembersComponent",this.organizationRolesKey="Identity.OrganizationRolesComponent",this.get=function(){o.loading=!0,o.store.dispatch(new L).pipe(a.pluck("IdentityState","organizationUnits","items"),a.finalize((function(){return o.loading=!1}))).subscribe((function(e){void 0===e&&(e=[]),o.organizationUnits=e,o.treeAdapter=new s.TreeAdapter(e),o.nodes=o.treeAdapter.getTree(),o.expandedKeys=V(o.expandedKeys)}))}}return e.prototype.ngOnInit=function(){this.get()},e.prototype.buildForm=function(e){void 0===e&&(e={});var t=new i.FormPropData(this.injector,e);this.nodeForm=i.generateFormFromProps(t),this.nodeForm.addControl("parentId",new l.FormControl(void 0)),this.nodeForm.addControl("id",new l.FormControl(void 0))},e.prototype.add=function(){this.buildForm(),this.isNodeModalVisible=!0},e.prototype.edit=function(e){this.buildForm(e),this.nodeForm.patchValue({parentId:"",displayName:e.displayName,id:e.id}),this.isNodeModalVisible=!0},e.prototype.addSubUnit=function(e){var t=e.id;this.buildForm(),this.nodeForm.patchValue({parentId:t,displayName:"",id:void 0}),this.isNodeModalVisible=!0,this.expandedKeys=this.expandedKeys.concat(t)},e.prototype.save=function(){var e=this;if(!this.nodeForm.invalid){var t=this.nodeForm.value,n=t.id,i=D(t,["id"]),r=n?this.organizationUnitService.update(n,{displayName:i.displayName}):this.organizationUnitService.create(i);this.isModalBusy=!0,r.pipe(a.finalize((function(){return e.isModalBusy=!1}))).subscribe((function(){e.get(),e.isNodeModalVisible=!1}))}},e.prototype.delete=function(e){var t=this,i=e.id,r=e.displayName;this.confirmation.warn("AbpIdentity::OrganizationUnitDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[r]}).subscribe((function(e){e===n.Confirmation.Status.confirm&&t.organizationUnitService.delete(i).subscribe((function(){return t.get()}))}))},e.prototype.getParentName=function(e){var t=this.organizationUnits.find((function(t){return t.id===e}));return t?t.displayName:""},e.prototype.onDrop=function(e){if(e.node){var t=e.node.key;e.node.origin.parentId||-1!==e.pos||(t=null),this.move(e.dragNode.key,t)}},e.prototype.move=function(e,t){this.organizationUnitService.move(e,{newParentId:t}).subscribe(this.get)},e}();J.decorators=[{type:r.Component,args:[{selector:"abp-organization-units",template:'<div class="row entry-row">\r\n  <div class="col-auto">\r\n    <h1 class="content-header-title">{{ \'AbpIdentity::OrganizationUnits\' | abpLocalization }}</h1>\r\n  </div>\r\n  <div class="col-lg-auto pl-lg-0">\r\n    <abp-breadcrumb></abp-breadcrumb>\r\n  </div>\r\n  <div class="col">\r\n    <abp-page-toolbar [record]="organizationUnits"></abp-page-toolbar>\r\n  </div>\r\n</div>\r\n\r\n<div class="row">\r\n  <div *abpPermission="\'AbpIdentity.OrganizationUnits.ManageOU\'" class="col-12 col-lg-6 col-xl-5">\r\n    <div class="card">\r\n      <div class="card-header d-flex justify-content-between">\r\n        <h5>\r\n          {{ \'AbpIdentity::OrganizationTree\' | abpLocalization }}\r\n        </h5>\r\n        <button class="btn btn-sm btn-primary" (click)="add()">\r\n          <i class="fas fa-plus mr-1"></i> {{ \'AbpIdentity::AddRootUnit\' | abpLocalization }}\r\n        </button>\r\n      </div>\r\n      <div class="card-body" [abpLoading]="loading">\r\n        <abp-tree\r\n          [nodes]="nodes"\r\n          [(expandedKeys)]="expandedKeys"\r\n          [(selectedNode)]="selectedUnit"\r\n          [draggable]="true"\r\n          (dropOver)="onDrop($event)"\r\n        >\r\n          <ng-template abpTreeNodeTemplate let-node>\r\n            <i class="fas fa-folder fs-15px text-primary mr-1"></i>\r\n            {{ node.title }}\r\n          </ng-template>\r\n\r\n          <ng-template #menu let-node>\r\n            <li class="pointer" ngbDropdownItem (click)="edit(node.origin.entity)">\r\n              {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n            </li>\r\n            <li class="pointer" ngbDropdownItem (click)="addSubUnit(node.origin.entity)">\r\n              {{ \'AbpIdentity::AddSubUnit\' | abpLocalization }}\r\n            </li>\r\n            <li class="pointer" ngbDropdownItem (click)="delete(node.origin.entity)">\r\n              {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n            </li>\r\n          </ng-template>\r\n        </abp-tree>\r\n        <p *ngIf="!loading && !nodes?.length" class="text-muted">\r\n          {{ \'AbpIdentity::NoOrganizationUnits\' | abpLocalization }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    *abpPermission="\r\n      \'AbpIdentity.OrganizationUnits.ManageMembers || AbpIdentity.OrganizationUnits.ManageRoles\'\r\n    "\r\n    class="col-12 col-lg-6 col-xl-7"\r\n  >\r\n    <div class="card">\r\n      <ul ngbNav #nav="ngbNav" class="nav-tabs">\r\n        <li ngbNavItem *abpPermission="\'AbpIdentity.OrganizationUnits.ManageMembers\'">\r\n          <a ngbNavLink>{{ \'AbpIdentity::Members\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngIf="selectedUnit; else selectUnitMsg">\r\n              <abp-organization-members\r\n                *abpReplaceableTemplate="{\r\n                  inputs: {\r\n                    selectedOrganizationUnit: { value: selectedUnit }\r\n                  },\r\n                  componentKey: organizationMembersKey\r\n                }"\r\n                [selectedOrganizationUnit]="selectedUnit"\r\n              ></abp-organization-members>\r\n            </ng-container>\r\n            <ng-template #selectUnitMsg>\r\n              <p class="text-muted">\r\n                {{ \'AbpIdentity::SelectAnOrganizationUnitToSeeMembers\' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n        <li ngbNavItem *abpPermission="\'AbpIdentity.OrganizationUnits.ManageRoles\'">\r\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngIf="selectedUnit; else selectUnitMsg">\r\n              <abp-organization-roles\r\n                *abpReplaceableTemplate="{\r\n                  inputs: {\r\n                    selectedOrganizationUnit: { value: selectedUnit }\r\n                  },\r\n                  componentKey: organizationRolesKey\r\n                }"\r\n                [selectedOrganizationUnit]="selectedUnit"\r\n              ></abp-organization-roles>\r\n            </ng-container>\r\n            <ng-template #selectUnitMsg>\r\n              <p class="text-muted">\r\n                {{ \'AbpIdentity::SelectAnOrganizationUnitToSeeRoles\' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n      <div [ngbNavOutlet]="nav"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]="isNodeModalVisible" [busy]="isModalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>\r\n      {{\r\n        (nodeForm.get(\'id\').value\r\n          ? \'AbpIdentity::EditOrganizationUnit\'\r\n          : \'AbpIdentity::NewOrganizationUnit\'\r\n        ) | abpLocalization\r\n      }}\r\n    </h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class="mb-3" *ngIf="nodeForm.get(\'parentId\').value as parentId">\r\n      <strong>{{\r\n        \'AbpIdentity::OrganizationUnit:Parent{0}\' | abpLocalization: getParentName(parentId)\r\n      }}</strong>\r\n    </div>\r\n    <form [formGroup]="nodeForm" (ngSubmit)="save()" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]="selectedUnit"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="nodeForm?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.OrganizationUnitsComponent"}],styles:["\n      .fs-15px {\n        font-size: 15px;\n      }\n    "]}]}],J.ctorParameters=function(){return[{type:r.Injector},{type:o.Store},{type:K},{type:l.FormBuilder},{type:n.ConfirmationService}]};var ee,te=function(){function e(e,t,n,i,r){var o=this;this.list=e,this.confirmationService=t,this.roleService=n,this.store=i,this.injector=r,this.visiblePermissions=!1,this.modalBusy=!1,this.visibleClaims=!1,this.claimSubject={},this.onVisiblePermissionChange=function(e){o.visiblePermissions=e}}return e.prototype.createForm=function(){var e=new i.FormPropData(this.injector,this.selected);this.form=i.generateFormFromProps(e)},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new f(t))})).subscribe()},e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.openModal=function(){this.createForm(),this.isModalVisible=!0},e.prototype.onAdd=function(){this.selected={},this.openModal()},e.prototype.onEdit=function(e){var t=this;this.roleService.get(e).pipe(a.take(1)).subscribe((function(e){t.selected=e,t.openModal()}))},e.prototype.save=function(){var e=this;this.form.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new T(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,concurrencyStamp:this.selected.concurrencyStamp})):new C(this.form.value)).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.list.get(),e.isModalVisible=!1})))},e.prototype.delete=function(e,t){var i=this;this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===n.Confirmation.Status.confirm&&i.store.dispatch(new I(e)).subscribe((function(){return i.list.get()}))}))},e.prototype.onManageClaims=function(e){this.claimSubject={id:e,type:"roles"},this.visibleClaims=!0},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e}();te.decorators=[{type:r.Component,args:[{selector:"abp-roles",template:'<ng-container *ngIf="data$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="identity-roles-wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="save()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'R\' },\r\n      providerKey: { value: providerKey },\r\n      hideBadges: { value: true },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n  }"\r\n  [(visible)]="visiblePermissions"\r\n  [providerKey]="providerKey"\r\n  providerName="R"\r\n  [hideBadges]="true"\r\n>\r\n</abp-permission-management>\r\n\r\n<abp-claim-modal [(visible)]="visibleClaims" [subject]="claimSubject"></abp-claim-modal>\r\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.RolesComponent"}]}]}],te.ctorParameters=function(){return[{type:t.ListService},{type:n.ConfirmationService},{type:_},{type:o.Store},{type:r.Injector}]},te.propDecorators={modalContent:[{type:r.ViewChild,args:["modalContent"]}]},F([o.Select(e.ɵc.getRoles)],te.prototype,"data$",void 0),F([o.Select(e.ɵc.getRolesTotalCount)],te.prototype,"totalCount$",void 0),(ee=e.eIdentityTwoFactorBehaviour||(e.eIdentityTwoFactorBehaviour={}))[ee.Optional=0]="Optional",ee[ee.Disabled=1]="Disabled",ee[ee.Forced=2]="Forced";var ne,ie=t.mapEnumToOptions(e.eIdentityTwoFactorBehaviour);!function(e){e[e.Second=1]="Second",e[e.Minute=60]="Minute",e[e.Hour=3600]="Hour",e[e.Day=86400]="Day",e[e.Month=2592e3]="Month",e[e.Year=31536e3]="Year"}(ne||(ne={}));var re=function(){function e(e,i,r,o,a,s,c,p){var d=this;this.list=e,this.confirmationService=i,this.userService=r,this.fb=o,this.store=a,this.toasterService=s,this.injector=c,this.configState=p,this.setPasswordForm=this.fb.group({newPassword:["",V([l.Validators.required],n.getPasswordValidators(this.injector))]}),this.visiblePermissions=!1,this.modalBusy=!1,this.visibleClaims=!1,this.claimSubject={},this.organization={response:{},nodes:[],checkedKeys:[],expandedKeys:[],selectFn:function(){return!1}},this.twoFactor={isModalVisible:!1,checkboxValue:!1,isOptional:!1},this.lockForm=this.fb.group({lockoutDuration:[0,[l.Validators.required]],lockDurationType:[ne.Second]}),this.lockDurationTypeOptions=t.mapEnumToOptions(ne),this.trackByFn=function(e,t){return Object.keys(t)[0]||e},this.onVisiblePermissionChange=function(e){d.visiblePermissions=e}}return Object.defineProperty(e.prototype,"roleGroups",{get:function(){var e=this;return v.default((function(){return e.form.get("roleNames").controls}),[])},enumerable:!1,configurable:!0}),e.prototype.ngOnInit=function(){var e=ie[0].key;this.twoFactor.isOptional=this.configState.getFeature("Identity.TwoFactor")===e&&this.configState.getSetting("Abp.Identity.TwoFactor.Behaviour")===e,this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new k(t))})).subscribe()},e.prototype.buildForm=function(){var e=this,t=new i.FormPropData(this.injector,this.selected);this.form=i.generateFormFromProps(t),this.userService.getAssignableRoles().subscribe((function(t){var n=t.items;e.roles=n,e.form.addControl("roleNames",e.fb.array(e.roles.map((function(t){var n;return e.fb.group(((n={})[t.name]=[e.selected.id?!!v.default((function(){return e.selectedUserRoles.find((function(e){return e.id===t.id}))})):t.isDefault],n))}))))})),this.userService.getAvailableOrganizationUnits().subscribe((function(t){e.organization.response=t,e.organization.nodes=new s.TreeAdapter(t.items).getTree(),e.organization.expandedKeys=t.items.map((function(e){return e.id})),e.organization.checkedKeys=e.selectedOrganizationUnits.map((function(e){return e.id}))}))},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.onAdd=function(){this.selected={},this.selectedUserRoles=[],this.selectedOrganizationUnits=[],this.openModal()},e.prototype.onEdit=function(e){var t=this;this.userService.get(e).pipe(a.tap((function(e){return t.selected=e})),a.switchMap((function(){return t.store.dispatch(new x(e))})),a.pluck("IdentityState"),a.tap((function(e){return t.selectedUserRoles=e.selectedUserRoles||[]})),a.switchMap((function(){return t.userService.getOrganizationUnits(e)})),a.tap((function(e){return t.selectedOrganizationUnits=e})),a.take(1)).subscribe((function(){return t.openModal()}))},e.prototype.save=function(){var e=this;if(this.form.valid){this.modalBusy=!0;var t=this.form.value.roleNames,n=v.default((function(){return t.filter((function(e){return!!e[Object.keys(e)[0]]})).map((function(e){return Object.keys(e)[0]}))}),[]);this.store.dispatch(this.selected.id?new M(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,roleNames:n,organizationUnitIds:this.organization.checkedKeys})):new w(Object.assign(Object.assign({},this.form.value),{roleNames:n,organizationUnitIds:this.organization.checkedKeys}))).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.list.get(),e.isModalVisible=!1}))}},e.prototype.delete=function(e,t){var i=this;this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===n.Confirmation.Status.confirm&&i.store.dispatch(new O(e)).subscribe((function(){return i.list.get()}))}))},e.prototype.onManageClaims=function(e){this.claimSubject={id:e,type:"users"},this.visibleClaims=!0},e.prototype.unlock=function(e){var t=this;this.store.dispatch(new P(e)).subscribe((function(){t.toasterService.success("AbpIdentity::UserUnlocked"),t.list.get()}))},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e.prototype.setPassword=function(){var e=this;this.setPasswordForm.invalid||(this.modalBusy=!0,this.userService.updatePassword(this.selected.id,this.setPasswordForm.value).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isSetPasswordModalVisible=!1,e.selected={},e.setPasswordForm.reset()})))},e.prototype.generatePassword=function(){this.setPasswordForm.get("newPassword").setValue(t.generatePassword())},e.prototype.lock=function(){var e=this,t=this.lockForm.value,n=t.lockoutDuration,i=t.lockDurationType;this.modalBusy=!0,this.userService.lock(this.selected.id,n*i).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isLockModalVisible=!1,e.lockForm.reset({lockoutDuration:0,lockDurationType:ne.Second}),e.list.get()}))},e.prototype.setTwoFactor=function(){var e=this;this.modalBusy=!0,this.userService.setTwoFactorEnabled(this.selected.id,this.twoFactor.checkboxValue).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){return e.twoFactor.isModalVisible=!1}))},e}();re.decorators=[{type:r.Component,args:[{selector:"abp-users",template:'<ng-container *ngIf="data$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="identity-users-wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy" (disappear)="form = null">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form *ngIf="form" [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <ul id="user-nav-tabs" ngbNav #nav="ngbNav" class="nav-tabs">\r\n        <li id="user-informations" ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::UserInformations\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent\r\n            ><abp-extensible-form [selectedRecord]="selected"></abp-extensible-form\r\n          ></ng-template>\r\n        </li>\r\n        <li id="user-roles" ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\r\n              class="custom-checkbox custom-control mb-2"\r\n            >\r\n              <input\r\n                type="checkbox"\r\n                class="custom-control-input"\r\n                [attr.id]="\'roles-\' + i"\r\n                [formControl]="roleGroup.controls[roles[i].name]"\r\n              />\r\n              <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{\r\n                roles[i].name\r\n              }}</label>\r\n            </div></ng-template\r\n          >\r\n        </li>\r\n        <li id="user-organization-units" ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::OrganizationUnits\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <abp-tree\r\n              *ngIf="organization.nodes?.length; else noDataMessage"\r\n              [checkStrictly]="true"\r\n              [checkable]="true"\r\n              [nodes]="organization.nodes"\r\n              [isNodeSelected]="organization.selectFn"\r\n              [(checkedKeys)]="organization.checkedKeys"\r\n              [(expandedKeys)]="organization.expandedKeys"\r\n            ></abp-tree>\r\n\r\n            <ng-template #noDataMessage>\r\n              <p class="text-muted">\r\n                {{ \'AbpIdentity::NoOrganizationUnits\' | abpLocalization }}\r\n              </p>\r\n            </ng-template>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n      <div [ngbNavOutlet]="nav" class="mt-2 fade-in-top"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'U\' },\r\n      providerKey: { value: providerKey },\r\n      hideBadges: { value: true },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n  }"\r\n  [(visible)]="visiblePermissions"\r\n  [providerKey]="providerKey"\r\n  [hideBadges]="true"\r\n  providerName="U"\r\n>\r\n</abp-permission-management>\r\n\r\n<abp-claim-modal [(visible)]="visibleClaims" [subject]="claimSubject"></abp-claim-modal>\r\n\r\n<abp-modal [(visible)]="isSetPasswordModalVisible" [busy]="modalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::SetPassword\' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="setPasswordForm" (ngSubmit)="setPassword()" validateOnSubmit>\r\n      <div class="mt-2 fade-in-top">\r\n        <div class="form-group">\r\n          <label for="new-password">{{ \'AbpIdentity::Password\' | abpLocalization }}</label>\r\n          <div class="input-group">\r\n            <div class="col-10 p-0">\r\n              <input\r\n                type="text"\r\n                id="new-password"\r\n                class="form-control"\r\n                formControlName="newPassword"\r\n                autofocus\r\n              />\r\n            </div>\r\n            <div class="input-group-append col-2 p-0">\r\n              <button\r\n                class="btn btn-secondary mh-35"\r\n                id="generate-random-password-button"\r\n                type="button"\r\n                (click)="generatePassword()"\r\n              >\r\n                <i class="fa fa-refresh"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      (click)="setPassword()"\r\n      [disabled]="setPasswordForm?.invalid"\r\n      >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n    >\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-modal [(visible)]="isLockModalVisible" [busy]="modalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::Lock\' | abpLocalization }} - {{ selected.userName }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]="lockForm" (ngSubmit)="lock()" validateOnSubmit>\r\n      <div class="mt-2 fade-in-top">\r\n        <div class="form-group" [formGroup]="lockForm">\r\n          <label>{{ \'AbpIdentity::DisplayName:LockoutDuration\' | abpLocalization }}</label>\r\n          <input type="number" class="form-control" formControlName="lockoutDuration" />\r\n        </div>\r\n        <div class="form-group">\r\n          <label for="httpMethod">{{\r\n            \'AbpIdentity::DisplayName:LockDurationType\' | abpLocalization\r\n          }}</label\r\n          ><select class="custom-select form-control" formControlName="lockDurationType">\r\n            <option *ngFor="let option of lockDurationTypeOptions" [ngValue]="option.value">\r\n              {{ \'AbpIdentity::Enum:LockDurationType.\' + option.key | abpLocalization }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button\r\n      iconClass="fa fa-check"\r\n      (click)="lock()"\r\n      [disabled]="lockForm?.invalid || modalBusy"\r\n      >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n    >\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-modal [(visible)]="twoFactor.isModalVisible" [busy]="modalBusy" size="md">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ \'AbpIdentity::TwoFactor\' | abpLocalization }} - {{ selected.userName }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <div class="mt-2 fade-in-top">\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          class="custom-control-input"\r\n          id="two-factor-enabled"\r\n          [(ngModel)]="twoFactor.checkboxValue"\r\n        />\r\n        <label class="custom-control-label" for="two-factor-enabled">{{\r\n          \'AbpIdentity::DisplayName:TwoFactorEnabled\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="setTwoFactor()" [disabled]="modalBusy">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.UsersComponent"}],styles:["\n      .mh-35 {\n        max-height: 35px;\n      }\n    "]}]}],re.ctorParameters=function(){return[{type:t.ListService},{type:n.ConfirmationService},{type:G},{type:l.FormBuilder},{type:o.Store},{type:n.ToasterService},{type:r.Injector},{type:t.ConfigStateService}]},re.propDecorators={modalContent:[{type:r.ViewChild,args:["modalContent"]}]},F([o.Select(e.ɵc.getUsers)],re.prototype,"data$",void 0),F([o.Select(e.ɵc.getUsersTotalCount)],re.prototype,"totalCount$",void 0);var oe=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/security-logs/"+e},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/security-logs",params:{startTime:e.startTime,endTime:e.endTime,applicationName:e.applicationName,identity:e.identity,action:e.action,userName:e.userName,clientId:e.clientId,correlationId:e.correlationId,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getMy=function(e){return t.restService.request({method:"GET",url:"/api/identity/security-logs/my/"+e},{apiName:t.apiName})},this.getMyList=function(e){return t.restService.request({method:"GET",url:"/api/identity/security-logs/my",params:{startTime:e.startTime,endTime:e.endTime,applicationName:e.applicationName,identity:e.identity,action:e.action,userName:e.userName,clientId:e.clientId,correlationId:e.correlationId,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})}};oe.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new oe(r.ɵɵinject(t.RestService))},token:oe,providedIn:"root"}),oe.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],oe.ctorParameters=function(){return[{type:t.RestService}]};var ae=function(){function e(e,t){this.list=e,this.service=t,this.data={items:[],totalCount:0},this.filter={}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.service.getList(Object.assign(Object.assign({},t),e.filter))})).subscribe((function(t){return e.data=t}))},e}();ae.decorators=[{type:r.Component,args:[{selector:"abp-security-logs",template:'<div id="wrapper">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'AbpIdentity::SecurityLogs\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data.items"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n  <div class="card">\r\n    <div class="card-body pb-lg-3">\r\n      <div class="row" (keyup.enter)="list.get()">\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:StartTime\' | abpLocalization }}</label>\r\n            <input\r\n              #startDate="ngbDatepicker"\r\n              class="form-control"\r\n              name="start-date"\r\n              readonly\r\n              [(ngModel)]="filter.startTime"\r\n              [dayTemplate]="startDateTemplate"\r\n              ngbDatepicker\r\n              (click)="startDate.toggle()"\r\n            />\r\n            <ng-template\r\n              #startDateTemplate\r\n              let-date\r\n              let-focused="focused"\r\n              let-selected="selected"\r\n              let-currentMonth="currentMonth"\r\n            >\r\n              <div\r\n                class="btn-light custom-day"\r\n                [class.bg-primary]="selected"\r\n                [class.text-white]="selected"\r\n                [class.text-muted]="currentMonth !== date.month"\r\n                [class.ng-range]="date.after(filter.startTime) && date.before(filter.endTime)"\r\n                [class.ng-range-end]="date.equals(filter.endTime)"\r\n              >\r\n                {{ date.day }}\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:EndTime\' | abpLocalization }}</label>\r\n            <input\r\n              #endDate="ngbDatepicker"\r\n              class="form-control"\r\n              name="end-date"\r\n              readonly\r\n              [(ngModel)]="filter.endTime"\r\n              [dayTemplate]="endDateTemplate"\r\n              ngbDatepicker\r\n              (click)="endDate.toggle()"\r\n            />\r\n            <ng-template\r\n              #endDateTemplate\r\n              let-date\r\n              let-focused="focused"\r\n              let-selected="selected"\r\n              let-currentMonth="currentMonth"\r\n            >\r\n              <div\r\n                class="btn-light custom-day"\r\n                [class.bg-primary]="selected"\r\n                [class.text-white]="selected"\r\n                [class.text-muted]="currentMonth !== date.month"\r\n                [class.ng-range]="date.after(filter.startTime) && date.before(filter.endTime)"\r\n                [class.ng-range-end]="date.equals(filter.startTime)"\r\n              >\r\n                {{ date.day }}\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:Application\' | abpLocalization }}</label>\r\n            <input type="text" class="form-control" [(ngModel)]="filter.applicationName" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:Identity\' | abpLocalization }}</label>\r\n            <input type="text" class="form-control" [(ngModel)]="filter.identity" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:UserName\' | abpLocalization }}</label>\r\n            <input type="text" class="form-control" [(ngModel)]="filter.userName" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:Action\' | abpLocalization }}</label>\r\n            <input type="text" class="form-control" [(ngModel)]="filter.action" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:Client\' | abpLocalization }}</label>\r\n            <input type="text" class="form-control" [(ngModel)]="filter.clientId" />\r\n          </div>\r\n        </div>\r\n\r\n        <div class="col-md-6 col-lg-3">\r\n          <div class="form-group">\r\n            <label>{{ \'AbpIdentity::SecurityLogs:CorrelationId\' | abpLocalization }}</label>\r\n            <input type="text" class="form-control" [(ngModel)]="filter.correlationId" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class="row">\r\n        <div class="col-md-6 col-lg-3">\r\n          <button (click)="list.get()" class="mt-md-2 mb-md-2 btn btn-primary btn-block">\r\n            <i class="fas fa-search"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="card">\r\n    <div class="card-body p-0">\r\n      <abp-extensible-table\r\n        [data]="data.items"\r\n        [recordsTotal]="data.totalCount"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</div>\r\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.SecurityLogs"},{provide:p.NgbDateAdapter,useClass:i.DateAdapter}]}]}],ae.ctorParameters=function(){return[{type:t.ListService},{type:oe}]};var se,le,ce,pe,de,ue=i.EntityAction.createMany([{text:"AbpIdentity::Edit",action:function(e){e.getInjected(W).onEdit(e.record.id)},permission:"AbpIdentity.ClaimTypes.Update",visible:function(e){return!e.record.isStatic}},{text:"AbpIdentity::Delete",action:function(e){e.getInjected(W).delete(e.record.id,e.record.name)},permission:"AbpIdentity.ClaimTypes.Delete"}]),me=i.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::Name",sortable:!0,columnWidth:250},{type:"string",name:"valueType",displayName:"AbpIdentity::ValueType",sortable:!0,columnWidth:200,valueResolver:function(e){return d.of(e.getInjected(W).getTypeName(e.record.valueType))}},{type:"string",name:"description",displayName:"AbpIdentity::Description",sortable:!0,columnWidth:250},{type:"string",name:"regex",displayName:"AbpIdentity::Regex",sortable:!0,columnWidth:200},{type:"boolean",name:"required",displayName:"AbpIdentity::Required",sortable:!0,columnWidth:150},{type:"boolean",name:"isStatic",displayName:"AbpIdentity::IsStatic",sortable:!0,columnWidth:150}]),be=i.FormProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::Name",id:"name",validators:function(){return[l.Validators.required,l.Validators.maxLength(256)]}},{type:"boolean",name:"required",displayName:"AbpIdentity::Required",id:"required",defaultValue:!1},{type:"string",name:"regex",displayName:"AbpIdentity::Regex",id:"regex"},{type:"string",name:"regexDescription",displayName:"AbpIdentity::RegexDescription",id:"regex-description"},{type:"string",name:"description",displayName:"AbpIdentity::Description",id:"description"},{type:"number",name:"valueType",displayName:"AbpIdentity::ValueType",id:"value-type",defaultValue:0,options:function(){return d.of([{key:"String",value:0},{key:"Int",value:1},{key:"Boolean",value:2},{key:"DateTime",value:3}])}}]),ye=be,ge=i.ToolbarAction.createMany([{text:"AbpIdentity::NewClaimType",action:function(e){e.getInjected(W).onAdd()},permission:"AbpIdentity.ClaimTypes.Create",icon:"fa fa-plus"}]),ve=i.EntityAction.createMany([{text:"AbpIdentity::Delete",action:function(e){e.getInjected(X).delete(e.record.id,e.record.name)},permission:"AbpIdentity.OrganizationUnits.ManageMembers"}]),fe=i.EntityProp.createMany([{type:"string",name:"userName",displayName:"AbpIdentity::UserName",sortable:!0,columnWidth:180},{type:"string",name:"email",displayName:"AbpIdentity::EmailAddress",sortable:!0,columnWidth:200,valueResolver:function(e){var t=e.record,n=t.email,i=t.emailConfirmed;return d.of((n||"")+(i?'<i class="fa fa-check text-success ml-1"></i>':""))}}]),he=i.EntityAction.createMany([{text:"AbpIdentity::Delete",action:function(e){e.getInjected(Z).delete(e.record.id,e.record.name)},permission:"AbpIdentity.OrganizationUnits.ManageRoles"}]),Ie=i.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::RoleName",sortable:!0}]),Ce=i.FormProp.createMany([{type:"string",name:"displayName",displayName:"AbpIdentity::DisplayName",id:"organization-unit-display-name",validators:function(){return[l.Validators.required,l.Validators.maxLength(256)]}}]),Te=Ce,Ne=i.ToolbarAction.createMany([]),Se=i.EntityAction.createMany([{text:"AbpIdentity::Edit",action:function(e){e.getInjected(te).onEdit(e.record.id)},permission:"AbpIdentity.Roles.Update"},{text:"AbpIdentity::Claims",action:function(e){e.getInjected(te).onManageClaims(e.record.id)},permission:"AbpIdentity.Roles.Update"},{text:"AbpIdentity::Permissions",action:function(e){e.getInjected(te).openPermissionsModal(e.record.name)},permission:"AbpIdentity.Roles.ManagePermissions"},{text:"AbpIdentity::ChangeHistory",action:function(e){e.getInjected(u.SHOW_ENTITY_HISTORY)(e.record.id,"Volo.Abp.Identity.IdentityRole")},permission:"AbpIdentity.Roles.ViewChangeHistory",visible:function(e){return Boolean(e.getInjected(u.SHOW_ENTITY_HISTORY,null))}},{text:"AbpIdentity::Delete",action:function(e){e.getInjected(te).delete(e.record.id,e.record.name)},permission:"AbpIdentity.Roles.Delete",visible:function(e){return!e.record.isStatic}}]),Ae=i.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::RoleName",sortable:!0,valueResolver:function(e){var n=e.getInjected(t.LocalizationService),i=n.instant.bind(n),r=e.record,o=r.isDefault,a=r.isPublic,s=r.name;return d.of(s+(o?'<span class="badge badge-pill badge-success ml-1">'+i("AbpIdentity::DisplayName:IsDefault")+"</span>":"")+(a?'<span class="badge badge-pill badge-info ml-1">'+i("AbpIdentity::DisplayName:IsPublic")+"</span>":""))}}]),Ue=i.FormProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::RoleName",id:"role-name",disabled:function(e){return e.record&&e.record.isStatic},validators:function(){return[l.Validators.required]}},{type:"boolean",name:"isDefault",displayName:"AbpIdentity::DisplayName:IsDefault",id:"role-is-default",defaultValue:!1},{type:"boolean",name:"isPublic",displayName:"AbpIdentity::DisplayName:IsPublic",id:"role-is-public",defaultValue:!1}]),Re=Ue,ke=i.ToolbarAction.createMany([{text:"AbpIdentity::NewRole",action:function(e){e.getInjected(te).onAdd()},permission:"AbpIdentity.Roles.Create",icon:"fa fa-plus"}]),ze=i.EntityAction.createMany([]),Oe=i.EntityProp.createMany([{type:"string",name:"creationTime",displayName:"AbpIdentity::SecurityLogs:Time",sortable:!0,columnWidth:180,valueResolver:function(e){var n=e.getInjected(t.ConfigStateService),i=e.getInjected(m.DatePipe);return d.of(i.transform(e.record.creationTime,t.getShortDateShortTimeFormat(n)))}},{type:"string",name:"action",displayName:"AbpIdentity::SecurityLogs:Action",sortable:!0,columnWidth:180,valueResolver:function(e){return d.of('<div style="max-width: 160px" class="pointer abp-ellipsis-inline">'+(e.record.action||"")+"</div>")},action:function(e){var t=e.getInjected(ae);t.filter.action=e.record.action,t.list.get()}},{type:"string",name:"clientIpAddress",displayName:"AbpIdentity::SecurityLogs:IpAddress",sortable:!1,columnWidth:200,valueResolver:function(e){return d.of('<div style="max-width: 180px" class="abp-ellipsis-inline">'+(e.record.clientIpAddress||"")+"</div>")}},{type:"string",name:"browserInfo",displayName:"AbpIdentity::SecurityLogs:Browser",sortable:!1,columnWidth:200,valueResolver:function(e){return d.of('<div style="max-width: 180px" class="abp-ellipsis-inline">'+(e.record.browserInfo||"")+"</div>")}},{type:"string",name:"applicationName",displayName:"AbpIdentity::SecurityLogs:Application",sortable:!0,columnWidth:150,valueResolver:function(e){return d.of('<div style="max-width: 135px" class="pointer abp-ellipsis-inline">'+(e.record.applicationName||"")+"</div>")},action:function(e){var t=e.getInjected(ae);t.filter.applicationName=e.record.applicationName,t.list.get()}},{type:"string",name:"identity",displayName:"AbpIdentity::SecurityLogs:Identity",sortable:!0,columnWidth:150,valueResolver:function(e){return d.of('<div style="max-width: 135px" class="pointer abp-ellipsis-inline">'+(e.record.identity||"")+"</div>")},action:function(e){var t=e.getInjected(ae);t.filter.identity=e.record.identity,t.list.get()}},{type:"string",name:"userName",displayName:"AbpIdentity::SecurityLogs:UserName",sortable:!0,columnWidth:150,valueResolver:function(e){return d.of('<div style="max-width: 135px" class="pointer abp-ellipsis-inline">'+(e.record.userName||"")+"</div>")},action:function(e){var t=e.getInjected(ae);t.filter.userName=e.record.userName,t.list.get()}},{type:"string",name:"clientId",displayName:"AbpIdentity::SecurityLogs:Client",sortable:!0,columnWidth:320,valueResolver:function(e){return d.of('<div class="pointer">'+(e.record.clientId||"")+"</div>")},action:function(e){var t=e.getInjected(ae);t.filter.clientId=e.record.clientId,t.list.get()}},{type:"string",name:"correlationId",displayName:"AbpIdentity::SecurityLogs:CorrelationId",sortable:!0,columnWidth:320,valueResolver:function(e){return d.of('<div class="pointer">'+(e.record.correlationId||"")+"</div>")},action:function(e){var t=e.getInjected(ae);t.filter.correlationId=e.record.correlationId,t.list.get()}}]),we=i.ToolbarAction.createMany([]),Me=i.EntityAction.createMany([{text:"AbpIdentity::Edit",action:function(e){e.getInjected(re).onEdit(e.record.id)},permission:"AbpIdentity.Users.Update"},{text:"AbpIdentity::Claims",action:function(e){e.getInjected(re).onManageClaims(e.record.id)},permission:"AbpIdentity.Users.Update"},{text:"AbpIdentity::Lock",action:function(e){var t=e.getInjected(re);t.selected=e.record,t.isLockModalVisible=!0},permission:"AbpIdentity.Users.Update",visible:function(e){return!e.record.isLockedOut&&e.record.lockoutEnabled}},{text:"AbpIdentity::Unlock",action:function(e){e.getInjected(re).unlock(e.record.id)},permission:"AbpIdentity.Users.Update",visible:function(e){return e.record.isLockedOut}},{text:"AbpIdentity::Permissions",action:function(e){e.getInjected(re).openPermissionsModal(e.record.id)},permission:"AbpIdentity.Users.ManagePermissions"},{text:"AbpIdentity::ChangeHistory",action:function(e){e.getInjected(u.SHOW_ENTITY_HISTORY)(e.record.id,"Volo.Abp.Identity.IdentityUser")},permission:"AbpIdentity.Users.ViewChangeHistory",visible:function(e){return Boolean(e.getInjected(u.SHOW_ENTITY_HISTORY,null))}},{text:"AbpIdentity::SetPassword",action:function(e){var t=e.getInjected(re);t.selected=e.record,t.isSetPasswordModalVisible=!0},permission:"AbpIdentity.Users.Update"},{text:"AbpIdentity::TwoFactor",action:function(e){var t=e.getInjected(re);t.selected=e.record,t.userService.getTwoFactorEnabled(e.record.id).subscribe((function(e){t.twoFactor.checkboxValue=e,t.twoFactor.isModalVisible=!0}))},permission:"AbpIdentity.Users.Update",visible:function(e){return e.getInjected(re).twoFactor.isOptional}},{text:"AbpIdentity::Delete",action:function(e){e.getInjected(re).delete(e.record.id,e.record.name||e.record.userName)},permission:"AbpIdentity.Users.Delete"}]),xe=i.EntityProp.createMany([{type:"string",name:"userName",displayName:"AbpIdentity::UserName",sortable:!0,columnWidth:250,valueResolver:function(e){var n=e.getInjected(t.LocalizationService),i=n.instant.bind(n);return d.of(e.record.isLockedOut?'<i title="'+i("AbpIdentity::ThisUserIsLockedOutMessage")+'" class="fa fa-lock text-danger mr-1"></i><span class="opc-65">'+e.record.userName+"</span>":e.record.userName)}},{type:"string",name:"email",displayName:"AbpIdentity::EmailAddress",sortable:!0,columnWidth:250,valueResolver:function(e){var t=e.record,n=t.email,i=t.emailConfirmed;return d.of((n||"")+(i?'<i class="fa fa-check text-success ml-1"></i>':""))}},{type:"string",name:"phoneNumber",displayName:"AbpIdentity::PhoneNumber",sortable:!0,columnWidth:250,valueResolver:function(e){var t=e.record,n=t.phoneNumber,i=t.phoneNumberConfirmed;return d.of((n||"")+(i?'<i class="fa fa-check text-success ml-1"></i>':""))}}]),Pe=i.FormProp.createMany([{type:"string",name:"userName",displayName:"AbpIdentity::UserName",id:"user-name",validators:function(){return[l.Validators.required,l.Validators.maxLength(256)]}},{type:"password",name:"password",displayName:"AbpIdentity::Password",id:"password",autocomplete:"new-password",validators:function(e){return V([l.Validators.required],n.getPasswordValidators({get:e.getInjected}))}},{type:"string",name:"name",displayName:"AbpIdentity::DisplayName:Name",id:"name",validators:function(){return[l.Validators.maxLength(64)]}},{type:"string",name:"surname",displayName:"AbpIdentity::DisplayName:Surname",id:"surname",validators:function(){return[l.Validators.maxLength(64)]}},{type:"email",name:"email",displayName:"AbpIdentity::EmailAddress",id:"email",validators:function(){return[l.Validators.required,l.Validators.maxLength(256),l.Validators.email]}},{type:"string",name:"phoneNumber",displayName:"AbpIdentity::PhoneNumber",id:"phone-number",validators:function(){return[l.Validators.maxLength(16)]}},{type:"boolean",name:"lockoutEnabled",displayName:"AbpIdentity::DisplayName:LockoutEnabled",id:"lockout-checkbox",defaultValue:!0}]),Le=Pe.filter((function(e){return"password"!==e.name})),Ee=i.ToolbarAction.createMany([{text:"AbpIdentity::NewUser",action:function(e){e.getInjected(re).onAdd()},permission:"AbpIdentity.Users.Create",icon:"fa fa-plus"}]),je=((se={})["Identity.ClaimsComponent"]=ue,se["Identity.RolesComponent"]=Se,se["Identity.UsersComponent"]=Me,se["Identity.OrganizationMembersComponent"]=ve,se["Identity.OrganizationRolesComponent"]=he,se["Identity.SecurityLogs"]=ze,se),De=((le={})["Identity.ClaimsComponent"]=ge,le["Identity.RolesComponent"]=ke,le["Identity.UsersComponent"]=Ee,le["Identity.OrganizationUnitsComponent"]=Ne,le["Identity.SecurityLogs"]=we,le),Fe=((ce={})["Identity.ClaimsComponent"]=me,ce["Identity.RolesComponent"]=Ae,ce["Identity.UsersComponent"]=xe,ce["Identity.OrganizationMembersComponent"]=fe,ce["Identity.OrganizationRolesComponent"]=Ie,ce["Identity.SecurityLogs"]=Oe,ce),qe=((pe={})["Identity.ClaimsComponent"]=be,pe["Identity.RolesComponent"]=Ue,pe["Identity.UsersComponent"]=Pe,pe["Identity.OrganizationUnitsComponent"]=Ce,pe),Ve=((de={})["Identity.ClaimsComponent"]=ye,de["Identity.RolesComponent"]=Re,de["Identity.UsersComponent"]=Le,de["Identity.OrganizationUnitsComponent"]=Te,de),Be=new r.InjectionToken("IDENTITY_ENTITY_ACTION_CONTRIBUTORS"),_e=new r.InjectionToken("IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS"),Ge=new r.InjectionToken("IDENTITY_ENTITY_PROP_CONTRIBUTORS"),Ke=new r.InjectionToken("IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS"),Ye=new r.InjectionToken("IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS"),We=function(){function e(e){this.injector=e}return e.prototype.canActivate=function(){var e=this.injector.get(i.ExtensionsService),n=this.injector.get(Be,null)||{},r=this.injector.get(_e,null)||{},o=this.injector.get(Ge,null)||{},s=this.injector.get(Ke,null)||{},l=this.injector.get(Ye,null)||{},c=this.injector.get(t.ConfigStateService);return i.getObjectExtensionEntitiesFromStore(c,"Identity").pipe(a.map((function(e){var t;return(t={})["Identity.ClaimsComponent"]=e.ClaimType,t["Identity.RolesComponent"]=e.Role,t["Identity.UsersComponent"]=e.User,t["Identity.OrganizationUnitsComponent"]=e.OrganizationUnit,t})),i.mapEntitiesToContributors(c,"AbpIdentity"),a.tap((function(t){i.mergeWithDefaultActions(e.entityActions,je,n),i.mergeWithDefaultActions(e.toolbarActions,De,r),i.mergeWithDefaultProps(e.entityProps,Fe,t.prop,o),i.mergeWithDefaultProps(e.createFormProps,qe,t.createForm,s),i.mergeWithDefaultProps(e.editFormProps,Ve,t.editForm,l)})),a.mapTo(!0))},e}();We.decorators=[{type:r.Injectable}],We.ctorParameters=function(){return[{type:r.Injector}]};var He=function(){function e(e,t,n){this.roleService=e,this.userService=t,this.store=n,this.visibleChange=new r.EventEmitter,this.modalBusy=!1}return Object.defineProperty(e.prototype,"visible",{get:function(){return this._visible},set:function(e){this._visible!==e&&(this._visible=e,this.visibleChange.emit(e))},enumerable:!1,configurable:!0}),e.prototype.ngOnChanges=function(e){var t=e.visible,n=e.subject;n&&n.currentValue&&(this.service="roles"===n.currentValue.type?this.roleService:this.userService),t&&(t.currentValue?this.initModal():(this.newClaimType=null,this.newClaimValue=null,this.subjectClaims=null))},e.prototype.ngOnInit=function(){},e.prototype.initModal=function(){this.getClaimTypeNames(),this.getSubjectClaims(this.subject)},e.prototype.getClaimTypeNames=function(){var e=this;this.service.getAllClaimTypes().subscribe((function(t){return e.claimTypes=t}))},e.prototype.getSubjectClaims=function(e){var t=this;this.service.getClaims(e.id).pipe(a.take(1)).subscribe((function(e){return t.subjectClaims=e}))},e.prototype.addClaim=function(){var e;if(this.newClaimType&&this.newClaimValue){var t={claimType:this.newClaimType,claimValue:this.newClaimValue},n="roles"===this.subject.type?"roleId":"userId";t=Object.assign(((e={})[n]=this.subject.id,e),t),this.subjectClaims.push(t),this.newClaimType="",this.newClaimValue=""}},e.prototype.removeClaim=function(e){this.subjectClaims[e]&&(this.subjectClaims=this.subjectClaims.filter((function(t,n){return n!==e})))},e.prototype.save=function(){var e=this;this.modalBusy||(this.modalBusy=!0,this.service.updateClaims(this.subject.id,this.subjectClaims).pipe(a.take(1),a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){return e.visible=!1})))},e}();He.decorators=[{type:r.Component,args:[{selector:"abp-claim-modal",template:'<abp-modal size="md" [(visible)]="visible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h5 class="modal-title">{{ \'AbpIdentity::Claims\' | abpLocalization }}</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)="addClaim()">\r\n      <div class="form-row">\r\n        <div class="col col-sm-6">\r\n          <div class="form-group">\r\n            <label for="claimTypeSelect">{{ \'AbpIdentity::Type\' | abpLocalization }}</label\r\n            ><select\r\n              autofocus\r\n              id="claimTypeSelect"\r\n              class="custom-select form-control"\r\n              [(ngModel)]="newClaimType"\r\n              [ngModelOptions]="{ standalone: true }"\r\n            >\r\n              <option *ngFor="let type of claimTypes" [ngValue]="type.name">{{ type.name }}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class="col col-sm-6">\r\n          <div class="form-group">\r\n            <label for="newClaimValue">Value</label>\r\n            <input\r\n              required\r\n              id="newClaimValue"\r\n              type="text"\r\n              class="form-control"\r\n              [(ngModel)]="newClaimValue"\r\n              [ngModelOptions]="{ standalone: true }"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class="col col-sm-12 align-self-center">\r\n          <button class="btn btn-success btn-block" type="button" (click)="addClaim()">\r\n            <i class="fa fa-plus"></i>\r\n            {{ \'AbpIdentity::AddClaim\' | abpLocalization }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <hr class="my-4" />\r\n    <div class="willBeHidden" *ngIf="subjectClaims && subjectClaims.length">\r\n      <div class="input-group mb-3" *ngFor="let claim of subjectClaims; let i = index">\r\n        <div class="input-group-prepend">\r\n          <label class="input-group-text mw-100 fs-9">{{ claim.claimType }}</label>\r\n        </div>\r\n        <input type="text" class="form-control" [(ngModel)]="subjectClaims[i].claimValue" required />\r\n        <div class="input-group-append">\r\n          <button class="btn btn-danger deleteClaim" (click)="removeClaim(i)"><i class="fa fa-trash"></i></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>{{ \'AbpIdentity::Cancel\' | abpLocalization }}</button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()">{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n'}]}],He.ctorParameters=function(){return[{type:_},{type:G},{type:o.Store}]},He.propDecorators={subject:[{type:r.Input}],visible:[{type:r.Input}],visibleChange:[{type:r.Output}]};var Qe=function(){function e(e,t){this.list=e,this.userService=t,this.allUnits={items:[]}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.userService.getList(t)})).subscribe((function(t){e.allUnits=t}))},e}();Qe.decorators=[{type:r.Component,args:[{selector:"abp-organization-members-modal-body",template:'\n    <div id="data-tables-table-filter" class="data-tables-filter">\n      <div class="input-group">\n        <input\n          type="search"\n          class="form-control"\n          [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\n          [(ngModel)]="list.filter"\n        />\n        <div class="input-group-append">\n          <button class="btn btn-sm btn-primary" (click)="list.get()">\n            <i class="fas fa-search"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class="card">\n      <abp-extensible-table\n        actionsText=""\n        [data]="allUnits.items"\n        [recordsTotal]="allUnits.totalCount"\n        [actionsColumnWidth]="38"\n        [actionsTemplate]="customAction"\n        [list]="list"\n      ></abp-extensible-table>\n    </div>\n\n    <ng-template #customAction let-row>\n      <input\n        type="checkbox"\n        [(ngModel)]="checkedUnits[row.id]"\n        [disabled]="isCheckboxDisabled(row.id)"\n      />\n    </ng-template>\n  ',providers:[t.ListService]}]}],Qe.ctorParameters=function(){return[{type:t.ListService},{type:G}]},Qe.propDecorators={checkedUnits:[{type:r.Input}],isCheckboxDisabled:[{type:r.Input}]};var $e=function(){function e(e,t){this.list=e,this.roleService=t,this.allUnits={items:[]}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.roleService.getList(t)})).subscribe((function(t){e.allUnits=t}))},e}();$e.decorators=[{type:r.Component,args:[{selector:"abp-organization-roles-modal-body",template:'\n    <div class="card">\n      <abp-extensible-table\n        actionsText=""\n        [data]="allUnits.items"\n        [recordsTotal]="allUnits.totalCount"\n        [actionsColumnWidth]="38"\n        [actionsTemplate]="customAction"\n        [list]="list"\n      ></abp-extensible-table>\n    </div>\n\n    <ng-template #customAction let-row>\n      <input\n        type="checkbox"\n        [(ngModel)]="checkedUnits[row.id]"\n        [disabled]="isCheckboxDisabled(row.id)"\n      />\n    </ng-template>\n  ',providers:[t.ListService]}]}],$e.ctorParameters=function(){return[{type:t.ListService},{type:_}]},$e.propDecorators={checkedUnits:[{type:r.Input}],isCheckboxDisabled:[{type:r.Input}]};var Xe={requiredPolicy:"AbpIdentity.Roles",replaceableComponent:{key:"Identity.RolesComponent",defaultComponent:te}},Ze={requiredPolicy:"AbpIdentity.Users",replaceableComponent:{key:"Identity.UsersComponent",defaultComponent:re}},Je={requiredPolicy:"AbpIdentity.ClaimTypes",replaceableComponent:{key:"Identity.ClaimsComponent",defaultComponent:W}},et={requiredPolicy:"AbpIdentity.OrganizationUnits",replaceableComponent:{key:"Identity.OrganizationUnitsComponent",defaultComponent:J}},tt={requiredPolicy:"AbpIdentity.SecurityLogs",replaceableComponent:{key:"Identity.SecurityLogs",defaultComponent:ae}},nt=[{path:"",redirectTo:"roles",pathMatch:"full"},{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard,We],children:[{path:"roles",component:t.ReplaceableRouteContainerComponent,data:Xe},{path:"users",component:t.ReplaceableRouteContainerComponent,data:Ze},{path:"claim-types",component:t.ReplaceableRouteContainerComponent,data:Je},{path:"organization-units",component:t.ReplaceableRouteContainerComponent,data:et},{path:"security-logs",component:t.ReplaceableRouteContainerComponent,data:tt}]}],it=function(){};it.decorators=[{type:r.NgModule,args:[{imports:[g.RouterModule.forChild(nt)],exports:[g.RouterModule]}]}];var rt=function(){function e(){}return e.forChild=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[{provide:Be,useValue:t.entityActionContributors},{provide:_e,useValue:t.toolbarActionContributors},{provide:Ge,useValue:t.entityPropContributors},{provide:Ke,useValue:t.createFormPropContributors},{provide:Ye,useValue:t.editFormPropContributors},We]}},e.forLazy=function(n){return void 0===n&&(n={}),new t.LazyModuleFactory(e.forChild(n))},e}();rt.decorators=[{type:r.NgModule,args:[{declarations:[te,re,He,W,J,X,Qe,Z,$e,Q,ae],exports:[te,re,He,W,J,X,Qe,Z,$e,Q,ae],imports:[o.NgxsModule.forFeature([e.ɵc]),t.CoreModule,u.CommercialUiModule,it,p.NgbNavModule,n.ThemeSharedModule,p.NgbDropdownModule,p.NgbDatepickerModule,b.PermissionManagementModule,y.NgxValidateCoreModule,s.TreeModule],entryComponents:[]}]}];var ot,at=function(){function t(e){this.store=e}return t.prototype.getRoles=function(){return this.store.selectSnapshot(e.ɵc.getRoles)},t.prototype.getRolesTotalCount=function(){return this.store.selectSnapshot(e.ɵc.getRolesTotalCount)},t.prototype.getUsers=function(){return this.store.selectSnapshot(e.ɵc.getUsers)},t.prototype.getUsersTotalCount=function(){return this.store.selectSnapshot(e.ɵc.getUsersTotalCount)},t.prototype.getClaimTypes=function(){return this.store.selectSnapshot(e.ɵc.getClaimTypes)},t.prototype.getClaimTypesTotalCount=function(){return this.store.selectSnapshot(e.ɵc.getClaimTypesTotalCount)},t.prototype.dispatchGetRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(f.bind.apply(f,V([void 0],e))))},t.prototype.dispatchGetRoleById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(h.bind.apply(h,V([void 0],e))))},t.prototype.dispatchDeleteRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(I.bind.apply(I,V([void 0],e))))},t.prototype.dispatchCreateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(C.bind.apply(C,V([void 0],e))))},t.prototype.dispatchUpdateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(T.bind.apply(T,V([void 0],e))))},t.prototype.dispatchGetClaimTypes=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(N.bind.apply(N,V([void 0],e))))},t.prototype.dispatchGetClaimTypeById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(S.bind.apply(S,V([void 0],e))))},t.prototype.dispatchDeleteClaimType=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(A.bind.apply(A,V([void 0],e))))},t.prototype.dispatchCreateClaimType=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(U.bind.apply(U,V([void 0],e))))},t.prototype.dispatchUpdateClaimType=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(R.bind.apply(R,V([void 0],e))))},t.prototype.dispatchGetUsers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(k.bind.apply(k,V([void 0],e))))},t.prototype.dispatchGetUserById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(z.bind.apply(z,V([void 0],e))))},t.prototype.dispatchDeleteUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(O.bind.apply(O,V([void 0],e))))},t.prototype.dispatchCreateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(w.bind.apply(w,V([void 0],e))))},t.prototype.dispatchUpdateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(M.bind.apply(M,V([void 0],e))))},t.prototype.dispatchGetUserRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(x.bind.apply(x,V([void 0],e))))},t}();at.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new at(r.ɵɵinject(o.Store))},token:at,providedIn:"root"}),at.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],at.ctorParameters=function(){return[{type:o.Store}]},(ot=e.IdentityClaimValueType||(e.IdentityClaimValueType={}))[ot.String=0]="String",ot[ot.Int=1]="Int",ot[ot.Boolean=2]="Boolean",ot[ot.DateTime=3]="DateTime";var st=t.mapEnumToOptions(e.IdentityClaimValueType),lt=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.get=function(){return t.restService.request({method:"GET",url:"/api/identity/settings"},{apiName:t.apiName})},this.update=function(e){return t.restService.request({method:"PUT",url:"/api/identity/settings",body:e},{apiName:t.apiName})}};lt.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new lt(r.ɵɵinject(t.RestService))},token:lt,providedIn:"root"}),lt.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],lt.ctorParameters=function(){return[{type:t.RestService}]};var ct=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.findById=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/"+e},{apiName:t.apiName})},this.findByUserName=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/by-username/"+e},{apiName:t.apiName})},this.getCount=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/count",params:{filter:e.filter}},{apiName:t.apiName})},this.search=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/search",params:{sorting:e.sorting,filter:e.filter,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})}};ct.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new ct(r.ɵɵinject(t.RestService))},token:ct,providedIn:"root"}),ct.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],ct.ctorParameters=function(){return[{type:t.RestService}]};var pt=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.changePassword=function(e){return t.restService.request({method:"POST",url:"/api/identity/my-profile/change-password",body:e},{apiName:t.apiName})},this.get=function(){return t.restService.request({method:"GET",url:"/api/identity/my-profile"},{apiName:t.apiName})},this.getTwoFactorEnabled=function(){return t.restService.request({method:"GET",url:"/api/identity/my-profile/two-factor-enabled"},{apiName:t.apiName})},this.setTwoFactorEnabled=function(e){return t.restService.request({method:"POST",url:"/api/identity/my-profile/set-two-factor-enabled",params:{enabled:e}},{apiName:t.apiName})},this.update=function(e){return t.restService.request({method:"PUT",url:"/api/identity/my-profile",body:e},{apiName:t.apiName})}};pt.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new pt(r.ɵɵinject(t.RestService))},token:pt,providedIn:"root"}),pt.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],pt.ctorParameters=function(){return[{type:t.RestService}]},e.AbstractOrganizationUnitComponent=Q,e.ClaimsComponent=W,e.CreateClaimType=U,e.CreateRole=C,e.CreateUser=w,e.DEFAULT_IDENTITY_CREATE_FORM_PROPS=qe,e.DEFAULT_IDENTITY_EDIT_FORM_PROPS=Ve,e.DEFAULT_IDENTITY_ENTITY_ACTIONS=je,e.DEFAULT_IDENTITY_ENTITY_PROPS=Fe,e.DEFAULT_IDENTITY_TOOLBAR_ACTIONS=De,e.DeleteClaimType=A,e.DeleteRole=I,e.DeleteUser=O,e.GetClaimTypeById=S,e.GetClaimTypes=N,e.GetOrganizationUnits=L,e.GetRoleById=h,e.GetRoles=f,e.GetUserById=z,e.GetUserRoles=x,e.GetUsers=k,e.IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS=Ke,e.IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS=Ye,e.IDENTITY_ENTITY_ACTION_CONTRIBUTORS=Be,e.IDENTITY_ENTITY_PROP_CONTRIBUTORS=Ge,e.IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS=_e,e.IdentityClaimTypeService=B,e.IdentityExtensionsGuard=We,e.IdentityModule=rt,e.IdentityRoleService=_,e.IdentitySecurityLogService=oe,e.IdentitySettingsService=lt,e.IdentityState=e.ɵc,e.IdentityStateService=at,e.IdentityUserLookupService=ct,e.IdentityUserService=G,e.ORGANIZATION_UNIT_CONFIG=H,e.OrganizationMembersComponent=X,e.OrganizationRolesComponent=Z,e.OrganizationUnitService=K,e.OrganizationUnitsComponent=J,e.ProfileService=pt,e.RolesComponent=te,e.SecurityLogsComponent=ae,e.UnlockUser=P,e.UpdateClaimType=R,e.UpdateRole=T,e.UpdateUser=M,e.UsersComponent=re,e.identityClaimValueTypeOptions=st,e.identityTwoFactorBehaviourOptions=ie,e.ɵ0=Y,e.ɵ1=$,e.ɵa=te,e.ɵbd=re,e.ɵbe=He,e.ɵbf=W,e.ɵbg=J,e.ɵbh=X,e.ɵbi=H,e.ɵbj=Q,e.ɵbk=Qe,e.ɵbl=Z,e.ɵbm=$e,e.ɵbn=ae,e.ɵbo=oe,e.ɵbp=it,e.ɵbq=We,e.ɵbr=Be,e.ɵbs=_e,e.ɵbt=Ge,e.ɵbu=Ke,e.ɵbv=Ye,e.ɵd=_,e.ɵe=G,e.ɵf=B,e.ɵg=K,e.ɵh=f,e.ɵi=I,e.ɵj=C,e.ɵk=T,e.ɵl=N,e.ɵm=S,e.ɵn=A,e.ɵo=U,e.ɵp=R,e.ɵq=k,e.ɵr=O,e.ɵs=w,e.ɵt=M,e.ɵu=x,e.ɵv=P,e.ɵw=L,Object.defineProperty(e,"__esModule",{value:!0})}));