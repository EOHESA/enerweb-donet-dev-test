import { RestService, ListService, AbstractNgModelComponent, ConfigStateService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { Confirmation, ConfirmationService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.theme.shared/extensions';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, Injector, Input, ViewChild, TemplateRef, ChangeDetectionStrategy, forwardRef, InjectionToken, NgModule, EventEmitter, Output, ContentChildren } from '@angular/core';
import { Validators, FormBuilder, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { take, filter, switchMap, map, tap, mapTo } from 'rxjs/operators';
import { SHOW_ENTITY_HISTORY, CommercialUiModule } from '@volo/abp.commercial.ng.ui';
import { PermissionManagementModule } from '@abp/ng.permission-management';
import { NgbDateAdapter, NgbDateNativeAdapter, NgbDropdownModule, NgbNavModule, NgbDatepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { RouterModule } from '@angular/router';

class ApiResourcesService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentityServer';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity-server/api-resources`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity-server/api-resources`,
            params: { id },
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/api-resources/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/api-resources/all`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/api-resources`,
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity-server/api-resources/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
ApiResourcesService.ɵprov = ɵɵdefineInjectable({ factory: function ApiResourcesService_Factory() { return new ApiResourcesService(ɵɵinject(RestService)); }, token: ApiResourcesService, providedIn: "root" });
ApiResourcesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ApiResourcesService.ctorParameters = () => [
    { type: RestService }
];

const ɵ0 = "IdentityServer.ApiResourcesComponent" /* ApiResources */;
class ApiResourcesComponent {
    constructor(list, service, confirmationService, fb, injector) {
        this.list = list;
        this.service = service;
        this.confirmationService = confirmationService;
        this.fb = fb;
        this.injector = injector;
        this.createModalVisible = false;
        this.editModalVisible = false;
    }
    ngOnInit() { }
    onAdd() {
        this.newScopeForm = this.fb.group({
            name: ['', [Validators.required]],
            displayName: [''],
            description: [''],
            allowedAccessTokenSigningAlgorithms: [''],
            showInDiscoveryDocument: [false],
        });
        this.createModalVisible = true;
    }
    onEdit(id) {
        this.service
            .get(id)
            .pipe(take(1))
            .subscribe(selected => {
            this.editSelectedRecord = selected;
            this.editProperties = selected.properties;
            this.editSecrets = selected.secrets;
            const data = new FormPropData(this.injector, selected);
            this.editScopeForm = generateFormFromProps(data);
            this.editScopeForm.patchValue({
                scopes: selected.scopes.map(s => s.scope),
            });
            this.editClaims = selected.userClaims.map(claim => ({
                id: claim.apiResourceId,
                name: claim.type,
                left: true,
            }));
            this.editModalVisible = true;
        });
    }
    create(formValue) {
        this.service
            .create(formValue)
            .pipe(take(1))
            .subscribe(_ => {
            this.createModalVisible = false;
            this.list.get();
        });
    }
    edit(formValue) {
        const request = Object.assign(Object.assign({}, formValue), { scopes: formValue.scopes.map(scope => ({ scope })) });
        this.service
            .update(this.editSelectedRecord.id, request)
            .pipe(take(1))
            .subscribe(_ => {
            this.editModalVisible = false;
            this.list.get();
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentityServer::ApiResourcesDeletionWarningMessage', 'AbpIdentityServer::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .pipe(filter(status => status === Confirmation.Status.confirm), switchMap(_ => this.service.delete(id)), take(1))
            .subscribe(_ => {
            this.list.get();
        });
    }
}
ApiResourcesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-api-resources',
                template: "<abp-identity-server-entity-base\r\n  [list]=\"list\"\r\n  [service]=\"service\"\r\n  entityName=\"ApiResources\"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"createModalVisible\"\r\n  [(visible)]=\"createModalVisible\"\r\n  (save)=\"create($event)\"\r\n>\r\n  <abp-identity-server-modal-info-tab [form]=\"newScopeForm\"></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab></abp-identity-server-modal-claims-tab>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"editModalVisible\"\r\n  [(visible)]=\"editModalVisible\"\r\n  (save)=\"edit($event)\"\r\n  type=\"Edit\"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]=\"editScopeForm\"\r\n    [selectedRecord]=\"editSelectedRecord\"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab\r\n    [claims]=\"editClaims\"\r\n  ></abp-identity-server-modal-claims-tab>\r\n  <abp-identity-server-modal-secrets-tab\r\n    [selectedSecrets]=\"editSecrets\"\r\n  ></abp-identity-server-modal-secrets-tab>\r\n  <abp-identity-server-modal-properties-tab\r\n    [selectedProperties]=\"editProperties\"\r\n  ></abp-identity-server-modal-properties-tab>\r\n</abp-identity-server-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0,
                    },
                ]
            },] }
];
ApiResourcesComponent.ctorParameters = () => [
    { type: ListService },
    { type: ApiResourcesService },
    { type: ConfirmationService },
    { type: FormBuilder },
    { type: Injector }
];

class ApiScopesService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentityServer';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity-server/apiScopes`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity-server/apiScopes`,
            params: { id },
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/apiScopes/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/apiScopes/all`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/apiScopes`,
            params: {
                filter: input.filter,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity-server/apiScopes/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
ApiScopesService.ɵprov = ɵɵdefineInjectable({ factory: function ApiScopesService_Factory() { return new ApiScopesService(ɵɵinject(RestService)); }, token: ApiScopesService, providedIn: "root" });
ApiScopesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ApiScopesService.ctorParameters = () => [
    { type: RestService }
];

const ɵ0$1 = "IdentityServer.ApiScopesComponent" /* ApiScopes */;
class ApiScopesComponent {
    constructor(list, service, fb, confirmationService, injector) {
        this.list = list;
        this.service = service;
        this.fb = fb;
        this.confirmationService = confirmationService;
        this.injector = injector;
        this.createModalVisible = false;
        this.editModalVisible = false;
    }
    ngOnInit() { }
    onEdit(id) {
        this.service
            .get(id)
            .pipe(take(1))
            .subscribe(result => {
            this.editSelectedRecord = result;
            const data = new FormPropData(this.injector, result);
            this.editScopeForm = generateFormFromProps(data);
            this.editClaims = result.userClaims.map(claim => ({
                id: claim.apiScopeId,
                name: claim.type,
                left: true,
            }));
            this.editModalVisible = true;
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentityServer::ApiScopesDeletionWarningMessage', 'AbpIdentityServer::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .pipe(filter(status => status === Confirmation.Status.confirm), switchMap(_ => this.service.delete(id)), take(1))
            .subscribe(_ => {
            this.list.get();
        });
    }
    onAdd() {
        this.newScopeForm = this.fb.group({
            name: ['', [Validators.required]],
            displayName: [''],
            description: [''],
            required: [false],
            enabled: [false],
            emphasize: [false],
            showInDiscoveryDocument: [false],
        });
        this.createModalVisible = true;
    }
    create(formValue) {
        this.service
            .create(Object.assign(Object.assign({}, formValue), { properties: [] }))
            .pipe(take(1))
            .subscribe(_ => {
            this.createModalVisible = false;
            this.list.get();
        });
    }
    edit(formValue) {
        this.service
            .update(this.editSelectedRecord.id, formValue)
            .pipe(take(1))
            .subscribe(_ => {
            this.editModalVisible = false;
            this.list.get();
        });
    }
}
ApiScopesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-api-scopes',
                template: "<abp-identity-server-entity-base\r\n  [list]=\"list\"\r\n  [service]=\"service\"\r\n  entityName=\"ApiScopes\"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"createModalVisible\"\r\n  [(visible)]=\"createModalVisible\"\r\n  (save)=\"create($event)\"\r\n>\r\n  <abp-identity-server-modal-info-tab [form]=\"newScopeForm\"></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab></abp-identity-server-modal-claims-tab>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"editModalVisible\"\r\n  [(visible)]=\"editModalVisible\"\r\n  (save)=\"edit($event)\"\r\n  type=\"Edit\"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]=\"editScopeForm\"\r\n    [selectedRecord]=\"editSelectedRecord\"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab\r\n    [claims]=\"editClaims\"\r\n  ></abp-identity-server-modal-claims-tab>\r\n  <abp-identity-server-modal-properties-tab\r\n    [selectedProperties]=\"editSelectedRecord.properties\"\r\n  ></abp-identity-server-modal-properties-tab>\r\n</abp-identity-server-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$1,
                    },
                ]
            },] }
];
ApiScopesComponent.ctorParameters = () => [
    { type: ListService },
    { type: ApiScopesService },
    { type: FormBuilder },
    { type: ConfirmationService },
    { type: Injector }
];

class ClientsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentityServer';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity-server/clients`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity-server/clients`,
            params: { id },
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/clients/${id}`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/clients`,
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity-server/clients/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
ClientsService.ɵprov = ɵɵdefineInjectable({ factory: function ClientsService_Factory() { return new ClientsService(ɵɵinject(RestService)); }, token: ClientsService, providedIn: "root" });
ClientsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ClientsService.ctorParameters = () => [
    { type: RestService }
];

class IdentityResourcesService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentityServer';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/identity-server/identity-resources`,
            body: input,
        }, { apiName: this.apiName });
        this.createStandardResources = () => this.restService.request({
            method: 'POST',
            url: `/api/identity-server/identity-resources/create-standard-resources`,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity-server/identity-resources`,
            params: { id },
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/identity-resources/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/identity-resources/all`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/identity-resources`,
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity-server/identity-resources/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityResourcesService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityResourcesService_Factory() { return new IdentityResourcesService(ɵɵinject(RestService)); }, token: IdentityResourcesService, providedIn: "root" });
IdentityResourcesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityResourcesService.ctorParameters = () => [
    { type: RestService }
];

const ɵ0$2 = "IdentityServer.ClientsComponent" /* Clients */;
class ClientsComponent {
    constructor(list, service, apiResourceService, identityResourceService, confirmationService, fb, injector) {
        this.list = list;
        this.service = service;
        this.apiResourceService = apiResourceService;
        this.identityResourceService = identityResourceService;
        this.confirmationService = confirmationService;
        this.fb = fb;
        this.injector = injector;
        this.createModalVisible = false;
        this.editModalVisible = false;
        this.identityResourcesPicklistValue = [];
        this.apiResourcesPicklistValue = [];
        this.visiblePermissions = false;
        this.onVisiblePermissionChange = (value) => {
            this.visiblePermissions = value;
        };
    }
    setEditApiResources(result) {
        const isAllowedResource = createAllowedResourceFinder(result);
        this.editApiResources = this.apiResourcesPicklistValue.map(resource => (Object.assign(Object.assign({}, resource), { left: isAllowedResource(resource) })));
    }
    setEditIdentityResources(result) {
        const isAllowedResource = createAllowedResourceFinder(result);
        this.editIdentityResources = this.identityResourcesPicklistValue.map(resource => (Object.assign(Object.assign({}, resource), { left: isAllowedResource(resource) })));
    }
    setEditGrantTypes(result) {
        this.editGrantTypes = result.allowedGrantTypes.map(grant => grant.grantType);
    }
    ngOnInit() {
        this.apiResourceService
            .getAllList()
            .pipe(mapToResources())
            .subscribe(list => (this.apiResourcesPicklistValue = list));
        this.identityResourceService
            .getAllList()
            .pipe(mapToResources())
            .subscribe(list => (this.identityResourcesPicklistValue = list));
    }
    openPermissionsModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
    onAdd() {
        this.newScopeForm = this.fb.group({
            clientId: ['', [Validators.required]],
            clientName: ['', [Validators.required]],
            description: [''],
            clientUri: [''],
            logoUri: [''],
            requireConsent: [false],
        });
        this.createModalVisible = true;
    }
    create(formValue) {
        this.service
            .create(Object.assign(Object.assign({}, formValue), { scopes: [...formValue.identityResources, ...formValue.apiResources].map(resource => resource.name) }))
            .subscribe(_ => {
            this.createModalVisible = false;
            this.list.get();
        });
    }
    onEdit(id) {
        this.service.get(id).subscribe(result => {
            this.editSelectedRecord = result;
            const data = new FormPropData(this.injector, result);
            this.editScopeForm = generateFormFromProps(data);
            this.editModalVisible = true;
            this.setEditApiResources(result);
            this.setEditIdentityResources(result);
            this.setEditGrantTypes(result);
        });
    }
    delete({ id, clientId }) {
        this.confirmationService
            .warn('AbpIdentityServer::ClientsDeletionWarningMessage', 'AbpIdentityServer::AreYouSure', {
            messageLocalizationParams: [clientId],
        })
            .pipe(filter(status => status === Confirmation.Status.confirm), switchMap(_ => this.service.delete(id)))
            .subscribe(_ => {
            this.list.get();
        });
    }
    edit(formValue) {
        this.service.update(this.editSelectedRecord.id, this.mapEditForm(formValue)).subscribe(_ => {
            this.editModalVisible = false;
            this.list.get();
        });
    }
    mapEditForm(formValue) {
        const postLogoutRedirectUris = formValue.postLogoutRedirectUris.map(val => val.postLogoutRedirectUri);
        const redirectUris = formValue.redirectUris.map(val => val.redirectUri);
        const allowedCorsOrigins = formValue.allowedCorsOrigins.map(val => val.origin);
        const identityProviderRestrictions = formValue.identityProviderRestrictions.map(val => val.provider);
        const scopes = formValue.apiResources.concat(formValue.identityResources).map(res => res.name);
        return Object.assign(Object.assign({}, formValue), { postLogoutRedirectUris,
            redirectUris,
            allowedCorsOrigins,
            identityProviderRestrictions,
            scopes });
    }
}
ClientsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-clients',
                template: "<abp-identity-server-entity-base\r\n  [list]=\"list\"\r\n  [service]=\"service\"\r\n  entityName=\"Clients\"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"createModalVisible\"\r\n  [(visible)]=\"createModalVisible\"\r\n  (save)=\"create($event)\"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]=\"newScopeForm\"\r\n    title=\"Basic\"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-clients-modal-uris-tab></abp-clients-modal-uris-tab>\r\n  <abp-identity-server-modal-secrets-tab></abp-identity-server-modal-secrets-tab>\r\n\r\n  <abp-identity-server-modal-tab-group title=\"Resources\">\r\n    <abp-clients-modal-resources-tab\r\n      title=\"IdentityResources\"\r\n      [resources]=\"identityResourcesPicklistValue\"\r\n      fieldName=\"identityResources\"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n    <abp-clients-modal-resources-tab\r\n      title=\"ApiResources\"\r\n      [resources]=\"apiResourcesPicklistValue\"\r\n      fieldName=\"apiResources\"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"editModalVisible\"\r\n  [(visible)]=\"editModalVisible\"\r\n  (save)=\"edit($event)\"\r\n  type=\"Edit\"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    title=\"Details\"\r\n    [form]=\"editScopeForm\"\r\n    [selectedRecord]=\"editSelectedRecord\"\r\n  ></abp-identity-server-modal-info-tab>\r\n\r\n  <abp-identity-server-modal-tab-group title=\"ApplicationUrls\">\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title=\"Callback\"\r\n      formTitle=\"CallbackUrl\"\r\n      [fields]=\"[{ name: 'redirectUri', title: 'Uri' }]\"\r\n      fieldName=\"redirectUris\"\r\n      [selected]=\"editSelectedRecord?.redirectUris\"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title=\"Signout\"\r\n      formTitle=\"SignoutUrl\"\r\n      [fields]=\"[{ name: 'postLogoutRedirectUri', title: 'Uri' }]\"\r\n      fieldName=\"postLogoutRedirectUris\"\r\n      [selected]=\"editSelectedRecord?.postLogoutRedirectUris\"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title=\"CORS\"\r\n      formTitle=\"AllowedCorsOrigins\"\r\n      [fields]=\"[{ name: 'origin', title: 'Uri' }]\"\r\n      fieldName=\"allowedCorsOrigins\"\r\n      [selected]=\"editSelectedRecord?.allowedCorsOrigins\"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n  <abp-identity-server-modal-secrets-tab\r\n    [selectedSecrets]=\"editSelectedRecord?.clientSecrets\"\r\n    fieldName=\"clientSecrets\"\r\n  ></abp-identity-server-modal-secrets-tab>\r\n  <abp-identity-server-modal-tab-group title=\"Resources\">\r\n    <abp-clients-modal-resources-tab\r\n      title=\"IdentityResources\"\r\n      [resources]=\"editIdentityResources\"\r\n      fieldName=\"identityResources\"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n    <abp-clients-modal-resources-tab\r\n      title=\"ApiResources\"\r\n      [resources]=\"editApiResources\"\r\n      fieldName=\"apiResources\"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n\r\n  <abp-identity-server-modal-tab-group title=\"Advanced\">\r\n    <abp-clients-modal-tokens-tab [selected]=\"editSelectedRecord\"></abp-clients-modal-tokens-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title=\"Claims\"\r\n      [fields]=\"[\r\n        { name: 'type', title: 'Type' },\r\n        { name: 'value', title: 'Value' }\r\n      ]\"\r\n      fieldName=\"claims\"\r\n      [selected]=\"editSelectedRecord?.claims\"\r\n      [checkboxValue]=\"editSelectedRecord?.alwaysSendClientClaims\"\r\n      checkboxFieldName=\"alwaysSendClientClaims\"\r\n      checkboxLabel=\"AlwaysSendClientClaims\"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-clients-modal-grant-types-tab\r\n      [selected]=\"editGrantTypes\"\r\n    ></abp-clients-modal-grant-types-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title=\"Restrictions\"\r\n      [fields]=\"[{ name: 'provider', title: 'Name' }]\"\r\n      fieldName=\"identityProviderRestrictions\"\r\n      [selected]=\"editSelectedRecord?.identityProviderRestrictions\"\r\n      [checkboxValue]=\"editSelectedRecord?.enableLocalLogin\"\r\n      checkboxFieldName=\"enableLocalLogin\"\r\n      checkboxLabel=\"EnableLocalLogin\"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-identity-server-modal-properties-tab\r\n      [selectedProperties]=\"editSelectedRecord.properties\"\r\n    ></abp-identity-server-modal-properties-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n</abp-identity-server-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'C' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: 'PermissionManagement.PermissionManagementComponent'\r\n  }\"\r\n  [(visible)]=\"visiblePermissions\"\r\n  providerName=\"C\"\r\n  [providerKey]=\"providerKey\"\r\n>\r\n</abp-permission-management>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$2,
                    },
                ]
            },] }
];
ClientsComponent.ctorParameters = () => [
    { type: ListService },
    { type: ClientsService },
    { type: ApiResourcesService },
    { type: IdentityResourcesService },
    { type: ConfirmationService },
    { type: FormBuilder },
    { type: Injector }
];
function createAllowedResourceFinder(result) {
    return ({ name }) => result.allowedScopes.findIndex(s => s.scope === name) > -1;
}
function mapToResources() {
    return map((items) => items.map(item => ({
        displayName: item.displayName || item.name,
        name: item.name,
        left: false,
    })));
}

class IdentityServerModalTabComponent {
    // should be overriden by children
    isValid() {
        return true;
    }
    // should be overriden by children
    getValue() {
        return {};
    }
}
IdentityServerModalTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-tab',
                template: `<ng-template><ng-content></ng-content></ng-template>`
            },] }
];
IdentityServerModalTabComponent.propDecorators = {
    title: [{ type: Input }],
    template: [{ type: ViewChild, args: [TemplateRef,] }]
};

class ClientsModalResourcesTabComponent extends IdentityServerModalTabComponent {
    constructor() {
        super(...arguments);
        this.fieldName = 'scopes';
    }
    getValue() {
        return { [this.fieldName]: this.resources.filter(res => res.left) };
    }
}
ClientsModalResourcesTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-clients-modal-resources-tab',
                template: "<ng-template>\r\n  <h2>{{ 'AbpIdentityServer::' + title | abpLocalization }}</h2>\r\n\r\n  <abp-picklist\r\n    trackByProp=\"name\"\r\n    bindLabel=\"displayName\"\r\n    [leftListTitle]=\"'AbpIdentityServer::Assigned' | abpLocalization\"\r\n    [rightListTitle]=\"'AbpIdentityServer::Available' | abpLocalization\"\r\n    [(ngModel)]=\"resources\"\r\n  ></abp-picklist>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: ClientsModalResourcesTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ClientsModalResourcesTabComponent.propDecorators = {
    resources: [{ type: Input }],
    fieldName: [{ type: Input }]
};

class ClientsModalTokensTabComponent extends IdentityServerModalTabComponent {
    constructor(fb) {
        super();
        this.fb = fb;
        this.title = 'Tokens';
        this.form = this.fb.group({
            accessTokenLifetime: [0],
            accessTokenType: [0],
            consentLifetime: [0],
            pairWiseSubjectSalt: [''],
            includeJwtId: [false],
            userSsoLifetime: [0],
            userCodeType: [''],
            deviceCodeLifetime: [0],
            requirePkce: [false],
            requireClientSecret: [false],
        });
    }
    set selected(val) {
        this.form.patchValue(val);
    }
    getValue() {
        return this.form.value;
    }
}
ClientsModalTokensTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-clients-modal-tokens-tab',
                template: "<ng-template>\r\n  <h3>{{ 'AbpIdentityServer::' + title | abpLocalization }}</h3>\r\n  <div [formGroup]=\"form\">\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_AccessTokenLifetime\">{{\r\n        'AbpIdentityServer::AccessTokenLifetime' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"number\"\r\n        id=\"Client_AccessTokenLifetime\"\r\n        name=\"Client.AccessTokenLifetime\"\r\n        class=\"form-control\"\r\n        formControlName=\"accessTokenLifetime\"\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_AccessTokenType\">{{\r\n        'AbpIdentityServer::AccessTokenType' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"number\"\r\n        id=\"Client_AccessTokenType\"\r\n        name=\"Client.AccessTokenType\"\r\n        class=\"form-control\"\r\n        formControlName=\"accessTokenType\"\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_ConsentLifetime\">{{\r\n        'AbpIdentityServer::ConsentLifetime' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"number\"\r\n        id=\"Client_ConsentLifetime\"\r\n        name=\"Client.ConsentLifetime\"\r\n        class=\"form-control\"\r\n        formControlName=\"consentLifetime\"\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_PairWiseSubjectSalt\">{{\r\n        'AbpIdentityServer::PairWiseSubjectSalt' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"text\"\r\n        data-val=\"true\"\r\n        id=\"Client_PairWiseSubjectSalt\"\r\n        name=\"Client.PairWiseSubjectSalt\"\r\n        class=\"form-control\"\r\n        formControlName=\"pairWiseSubjectSalt\"\r\n      />\r\n    </div>\r\n    <div class=\"custom-checkbox custom-control mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"Client_IncludeJwtId\"\r\n        name=\"Client.IncludeJwtId\"\r\n        class=\"custom-control-input\"\r\n        formControlName=\"includeJwtId\"\r\n      /><label class=\"custom-control-label\" for=\"Client_IncludeJwtId\">{{\r\n        'AbpIdentityServer::IncludeJwtId' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_UserSsoLifetime\">{{\r\n        'AbpIdentityServer::UserSsoLifetime' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"number\"\r\n        id=\"Client_UserSsoLifetime\"\r\n        name=\"Client.UserSsoLifetime\"\r\n        class=\"form-control\"\r\n        formControlName=\"userSsoLifetime\"\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_UserCodeType\">{{\r\n        'AbpIdentityServer::UserCodeType' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"text\"\r\n        id=\"Client_UserCodeType\"\r\n        name=\"Client.UserCodeType\"\r\n        value=\"\"\r\n        class=\"form-control\"\r\n        formControlName=\"userCodeType\"\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"Client_DeviceCodeLifetime\">{{\r\n        'AbpIdentityServer::DeviceCodeLifetime' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type=\"number\"\r\n        id=\"Client_DeviceCodeLifetime\"\r\n        name=\"Client.DeviceCodeLifetime\"\r\n        class=\"form-control\"\r\n        formControlName=\"deviceCodeLifetime\"\r\n      />\r\n    </div>\r\n    <div class=\"custom-checkbox custom-control mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"client-require-pkce\"\r\n        class=\"custom-control-input\"\r\n        formControlName=\"requirePkce\"\r\n      /><label class=\"custom-control-label\" for=\"client-require-pkce\">{{\r\n        'AbpIdentityServer::RequirePkce' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class=\"custom-checkbox custom-control mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"client-require-client-secret\"\r\n        class=\"custom-control-input\"\r\n        formControlName=\"requireClientSecret\"\r\n      /><label class=\"custom-control-label\" for=\"client-require-client-secret\">{{\r\n        'AbpIdentityServer::RequireClientSecret' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: ClientsModalTokensTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ClientsModalTokensTabComponent.ctorParameters = () => [
    { type: FormBuilder }
];
ClientsModalTokensTabComponent.propDecorators = {
    selected: [{ type: Input }]
};

class ClientsModalUrisTabComponent extends IdentityServerModalTabComponent {
    constructor() {
        super(...arguments);
        this.title = 'Uris';
    }
    getValue() {
        return {
            callbackUrl: this.callbackUrl,
            logoutUrl: this.logoutUrl,
        };
    }
}
ClientsModalUrisTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-clients-modal-uris-tab',
                template: "<ng-template>\r\n  <div class=\"form-group\">\r\n    <label for=\"client-callback-url\">{{ 'AbpIdentityServer::CallbackUrl' | abpLocalization }}</label\r\n    ><input\r\n      type=\"text\"\r\n      id=\"client-callback-url\"\r\n      name=\"client-callback-url\"\r\n      class=\"form-control\"\r\n      [(ngModel)]=\"callbackUrl\"\r\n    />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"client-logout-url\">{{ 'AbpIdentityServer::LogoutUrl' | abpLocalization }}</label\r\n    ><input\r\n      type=\"text\"\r\n      id=\"client-logout-url\"\r\n      name=\"client-logout-url\"\r\n      class=\"form-control\"\r\n      [(ngModel)]=\"logoutUrl\"\r\n    />\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: ClientsModalUrisTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];

const ɵ0$3 = "IdentityServer.IdentityResourcesComponent" /* IdentityResources */;
class IdentityResourcesComponent {
    constructor(list, service, confirmationService, fb, injector) {
        this.list = list;
        this.service = service;
        this.confirmationService = confirmationService;
        this.fb = fb;
        this.injector = injector;
        this.createModalVisible = false;
        this.editModalVisible = false;
    }
    ngOnInit() { }
    onAdd() {
        this.newScopeForm = this.fb.group({
            name: ['', [Validators.required]],
            displayName: [''],
            description: [''],
            required: [false],
            enabled: [true],
            emphasize: [false],
            showInDiscoveryDocument: [true],
        });
        this.createModalVisible = true;
    }
    create(formValue) {
        this.service
            .create(Object.assign(Object.assign({}, formValue), { properties: [] }))
            .pipe(take(1))
            .subscribe(_ => {
            this.createModalVisible = false;
            this.list.get();
        });
    }
    onEdit(id) {
        this.service
            .get(id)
            .pipe(take(1))
            .subscribe(result => {
            this.editSelectedRecord = result;
            const data = new FormPropData(this.injector, result);
            this.editScopeForm = generateFormFromProps(data);
            this.editClaims = result.userClaims.map(claim => ({
                id: claim.identityResourceId,
                name: claim.type,
                left: true,
            }));
            this.editProperties = result.properties;
            this.editModalVisible = true;
        });
    }
    edit(formValue) {
        this.service
            .update(this.editSelectedRecord.id, formValue)
            .pipe(take(1))
            .subscribe(_ => {
            this.editModalVisible = false;
            this.list.get();
        });
    }
    onCreateStandardResources() {
        this.confirmationService
            .warn('AbpIdentityServer::CreateStandardIdentityResourcesWarningMessage', 'AbpIdentityServer::AreYouSure')
            .pipe(filter(status => status === Confirmation.Status.confirm), switchMap(_ => this.service.createStandardResources()), take(1))
            .subscribe();
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentityServer::IdentityResourcesDeletionWarningMessage', 'AbpIdentityServer::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .pipe(filter(status => status === Confirmation.Status.confirm), switchMap(_ => this.service.delete(id)), take(1))
            .subscribe(_ => {
            this.list.get();
        });
    }
}
IdentityResourcesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-resources',
                template: "<abp-identity-server-entity-base\r\n  [list]=\"list\"\r\n  [service]=\"service\"\r\n  entityName=\"IdentityResources\"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"createModalVisible\"\r\n  [(visible)]=\"createModalVisible\"\r\n  (save)=\"create($event)\"\r\n>\r\n  <abp-identity-server-modal-info-tab [form]=\"newScopeForm\"></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab></abp-identity-server-modal-claims-tab>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf=\"editModalVisible\"\r\n  [(visible)]=\"editModalVisible\"\r\n  (save)=\"edit($event)\"\r\n  type=\"Edit\"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]=\"editScopeForm\"\r\n    [selectedRecord]=\"editSelectedRecord\"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab\r\n    [claims]=\"editClaims\"\r\n  ></abp-identity-server-modal-claims-tab>\r\n  <abp-identity-server-modal-properties-tab\r\n    [selectedProperties]=\"editProperties\"\r\n  ></abp-identity-server-modal-properties-tab>\r\n</abp-identity-server-modal>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$3,
                    },
                ]
            },] }
];
IdentityResourcesComponent.ctorParameters = () => [
    { type: ListService },
    { type: IdentityResourcesService },
    { type: ConfirmationService },
    { type: FormBuilder },
    { type: Injector }
];

class IdentityServerEntityBaseComponent {
    constructor() { }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.data$ = this.list.hookToQuery(query => this.service.getList(query));
    }
}
IdentityServerEntityBaseComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-entity-base',
                template: "<ng-container *ngIf=\"data$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">\r\n        {{ 'AbpIdentityServer::' + entityName | abpLocalization }}\r\n      </h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div id=\"data-tables-table-filter\" class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data.items\"\r\n        [recordsTotal]=\"data.totalCount\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n"
            },] }
];
IdentityServerEntityBaseComponent.ctorParameters = () => [];
IdentityServerEntityBaseComponent.propDecorators = {
    entityName: [{ type: Input }],
    list: [{ type: Input }],
    service: [{ type: Input }]
};

class PicklistComponent extends AbstractNgModelComponent {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.leftListTitle = '';
        this.rightListTitle = '';
        this.trackByProp = 'id';
        this.bindLabel = 'displayName';
    }
    trackByFn() {
        return (index, item) => item[this.trackByProp] || index;
    }
    transferItem(label) {
        const index = this.value.findIndex(val => val[this.bindLabel] === label);
        this.value = [
            ...this.value.slice(0, index),
            Object.assign(Object.assign({}, this.value[index]), { left: !this.value[index].left }),
            ...this.value.slice(index + 1),
        ];
    }
}
PicklistComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-picklist',
                template: "<div class=\"row\">\r\n  <div class=\"col col-6\">\r\n    <div class=\"card p-1 p-md-2\">\r\n      <div class=\"card-header px-1 px-md-2 px-lg-3\">{{ leftListTitle | abpLocalization }}</div>\r\n      <div class=\"card-body px-1 px-md-2 px-lg-3\" style=\"height:320px; overflow: auto;\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"ownedClaim btn btn-block btn-primary btn-sm mb-2 mt-0 text-truncate text-left px-1 px-md-2\"\r\n          *abpFor=\"\r\n            let left of value || [];\r\n            filterBy: 'left';\r\n            filterVal: true;\r\n            trackBy: trackByFn;\r\n            let i = index\r\n          \"\r\n          [id]=\"left[bindLabel]\"\r\n          (click)=\"transferItem(left[bindLabel])\"\r\n        >\r\n          <i class=\"fa fa-long-arrow-right\"></i>\r\n          {{ left[bindLabel] }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col col-6\">\r\n    <div class=\"card p-1 p-md-2\">\r\n      <div class=\"card-header px-1 px-md-2 px-lg-3\">{{ rightListTitle | abpLocalization }}</div>\r\n      <div class=\"card-body px-1 px-md-2 px-lg-3\" style=\"height:320px; overflow: auto;\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"otherClaim btn btn-block btn-outline-primary btn-sm mb-2 mt-0 text-truncate text-left px-1 px-md-2\"\r\n          *abpFor=\"\r\n            let right of value || [];\r\n            filterBy: 'left';\r\n            filterVal: false;\r\n            trackBy: trackByFn;\r\n            let i = index\r\n          \"\r\n          [id]=\"right[bindLabel]\"\r\n          (click)=\"transferItem(right[bindLabel])\"\r\n        >\r\n          <i class=\"fa fa-long-arrow-left\"></i>\r\n          {{ right[bindLabel] }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PicklistComponent),
                        multi: true,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PicklistComponent.ctorParameters = () => [
    { type: Injector }
];
PicklistComponent.propDecorators = {
    leftListTitle: [{ type: Input }],
    rightListTitle: [{ type: Input }],
    trackByProp: [{ type: Input }],
    bindLabel: [{ type: Input }]
};

const ɵ0$4 = data => {
    const component = data.getInjected(ApiResourcesComponent);
    component.onEdit(data.record.id);
}, ɵ1 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Abp.IdentityServer.ApiResources.ApiResource');
}, ɵ2 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ3 = data => {
    const component = data.getInjected(ApiResourcesComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_API_RESOURCES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentityServer::Edit',
        action: ɵ0$4,
        permission: 'IdentityServer.ApiResource.Update',
    },
    {
        text: 'AbpIdentityServer::ChangeHistory',
        action: ɵ1,
        permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.ApiResources.ApiResource',
        visible: ɵ2,
    },
    {
        text: 'AbpIdentityServer::Delete',
        action: ɵ3,
        permission: 'IdentityServer.ApiResource.Delete',
    },
]);

const DEFAULT_API_RESOURCES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentityServer::Name',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentityServer::DisplayName',
        sortable: true,
        columnWidth: 350,
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        sortable: true,
        columnWidth: 450,
    },
]);

const ɵ0$5 = () => [Validators.required];
const DEFAULT_API_RESOURCES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentityServer::Name',
        id: 'name',
        validators: ɵ0$5,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentityServer::DisplayName',
        id: 'displayName',
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        id: 'description',
    },
    {
        type: "string" /* String */,
        name: 'allowedAccessTokenSigningAlgorithms',
        displayName: 'AbpIdentityServer::AllowedAccessTokenSigningAlgorithms',
        id: 'allowedAccessTokenSigningAlgorithms',
    },
    {
        type: "boolean" /* Boolean */,
        name: 'showInDiscoveryDocument',
        displayName: 'AbpIdentityServer::ShowInDiscoveryDocument',
        id: 'showInDiscoveryDocument',
        defaultValue: false,
    },
]);
const ɵ1$1 = data => data
    .getInjected(ApiScopesService)
    .getAllList()
    .pipe(map(result => result.map(scope => ({
    key: scope.displayName,
    value: scope.name,
}))));
const DEFAULT_API_RESOURCES_EDIT_FORM_PROPS = DEFAULT_API_RESOURCES_CREATE_FORM_PROPS.concat(FormProp.createMany([
    {
        type: "boolean" /* Boolean */,
        name: 'enabled',
        displayName: 'AbpIdentityServer::Enabled',
        id: 'enabled',
        defaultValue: false,
    },
    {
        type: "multiselect" /* MultiSelect */,
        name: 'scopes',
        displayName: 'AbpIdentityServer::Scopes',
        id: 'scopes',
        options: ɵ1$1,
    },
]));

const ɵ0$6 = data => {
    const component = data.getInjected(ApiResourcesComponent);
    component.onAdd();
};
const DEFAULT_API_RESOURCES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentityServer::CreateANewResource',
        action: ɵ0$6,
        permission: 'IdentityServer.ApiResource.Create',
        icon: 'fa fa-plus',
    },
]);

const ɵ0$7 = data => {
    const component = data.getInjected(ClientsComponent);
    component.onEdit(data.record.id);
}, ɵ1$2 = data => {
    const component = data.getInjected(ClientsComponent);
    component.openPermissionsModal(data.record.clientId);
}, ɵ2$1 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Abp.IdentityServer.Clients.Client');
}, ɵ3$1 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ4 = data => {
    const component = data.getInjected(ClientsComponent);
    component.delete(data.record);
};
const DEFAULT_CLIENTS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentityServer::Edit',
        action: ɵ0$7,
        permission: 'IdentityServer.Client.Update',
    },
    {
        text: 'AbpIdentityServer::Permission:ManagePermissions',
        action: ɵ1$2,
        permission: 'IdentityServer.Client.ManagePermissions',
    },
    {
        text: 'AbpIdentityServer::ChangeHistory',
        action: ɵ2$1,
        permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.Clients.Client',
        visible: ɵ3$1,
    },
    {
        text: 'AbpIdentityServer::Delete',
        action: ɵ4,
        permission: 'IdentityServer.Client.Delete',
    },
]);

const DEFAULT_CLIENTS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'clientId',
        displayName: 'AbpIdentityServer::ClientId',
        sortable: true,
    },
]);

const ɵ0$8 = () => [Validators.required], ɵ1$3 = () => [Validators.required];
const DEFAULT_CLIENTS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'clientId',
        displayName: 'AbpIdentityServer::ClientId',
        id: 'Client_ClientId',
        validators: ɵ0$8,
    },
    {
        type: "string" /* String */,
        name: 'clientName',
        displayName: 'AbpIdentityServer::ClientName',
        id: 'Client_ClientName',
        validators: ɵ1$3,
    },
    {
        type: "text" /* Text */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        id: 'Client_Description',
    },
    {
        type: "string" /* String */,
        name: 'clientUri',
        displayName: 'AbpIdentityServer::ClientUri',
        id: 'Client_ClientUri',
    },
    {
        type: "string" /* String */,
        name: 'logoUri',
        displayName: 'AbpIdentityServer::LogoUri',
        id: 'Client_LogoUri',
    },
    {
        type: "boolean" /* Boolean */,
        name: 'requireConsent',
        displayName: 'AbpIdentityServer::RequireConsent',
        id: 'Client_RequireConsent',
        defaultValue: false,
    },
]);
const ɵ2$2 = prop => prop.name !== 'clientId';
const DEFAULT_CLIENTS_EDIT_FORM_PROPS = DEFAULT_CLIENTS_CREATE_FORM_PROPS.filter(ɵ2$2).concat(FormProp.createMany([
    {
        type: "boolean" /* Boolean */,
        name: 'requireRequestObject',
        displayName: 'AbpIdentityServer::RequireRequestObject',
        id: 'Client_RequireRequestObject',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'allowRememberConsent',
        displayName: 'AbpIdentityServer::AllowRememberConsent',
        id: 'Client_AllowRememberConsent',
        defaultValue: true,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'enabled',
        displayName: 'AbpIdentityServer::Enabled',
        id: 'Client_Enabled',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'allowOfflineAccess',
        displayName: 'AbpIdentityServer::AllowOfflineAccess',
        id: 'Client_AllowOfflineAccess',
        defaultValue: false,
    },
    {
        type: "string" /* String */,
        name: 'frontChannelLogoutUri',
        displayName: 'AbpIdentityServer::FrontChannelLogoutUri',
        id: 'Client_FrontChannelLogoutUri',
    },
    {
        type: "boolean" /* Boolean */,
        name: 'frontChannelLogoutSessionRequired',
        displayName: 'AbpIdentityServer::FrontChannelLogoutSessionRequired',
        id: 'Client_FrontChannelLogoutSessionRequired',
    },
    {
        type: "string" /* String */,
        name: 'backChannelLogoutUri',
        displayName: 'AbpIdentityServer::BackChannelLogoutUri',
        id: 'Client_BackChannelLogoutUri',
    },
    {
        type: "boolean" /* Boolean */,
        name: 'backChannelLogoutSessionRequired',
        displayName: 'AbpIdentityServer::BackChannelLogoutSessionRequired',
        id: 'Client_BackChannelLogoutSessionRequired',
        defaultValue: true,
    },
    {
        type: "string" /* String */,
        name: 'allowedIdentityTokenSigningAlgorithms',
        displayName: 'AbpIdentityServer::AllowedIdentityTokenSigningAlgorithms',
        id: 'Client_AllowedIdentityTokenSigningAlgorithms',
    },
]));

const ɵ0$9 = data => {
    const component = data.getInjected(ClientsComponent);
    component.onAdd();
};
const DEFAULT_CLIENTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentityServer::CreateANewClient',
        action: ɵ0$9,
        permission: 'IdentityServer.Client.Create',
        icon: 'fa fa-plus',
    },
]);

const ɵ0$a = data => {
    const component = data.getInjected(IdentityResourcesComponent);
    component.onEdit(data.record.id);
}, ɵ1$4 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Abp.IdentityServer.IdentityResources.IdentityResource');
}, ɵ2$3 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ3$2 = data => {
    const component = data.getInjected(IdentityResourcesComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_IDENTITY_RESOURCES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentityServer::Edit',
        action: ɵ0$a,
        permission: 'IdentityServer.IdentityResource.Update',
    },
    {
        text: 'AbpIdentityServer::ChangeHistory',
        action: ɵ1$4,
        permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.IdentityResources.IdentityResource',
        visible: ɵ2$3,
    },
    {
        text: 'AbpIdentityServer::Delete',
        action: ɵ3$2,
        permission: 'IdentityServer.IdentityResource.Delete',
    },
]);

const DEFAULT_IDENTITY_RESOURCES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentityServer::Name',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentityServer::DisplayName',
        sortable: true,
        columnWidth: 350,
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        sortable: true,
        columnWidth: 450,
    },
]);

const ɵ0$b = () => [Validators.required];
const DEFAULT_IDENTITY_RESOURCES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentityServer::Name',
        id: 'name',
        validators: ɵ0$b,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentityServer::DisplayName',
        id: 'displayName',
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        id: 'description',
    },
    {
        type: "boolean" /* Boolean */,
        name: 'enabled',
        displayName: 'AbpIdentityServer::Enabled',
        id: 'enabled',
        defaultValue: true,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'required',
        displayName: 'AbpIdentityServer::Required',
        id: 'required',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'emphasize',
        displayName: 'AbpIdentityServer::Emphasize',
        id: 'emphasize',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'showInDiscoveryDocument',
        displayName: 'AbpIdentityServer::ShowInDiscoveryDocument',
        id: 'showInDiscoveryDocument',
        defaultValue: true,
    },
]);
const DEFAULT_IDENTITY_RESOURCES_EDIT_FORM_PROPS = DEFAULT_IDENTITY_RESOURCES_CREATE_FORM_PROPS;

const ɵ0$c = data => {
    const component = data.getInjected(IdentityResourcesComponent);
    component.onCreateStandardResources();
}, ɵ1$5 = data => {
    const component = data.getInjected(IdentityResourcesComponent);
    component.onAdd();
};
const DEFAULT_IDENTITY_RESOURCES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentityServer::CreateStandardResources',
        action: ɵ0$c,
        permission: 'IdentityServer.IdentityResource.Create',
        icon: 'fa fa-cog',
    },
    {
        text: 'AbpIdentityServer::CreateANewResource',
        action: ɵ1$5,
        permission: 'IdentityServer.IdentityResource.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_API_SCOPES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentityServer::Name',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentityServer::DisplayName',
        sortable: true,
        columnWidth: 350,
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        sortable: true,
        columnWidth: 450,
    },
]);

const ɵ0$d = data => {
    const component = data.getInjected(ApiScopesComponent);
    component.onEdit(data.record.id);
}, ɵ1$6 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Abp.IdentityServer.ApiScopes.ApiScope');
}, ɵ2$4 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ3$3 = data => {
    const component = data.getInjected(ApiScopesComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_API_SCOPES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentityServer::Edit',
        action: ɵ0$d,
        permission: 'IdentityServer.ApiScope.Update',
    },
    {
        text: 'AbpIdentityServer::ChangeHistory',
        action: ɵ1$6,
        permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.ApiScopes.ApiScope',
        visible: ɵ2$4,
    },
    {
        text: 'AbpIdentityServer::Delete',
        action: ɵ3$3,
        permission: 'IdentityServer.ApiScope.Delete',
    },
]);

const ɵ0$e = data => {
    const component = data.getInjected(ApiScopesComponent);
    component.onAdd();
};
const DEFAULT_API_SCOPES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentityServer::CreateANewScope',
        action: ɵ0$e,
        permission: 'IdentityServer.ApiScope.Create',
        icon: 'fa fa-plus',
    },
]);

const ɵ0$f = () => [Validators.required];
const DEFAULT_API_SCOPES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentityServer::Name',
        id: 'name',
        validators: ɵ0$f,
    },
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'AbpIdentityServer::DisplayName',
        id: 'displayName',
    },
    {
        type: "string" /* String */,
        name: 'description',
        displayName: 'AbpIdentityServer::Description',
        id: 'description',
    },
    {
        type: "boolean" /* Boolean */,
        name: 'required',
        displayName: 'AbpIdentityServer::Required',
        id: 'required',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'enabled',
        displayName: 'AbpIdentityServer::Enabled',
        id: 'enabled',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'showInDiscoveryDocument',
        displayName: 'AbpIdentityServer::ShowInDiscoveryDocument',
        id: 'showInDiscoveryDocument',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'emphasize',
        displayName: 'AbpIdentityServer::Emphasize',
        id: 'emphasize',
        defaultValue: false,
    },
]);
const ɵ1$7 = prop => prop.name !== 'name';
const DEFAULT_API_SCOPES_EDIT_FORM_PROPS = DEFAULT_API_SCOPES_CREATE_FORM_PROPS.filter(ɵ1$7);

const DEFAULT_IDENTITY_SERVER_ENTITY_ACTIONS = {
    ["IdentityServer.ApiResourcesComponent" /* ApiResources */]: DEFAULT_API_RESOURCES_ENTITY_ACTIONS,
    ["IdentityServer.ClientsComponent" /* Clients */]: DEFAULT_CLIENTS_ENTITY_ACTIONS,
    ["IdentityServer.IdentityResourcesComponent" /* IdentityResources */]: DEFAULT_IDENTITY_RESOURCES_ENTITY_ACTIONS,
    ["IdentityServer.ApiScopesComponent" /* ApiScopes */]: DEFAULT_API_SCOPES_ENTITY_ACTIONS,
};
const DEFAULT_IDENTITY_SERVER_TOOLBAR_ACTIONS = {
    ["IdentityServer.ApiResourcesComponent" /* ApiResources */]: DEFAULT_API_RESOURCES_TOOLBAR_ACTIONS,
    ["IdentityServer.ClientsComponent" /* Clients */]: DEFAULT_CLIENTS_TOOLBAR_ACTIONS,
    ["IdentityServer.IdentityResourcesComponent" /* IdentityResources */]: DEFAULT_IDENTITY_RESOURCES_TOOLBAR_ACTIONS,
    ["IdentityServer.ApiScopesComponent" /* ApiScopes */]: DEFAULT_API_SCOPES_TOOLBAR_ACTIONS,
};
const DEFAULT_IDENTITY_SERVER_ENTITY_PROPS = {
    ["IdentityServer.ApiResourcesComponent" /* ApiResources */]: DEFAULT_API_RESOURCES_ENTITY_PROPS,
    ["IdentityServer.ClientsComponent" /* Clients */]: DEFAULT_CLIENTS_ENTITY_PROPS,
    ["IdentityServer.IdentityResourcesComponent" /* IdentityResources */]: DEFAULT_IDENTITY_RESOURCES_ENTITY_PROPS,
    ["IdentityServer.ApiScopesComponent" /* ApiScopes */]: DEFAULT_API_SCOPES_ENTITY_PROPS,
};
const DEFAULT_IDENTITY_SERVER_CREATE_FORM_PROPS = {
    ["IdentityServer.ApiResourcesComponent" /* ApiResources */]: DEFAULT_API_RESOURCES_CREATE_FORM_PROPS,
    ["IdentityServer.ClientsComponent" /* Clients */]: DEFAULT_CLIENTS_CREATE_FORM_PROPS,
    ["IdentityServer.IdentityResourcesComponent" /* IdentityResources */]: DEFAULT_IDENTITY_RESOURCES_CREATE_FORM_PROPS,
    ["IdentityServer.ApiScopesComponent" /* ApiScopes */]: DEFAULT_API_SCOPES_CREATE_FORM_PROPS,
};
const DEFAULT_IDENTITY_SERVER_EDIT_FORM_PROPS = {
    ["IdentityServer.ApiResourcesComponent" /* ApiResources */]: DEFAULT_API_RESOURCES_EDIT_FORM_PROPS,
    ["IdentityServer.ClientsComponent" /* Clients */]: DEFAULT_CLIENTS_EDIT_FORM_PROPS,
    ["IdentityServer.IdentityResourcesComponent" /* IdentityResources */]: DEFAULT_IDENTITY_RESOURCES_EDIT_FORM_PROPS,
    ["IdentityServer.ApiScopesComponent" /* ApiScopes */]: DEFAULT_API_SCOPES_EDIT_FORM_PROPS,
};
const IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS');
const IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS');
const IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS');
const IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS');
const IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS');

class IdentityServerExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'IdentityServer').pipe(map(entities => ({
            ["IdentityServer.ApiResourcesComponent" /* ApiResources */]: entities.ApiResource,
            ["IdentityServer.ClientsComponent" /* Clients */]: entities.Client,
            ["IdentityServer.IdentityResourcesComponent" /* IdentityResources */]: entities.IdentityResource,
            ["IdentityServer.ApiScopesComponent" /* ApiScopes */]: entities.ApiScope,
        })), mapEntitiesToContributors(configState, 'AbpIdentityServer'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_IDENTITY_SERVER_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_IDENTITY_SERVER_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_IDENTITY_SERVER_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_IDENTITY_SERVER_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_IDENTITY_SERVER_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
IdentityServerExtensionsGuard.decorators = [
    { type: Injectable }
];
IdentityServerExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];

const ɵ0$g = {
    requiredPolicy: 'IdentityServer.IdentityResource',
    replaceableComponent: {
        defaultComponent: IdentityResourcesComponent,
        key: "IdentityServer.IdentityResourcesComponent" /* IdentityResources */,
    },
}, ɵ1$8 = {
    requiredPolicy: 'IdentityServer.Client',
    replaceableComponent: {
        defaultComponent: ClientsComponent,
        key: "IdentityServer.ClientsComponent" /* Clients */,
    },
}, ɵ2$5 = {
    requiredPolicy: 'IdentityServer.ApiResource',
    replaceableComponent: {
        defaultComponent: ApiResourcesComponent,
        key: "IdentityServer.ApiResourcesComponent" /* ApiResources */,
    },
}, ɵ3$4 = {
    requiredPolicy: 'IdentityServer.ApiScope',
    replaceableComponent: {
        defaultComponent: ApiScopesComponent,
        key: "IdentityServer.ApiScopesComponent" /* ApiScopes */,
    },
};
const routes = [
    { path: '', redirectTo: 'identity-resources', pathMatch: 'full' },
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, IdentityServerExtensionsGuard],
        children: [
            {
                path: 'identity-resources',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0$g,
            },
            {
                path: 'clients',
                component: ReplaceableRouteContainerComponent,
                data: ɵ1$8,
            },
            {
                path: 'api-resources',
                component: ReplaceableRouteContainerComponent,
                data: ɵ2$5,
            },
            {
                path: 'api-scopes',
                component: ReplaceableRouteContainerComponent,
                data: ɵ3$4,
            },
        ],
    },
];
class IdentityServerRoutingModule {
}
IdentityServerRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

class IdentityServerModalComponent {
    constructor() {
        this.type = 'Create';
        this.visibleChange = new EventEmitter();
        this.save = new EventEmitter();
        this.shouldBeDisabled = () => {
            return !!this.tabs.some(tab => !tab.isValid());
        };
    }
    ngOnInit() { }
    onVisibleChange(event) {
        this.visible = event;
        this.visibleChange.emit(event);
    }
    onSave() {
        if (!this.shouldBeDisabled()) {
            const value = this.tabs.reduce((retVal, curr) => (Object.assign(Object.assign({}, retVal), curr.getValue())), {});
            this.save.emit(value);
        }
    }
}
IdentityServerModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal',
                template: "<abp-modal [visible]=\"visible\" (visibleChange)=\"onVisibleChange($event)\">\r\n  <ng-template #abpHeader>\r\n    <h5 class=\"modal-title\" id=\"modal-basic-title\">\r\n      {{ 'AbpIdentityServer::' + type | abpLocalization }}\r\n    </h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <ul ngbNav #nav=\"ngbNav\" [(activeId)]=\"activeTab\" class=\"nav-tabs\">\r\n      <ng-container *ngFor=\"let tab of tabs; let outerIndex = index\">\r\n        <ng-container *ngIf=\"tab.innerTabs; else singleTab\">\r\n          <li ngbDropdown class=\"nav-item\">\r\n            <a\r\n              class=\"nav-link pointer\"\r\n              [class.active]=\"activeTab?.startsWith(outerIndex + '-')\"\r\n              ngbDropdownToggle\r\n              >{{ 'AbpIdentityServer::' + tab.title | abpLocalization }}</a\r\n            >\r\n            <div ngbDropdownMenu>\r\n              <div ngbDropdownItem *ngFor=\"let innerTab of tab.innerTabs; let innerIndex = index\">\r\n                <ng-container\r\n                  *ngTemplateOutlet=\"\r\n                    tabTemplateWithoutLink;\r\n                    context: { $implicit: innerTab, index: outerIndex + '-' + innerIndex }\r\n                  \"\r\n                ></ng-container>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ng-container>\r\n\r\n        <ng-template #singleTab>\r\n          <ng-container\r\n            *ngTemplateOutlet=\"tabTemplate; context: { $implicit: tab, index: outerIndex + '' }\"\r\n          ></ng-container>\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <ng-template #tabTemplate let-tab let-index=\"index\">\r\n        <li [ngbNavItem]=\"index\">\r\n          <a ngbNavLink>{{ 'AbpIdentityServer::' + tab.title | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngTemplateOutlet=\"tab.template\"></ng-container>\r\n          </ng-template>\r\n        </li>\r\n      </ng-template>\r\n\r\n      <ng-template #tabTemplateWithoutLink let-tab let-index=\"index\">\r\n        <div\r\n          class=\"pointer\"\r\n          [class.nav-item]=\"false\"\r\n          [ngbNavItem]=\"index\"\r\n          #item=\"ngbNavItem\"\r\n          (click)=\"nav.click(item)\"\r\n        >\r\n          {{ 'AbpIdentityServer::' + tab.title | abpLocalization }}\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngTemplateOutlet=\"tab.template\"></ng-container>\r\n          </ng-template>\r\n        </div>\r\n      </ng-template>\r\n    </ul>\r\n    <div [ngbNavOutlet]=\"nav\" class=\"mt-2 fade-in-top\"></div>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpIdentityServer::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"onSave()\" [disabled]=\"shouldBeDisabled()\">{{\r\n      'AbpIdentityServer::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
IdentityServerModalComponent.ctorParameters = () => [];
IdentityServerModalComponent.propDecorators = {
    type: [{ type: Input }],
    visible: [{ type: Input }],
    visibleChange: [{ type: Output }],
    save: [{ type: Output }],
    tabs: [{ type: ContentChildren, args: [IdentityServerModalTabComponent,] }]
};

class IdentityServerClaimTypesService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentityServer';
        this.getList = () => this.restService.request({
            method: 'GET',
            url: `/api/identity-server/claim-types`,
        }, { apiName: this.apiName });
    }
}
IdentityServerClaimTypesService.ɵprov = ɵɵdefineInjectable({ factory: function IdentityServerClaimTypesService_Factory() { return new IdentityServerClaimTypesService(ɵɵinject(RestService)); }, token: IdentityServerClaimTypesService, providedIn: "root" });
IdentityServerClaimTypesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityServerClaimTypesService.ctorParameters = () => [
    { type: RestService }
];

class IdentityServerModalClaimsTabComponent extends IdentityServerModalTabComponent {
    constructor(service) {
        super();
        this.service = service;
        this.title = 'Claims';
        this._claims = [];
        this.definedClaims = [];
        this.givenClaimsNotContains = (claim) => {
            return this.claims.findIndex(c => c.name === claim.name) < 0;
        };
    }
    set claims(val) {
        this._claims = val || [];
        this.mergeClaims();
    }
    get claims() {
        return this._claims;
    }
    ngOnInit() {
        this.service
            .getList()
            .pipe(take(1))
            .subscribe(claims => {
            this.definedClaims = claims.map(c => (Object.assign(Object.assign({}, c), { left: false })));
            this.definedClaims = this.mergeClaims();
        });
    }
    getValue() {
        return {
            userClaims: this.definedClaims
                .filter(claim => claim.left)
                .map(claim => ({
                type: claim.name,
            })),
        };
    }
    mergeClaims() {
        const rightList = this.definedClaims.filter(this.givenClaimsNotContains);
        return [...rightList, ...this.claims];
    }
}
IdentityServerModalClaimsTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-claims-tab',
                template: "<div class=\"card shadow-none bg-light\">\r\n  <div class=\"card-body\">\r\n    <abp-picklist\r\n      *ngIf=\"claims\"\r\n      trackByProp=\"name\"\r\n      bindLabel=\"name\"\r\n      [leftListTitle]=\"'AbpIdentityServer::OwnedClaims' | abpLocalization\"\r\n      [rightListTitle]=\"'AbpIdentityServer::NotOwnedClaims' | abpLocalization\"\r\n      [(ngModel)]=\"definedClaims\"\r\n    ></abp-picklist>\r\n  </div>\r\n</div>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: IdentityServerModalClaimsTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
IdentityServerModalClaimsTabComponent.ctorParameters = () => [
    { type: IdentityServerClaimTypesService }
];
IdentityServerModalClaimsTabComponent.propDecorators = {
    claims: [{ type: Input }]
};

class IdentityServerModalInfoTabComponent extends IdentityServerModalTabComponent {
    constructor(modal) {
        super();
        this.modal = modal;
        this.title = 'Info';
        this.selectedRecord = {};
    }
    isValid() {
        return this.form.valid;
    }
    getValue() {
        return this.form.value;
    }
}
IdentityServerModalInfoTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-info-tab',
                template: "<ng-template>\r\n  <form [formGroup]=\"form\" (keyup.enter)=\"modal.onSave()\">\r\n    <abp-extensible-form [selectedRecord]=\"selectedRecord\"></abp-extensible-form>\r\n  </form>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: IdentityServerModalInfoTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
IdentityServerModalInfoTabComponent.ctorParameters = () => [
    { type: IdentityServerModalComponent }
];
IdentityServerModalInfoTabComponent.propDecorators = {
    form: [{ type: Input }],
    selectedRecord: [{ type: Input }]
};

class IdentityServerModalPropertiesTabComponent extends IdentityServerModalTabComponent {
    constructor() {
        super(...arguments);
        this.title = 'Properties';
        this.fieldName = 'properties';
        this._selectedProperties = [];
    }
    set selectedProperties(value) {
        this._selectedProperties = value || [];
    }
    get selectedProperties() {
        return this._selectedProperties;
    }
    ngAfterViewInit() {
        this.template = this.freeTextTab.template;
    }
    isValid() {
        return this.freeTextTab.isValid();
    }
    getValue() {
        return this.freeTextTab.getValue();
    }
}
IdentityServerModalPropertiesTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-properties-tab',
                template: "<abp-identity-server-modal-free-text-values-tab\r\n  [title]=\"title\"\r\n  [fields]=\"[\r\n    { name: 'key', title: 'Key' },\r\n    { name: 'value', title: 'Value' }\r\n  ]\"\r\n  [selected]=\"selectedProperties\"\r\n  [fieldName]=\"fieldName\"\r\n></abp-identity-server-modal-free-text-values-tab>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: IdentityServerModalPropertiesTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
IdentityServerModalPropertiesTabComponent.propDecorators = {
    fieldName: [{ type: Input }],
    freeTextTab: [{ type: ViewChild, args: [IdentityServerModalTabComponent,] }],
    selectedProperties: [{ type: Input }]
};

class IdentityServerModalSecretsTabComponent extends IdentityServerModalTabComponent {
    constructor(fb) {
        super();
        this.fb = fb;
        this.title = 'Secrets';
        this.fieldName = 'secrets';
        this.form = this.fb.group({
            type: ['SharedSecret', Validators.required],
            value: [null, Validators.required],
            description: [null],
            expiration: [null],
        });
        this._selectedSecrets = [];
        this.trackByFn = (_, dto) => dto.type;
    }
    set selectedSecrets(value) {
        this._selectedSecrets = value || [];
    }
    get selectedSecrets() {
        return this._selectedSecrets;
    }
    ngOnInit() { }
    add() {
        if (this.form.valid) {
            this._selectedSecrets.push(this.form.value);
            this.form.reset();
            this.form.patchValue({ type: 'SharedSecret' });
        }
    }
    getValue() {
        return { [this.fieldName]: this.selectedSecrets };
    }
    delete(index) {
        this._selectedSecrets.splice(index, 1);
    }
}
IdentityServerModalSecretsTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-secrets-tab',
                template: "<ng-template>\r\n  <div class=\"bg-light shadow-none mb-3 card\">\r\n    <div class=\"card-body\">\r\n      <form [formGroup]=\"form\" (ngSubmit)=\"add()\" validateOnSubmit>\r\n        <div class=\"row\">\r\n          <div class=\"col col-6\">\r\n            <div class=\"form-group\">\r\n              <label for=\"secret-type\">{{ 'AbpIdentityServer::Type' | abpLocalization }}</label>\r\n              <select\r\n                class=\"custom-select form-control\"\r\n                id=\"secret-type\"\r\n                name=\"secret-type\"\r\n                formControlName=\"type\"\r\n              >\r\n                <option ngValue=\"SharedSecret\">Shared Secret</option>\r\n                <option ngValue=\"X509Thumbprint\">X509 Thumbprint</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"secret-value\">{{ 'AbpIdentityServer::Value' | abpLocalization }}</label\r\n              ><input\r\n                type=\"text\"\r\n                id=\"secret-value\"\r\n                name=\"secret-value\"\r\n                class=\"form-control\"\r\n                formControlName=\"value\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col col-6\">\r\n            <div class=\"form-group\">\r\n              <label for=\"secret-description\">{{\r\n                'AbpIdentityServer::Description' | abpLocalization\r\n              }}</label\r\n              ><input\r\n                type=\"text\"\r\n                id=\"secret-description\"\r\n                name=\"secret-description\"\r\n                formControlName=\"description\"\r\n                class=\"form-control\"\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"secret-expiration\">{{\r\n                'AbpIdentityServer::Expiration' | abpLocalization\r\n              }}</label>\r\n              <div class=\"input-group\" validationTarget>\r\n                <input\r\n                  id=\"secret-expiration\"\r\n                  ngbDatepicker\r\n                  #expirationInput\r\n                  #datepicker=\"ngbDatepicker\"\r\n                  class=\"form-control\"\r\n                  name=\"secret-expiration\"\r\n                  formControlName=\"expiration\"\r\n                  readonly\r\n                  (click)=\"datepicker.toggle()\"\r\n                />\r\n                <div *ngIf=\"expirationInput.value\" class=\"input-group-append\">\r\n                  <button\r\n                    class=\"btn btn-link px-2\"\r\n                    type=\"button\"\r\n                    [title]=\"'AbpUi::Clear' | abpLocalization\"\r\n                    (click)=\"datepicker.writeValue(null); datepicker.manualDateChange(null, true)\"\r\n                  >\r\n                    <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <abp-button\r\n          buttonId=\"AddNewSecretButton\"\r\n          iconClass=\"fa fa-plus\"\r\n          buttonClass=\"float-right btn btn-primary btn-sm\"\r\n          buttonType=\"submit\"\r\n        >\r\n          {{ 'AbpIdentityServer::AddNew' | abpLocalization }}\r\n        </abp-button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"selectedSecrets.length\" class=\"table-responsive-sm\">\r\n    <table id=\"secret-table-id\" class=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">{{ 'AbpIdentityServer::Type' | abpLocalization }}</th>\r\n          <th scope=\"col\">{{ 'AbpIdentityServer::Value' | abpLocalization }}</th>\r\n          <th scope=\"col\">{{ 'AbpIdentityServer::Description' | abpLocalization }}</th>\r\n          <th scope=\"col\">{{ 'AbpIdentityServer::Expiration' | abpLocalization }}</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody id=\"SecretTableBodyId\">\r\n        <tr *ngFor=\"let group of selectedSecrets; trackBy: trackByFn; let i = index\">\r\n          <td>\r\n            {{ group.type }}\r\n          </td>\r\n          <td style=\"max-width: 120px\" class=\"abp-ellipsis-inline\" [title]=\"group.value\">\r\n            {{ group.value }}\r\n          </td>\r\n          <td style=\"max-width: 120px\" class=\"abp-ellipsis-inline\" [title]=\"group.description\">\r\n            {{ group.description }}\r\n          </td>\r\n          <td>\r\n            {{ group.expiration | date }}\r\n          </td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-outline-danger float-right deleteSecretButton\"\r\n              (click)=\"delete(i)\"\r\n            >\r\n              {{ 'AbpIdentityServer::Delete' | abpLocalization }}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: IdentityServerModalSecretsTabComponent,
                    },
                    { provide: NgbDateAdapter, useClass: NgbDateNativeAdapter },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
IdentityServerModalSecretsTabComponent.ctorParameters = () => [
    { type: FormBuilder }
];
IdentityServerModalSecretsTabComponent.propDecorators = {
    fieldName: [{ type: Input }],
    selectedSecrets: [{ type: Input }]
};

class IdentityServerModalTabGroupComponent {
    isValid() {
        return !this.innerTabs.some(tab => !tab.isValid());
    }
    getValue() {
        return this.innerTabs.reduce((retVal, tab) => (Object.assign(Object.assign({}, retVal), tab.getValue())), {});
    }
}
IdentityServerModalTabGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-tab-group',
                template: `<ng-template><ng-content></ng-content></ng-template>`,
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: IdentityServerModalTabGroupComponent,
                    },
                ]
            },] }
];
IdentityServerModalTabGroupComponent.propDecorators = {
    title: [{ type: Input }],
    innerTabs: [{ type: ContentChildren, args: [IdentityServerModalTabComponent,] }]
};

class IdentityServerModalFreeTextValuesTabComponent extends IdentityServerModalTabComponent {
    constructor() {
        super(...arguments);
        this.model = {};
        this.trackByFn = () => this.fields[0].name;
    }
    add() {
        const hasFieldsFilled = this.fields.map(field => this.model[field.name]).filter(field => !!field).length ===
            this.fields.length;
        if (hasFieldsFilled && this.uniqueSelect()) {
            this.selected.push(this.model);
            this.model = {};
        }
    }
    getValue() {
        const retVal = { [this.fieldName]: this.selected };
        if (this.checkboxFieldName) {
            retVal[this.checkboxFieldName] = this.checkboxValue;
        }
        return retVal;
    }
    delete(index) {
        this.selected.splice(index, 1);
    }
    contains(key, value) {
        return this.selected.findIndex(item => item[key] === value) > -1;
    }
    uniqueSelect() {
        // TODO: improve this logic for multiple fields
        const selectField = this.fields.filter(field => field.type === 'select')[0];
        return !(selectField && this.contains(selectField.name, this.model[selectField.name]));
    }
}
IdentityServerModalFreeTextValuesTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-identity-server-modal-free-text-values-tab',
                template: "<ng-template>\r\n  <h3>{{ 'AbpIdentityServer::' + (formTitle || title) | abpLocalization }}</h3>\r\n  <div class=\"pt-3 pb-5 clearfix\">\r\n    <form (submit)=\"add()\">\r\n      <div class=\"row\">\r\n        <ng-container *ngFor=\"let field of fields\">\r\n          <div class=\"col-{{ 12 / fields.length }}\">\r\n            <div class=\"form-group\">\r\n              <label [for]=\"'sample-propert-' + field.name\"\r\n                >{{ 'AbpIdentityServer::' + field.title | abpLocalization }}\r\n              </label>\r\n\r\n              <ng-container [ngSwitch]=\"field.type\">\r\n                <ng-container *ngSwitchCase=\"'select'\">\r\n                  <select\r\n                    class=\"form-control\"\r\n                    [id]=\"'sample-propert-' + field.name\"\r\n                    [name]=\"'sample-propert-' + field.name\"\r\n                    [(ngModel)]=\"model[field.name]\"\r\n                  >\r\n                    <option *ngFor=\"let option of field.selectOptions\" [ngValue]=\"option.value\">\r\n                      {{ option.key }}\r\n                    </option>\r\n                  </select>\r\n                </ng-container>\r\n\r\n                <ng-container *ngSwitchDefault>\r\n                  <input\r\n                    type=\"text\"\r\n                    [id]=\"'sample-propert-' + field.name\"\r\n                    [name]=\"'sample-propert-' + field.name\"\r\n                    class=\"form-control\"\r\n                    aria-invalid=\"false\"\r\n                    [(ngModel)]=\"model[field.name]\"\r\n                  />\r\n                </ng-container>\r\n              </ng-container>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n      <button id=\"add-new-property\" class=\"float-right mb-2 btn btn-success\" type=\"submit\">\r\n        <i class=\"fa fa-plus\"></i> {{ 'AbpIdentityServer::AddNew' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n\r\n  <div *ngIf=\"checkboxFieldName\" class=\"custom-checkbox custom-control mb-2\">\r\n    <input\r\n      [id]=\"checkboxFieldName\"\r\n      [name]=\"checkboxFieldName\"\r\n      type=\"checkbox\"\r\n      [(ngModel)]=\"checkboxValue\"\r\n      class=\"custom-control-input\"\r\n    /><label class=\"custom-control-label\" [for]=\"checkboxFieldName\">{{\r\n      'AbpIdentityServer::' + checkboxLabel | abpLocalization\r\n    }}</label>\r\n  </div>\r\n\r\n  <div *ngIf=\"selected?.length\" class=\"table-responsive-sm\">\r\n    <table id=\"property-table\" class=\"table table-striped\">\r\n      <thead>\r\n        <th *ngFor=\"let field of fields\" scope=\"col\">\r\n          {{ 'AbpIdentityServer::' + field.title | abpLocalization }}\r\n        </th>\r\n        <th scope=\"col\"></th>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let row of selected; trackBy: trackByFn; let i = index\">\r\n          <td *ngFor=\"let field of fields\">{{ row[field.name] }}</td>\r\n          <td>\r\n            <button type=\"button\" class=\"btn btn-outline-danger float-right\" (click)=\"delete(i)\">\r\n              <i class=\"fa fa-trash\"></i>\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: IdentityServerModalFreeTextValuesTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
IdentityServerModalFreeTextValuesTabComponent.propDecorators = {
    selected: [{ type: Input }],
    fields: [{ type: Input }],
    fieldName: [{ type: Input }],
    formTitle: [{ type: Input }],
    checkboxValue: [{ type: Input }],
    checkboxFieldName: [{ type: Input }],
    checkboxLabel: [{ type: Input }]
};

class ClientsModalGrantTypesTabComponent extends IdentityServerModalTabComponent {
    constructor() {
        super(...arguments);
        this.selected = [];
        this.title = 'GrantTypes';
        this.customModel = 'Custom';
        this.grantTypesOptions = [
            'implicit',
            'authorization_code',
            'hybrid',
            'client_credentials',
            'password',
            this.customModel,
        ];
        this.customModelValue = '';
        this.trackByFn = val => val;
    }
    add() {
        const model = this.model === this.customModel ? this.customModelValue : this.model;
        if (!this.selected.includes(model)) {
            this.selected.push(model);
            this.customModelValue = '';
        }
    }
    getValue() {
        return {
            allowedGrantTypes: this.selected,
        };
    }
    delete(index) {
        this.selected.splice(index, 1);
    }
}
ClientsModalGrantTypesTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-clients-modal-grant-types-tab',
                template: "<ng-template>\r\n  <h3>{{ 'AbpIdentityServer::' + title | abpLocalization }}</h3>\r\n  <div class=\"pt-3 pb-5 clearfix\">\r\n    <form (submit)=\"add()\">\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"form-group\">\r\n            <label for=\"sample-propert-grant-type\">Grant Type </label>\r\n            <select\r\n              class=\"form-control\"\r\n              id=\"sample-propert-grant-type\"\r\n              name=\"sample-propert-grant-type\"\r\n              [(ngModel)]=\"model\"\r\n            >\r\n              <option *ngFor=\"let option of grantTypesOptions\" [ngValue]=\"option\">\r\n                {{ option }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12\" *ngIf=\"model === customModel\">\r\n          <div class=\"form-group\">\r\n            <label for=\"sample-propert-custom-grant-type\">Grant Type </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"sample-propert-custom-grant-type\"\r\n              name=\"sample-propert-custom-grant-type\"\r\n              class=\"form-control\"\r\n              [placeholder]=\"'AbpIdentityServer::CustomGrantType' | abpLocalization\"\r\n              [(ngModel)]=\"customModelValue\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button id=\"add-new-property\" class=\"float-right mb-2 btn btn-success\" type=\"submit\">\r\n        <i class=\"fa fa-plus\"></i> {{ 'AbpIdentityServer::AddNew' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n\r\n  <div *ngIf=\"selected?.length\" class=\"table-responsive-sm\">\r\n    <table id=\"property-table\" class=\"table table-striped\">\r\n      <thead>\r\n        <th scope=\"col\">Grant Type</th>\r\n        <th scope=\"col\"></th>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let row of selected; trackBy: trackByFn; let i = index\">\r\n          <td>{{ row }}</td>\r\n          <td>\r\n            <button type=\"button\" class=\"btn btn-outline-danger float-right\" (click)=\"delete(i)\">\r\n              <i class=\"fa fa-trash\"></i>\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    {
                        provide: IdentityServerModalTabComponent,
                        useExisting: ClientsModalGrantTypesTabComponent,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ClientsModalGrantTypesTabComponent.propDecorators = {
    selected: [{ type: Input }]
};

const tabs = [
    IdentityServerModalComponent,
    IdentityServerModalInfoTabComponent,
    IdentityServerModalTabGroupComponent,
    IdentityServerModalTabComponent,
    IdentityServerModalClaimsTabComponent,
    IdentityServerModalPropertiesTabComponent,
    IdentityServerModalSecretsTabComponent,
    IdentityServerModalFreeTextValuesTabComponent,
];
const clientTabs = [
    ClientsModalUrisTabComponent,
    ClientsModalResourcesTabComponent,
    ClientsModalTokensTabComponent,
    ClientsModalGrantTypesTabComponent,
];
class IdentityServerModule {
    static forChild(options = {}) {
        return {
            ngModule: IdentityServerModule,
            providers: [
                {
                    provide: IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                IdentityServerExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(IdentityServerModule.forChild(options));
    }
}
IdentityServerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IdentityResourcesComponent,
                    PicklistComponent,
                    ClientsComponent,
                    ApiResourcesComponent,
                    IdentityServerEntityBaseComponent,
                    ApiScopesComponent,
                    ...tabs,
                    ...clientTabs,
                ],
                exports: [
                    IdentityResourcesComponent,
                    PicklistComponent,
                    ClientsComponent,
                    ApiResourcesComponent,
                    IdentityServerEntityBaseComponent,
                    ApiScopesComponent,
                    ...tabs,
                    ...clientTabs,
                ],
                imports: [
                    IdentityServerRoutingModule,
                    CoreModule,
                    CommercialUiModule,
                    ThemeSharedModule,
                    PermissionManagementModule,
                    NgbDropdownModule,
                    NgbNavModule,
                    NgxValidateCoreModule,
                    NgbDatepickerModule,
                    ReactiveFormsModule,
                ],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ApiResourcesComponent, ApiResourcesService, ApiScopesComponent, ClientsComponent, ClientsModalResourcesTabComponent, ClientsModalTokensTabComponent, ClientsModalUrisTabComponent, ClientsService, DEFAULT_IDENTITY_SERVER_CREATE_FORM_PROPS, DEFAULT_IDENTITY_SERVER_EDIT_FORM_PROPS, DEFAULT_IDENTITY_SERVER_ENTITY_ACTIONS, DEFAULT_IDENTITY_SERVER_ENTITY_PROPS, DEFAULT_IDENTITY_SERVER_TOOLBAR_ACTIONS, IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS, IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS, IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS, IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS, IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS, IdentityResourcesComponent, IdentityResourcesService, IdentityServerClaimTypesService, IdentityServerEntityBaseComponent, IdentityServerExtensionsGuard, IdentityServerModalClaimsTabComponent, IdentityServerModalComponent, IdentityServerModalFreeTextValuesTabComponent, IdentityServerModalInfoTabComponent, IdentityServerModalPropertiesTabComponent, IdentityServerModalSecretsTabComponent, IdentityServerModalTabComponent, IdentityServerModalTabGroupComponent, IdentityServerModule, PicklistComponent, ɵ0, IdentityResourcesComponent as ɵa, IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS as ɵba, IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS as ɵbb, IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS as ɵbc, IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS as ɵbd, IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS as ɵbe, PicklistComponent as ɵd, ClientsComponent as ɵe, ApiResourcesComponent as ɵg, IdentityServerEntityBaseComponent as ɵi, ApiScopesComponent as ɵj, ApiScopesService as ɵl, IdentityServerModalComponent as ɵm, IdentityServerModalTabComponent as ɵn, IdentityServerModalInfoTabComponent as ɵo, IdentityServerModalTabGroupComponent as ɵp, IdentityServerModalClaimsTabComponent as ɵq, IdentityServerModalPropertiesTabComponent as ɵr, IdentityServerModalSecretsTabComponent as ɵs, IdentityServerModalFreeTextValuesTabComponent as ɵt, ClientsModalUrisTabComponent as ɵu, ClientsModalResourcesTabComponent as ɵv, ClientsModalTokensTabComponent as ɵw, ClientsModalGrantTypesTabComponent as ɵx, IdentityServerRoutingModule as ɵy, IdentityServerExtensionsGuard as ɵz };
//# sourceMappingURL=volo-abp.ng.identity-server.js.map
