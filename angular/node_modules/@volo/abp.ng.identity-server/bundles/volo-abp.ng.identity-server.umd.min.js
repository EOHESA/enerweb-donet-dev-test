!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@abp/ng.theme.shared/extensions"),require("@angular/core"),require("@angular/forms"),require("rxjs/operators"),require("@volo/abp.commercial.ng.ui"),require("@abp/ng.permission-management"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@angular/router")):"function"==typeof define&&define.amd?define("@volo/abp.ng.identity-server",["exports","@abp/ng.core","@abp/ng.theme.shared","@abp/ng.theme.shared/extensions","@angular/core","@angular/forms","rxjs/operators","@volo/abp.commercial.ng.ui","@abp/ng.permission-management","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@angular/router"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).volo=e.volo||{},e.volo.abp=e.volo.abp||{},e.volo.abp.ng=e.volo.abp.ng||{},e.volo.abp.ng["identity-server"]={}),e.i1,e.ng_theme_shared,e.extensions,e.ng.core,e.ng.forms,e.rxjs.operators,e.abp_commercial_ng_ui,e.ng_permissionManagement,e.ngBootstrap,e.core,e.ng.router)}(this,(function(e,t,r,n,i,o,a,s,l,c,p,d){"use strict";var u=function(e){var t=this;this.restService=e,this.apiName="AbpIdentityServer",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity-server/api-resources",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity-server/api-resources",params:{id:e}},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/api-resources/"+e},{apiName:t.apiName})},this.getAllList=function(){return t.restService.request({method:"GET",url:"/api/identity-server/api-resources/all"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/api-resources",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,r){return t.restService.request({method:"PUT",url:"/api/identity-server/api-resources/"+e,body:r},{apiName:t.apiName})}};u.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new u(i.ɵɵinject(t.RestService))},token:u,providedIn:"root"}),u.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],u.ctorParameters=function(){return[{type:t.RestService}]};var m="IdentityServer.ApiResourcesComponent",b=function(){function e(e,t,r,n,i){this.list=e,this.service=t,this.confirmationService=r,this.fb=n,this.injector=i,this.createModalVisible=!1,this.editModalVisible=!1}return e.prototype.ngOnInit=function(){},e.prototype.onAdd=function(){this.newScopeForm=this.fb.group({name:["",[o.Validators.required]],displayName:[""],description:[""],allowedAccessTokenSigningAlgorithms:[""],showInDiscoveryDocument:[!1]}),this.createModalVisible=!0},e.prototype.onEdit=function(e){var t=this;this.service.get(e).pipe(a.take(1)).subscribe((function(e){t.editSelectedRecord=e,t.editProperties=e.properties,t.editSecrets=e.secrets;var r=new n.FormPropData(t.injector,e);t.editScopeForm=n.generateFormFromProps(r),t.editScopeForm.patchValue({scopes:e.scopes.map((function(e){return e.scope}))}),t.editClaims=e.userClaims.map((function(e){return{id:e.apiResourceId,name:e.type,left:!0}})),t.editModalVisible=!0}))},e.prototype.create=function(e){var t=this;this.service.create(e).pipe(a.take(1)).subscribe((function(e){t.createModalVisible=!1,t.list.get()}))},e.prototype.edit=function(e){var t=this,r=Object.assign(Object.assign({},e),{scopes:e.scopes.map((function(e){return{scope:e}}))});this.service.update(this.editSelectedRecord.id,r).pipe(a.take(1)).subscribe((function(e){t.editModalVisible=!1,t.list.get()}))},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentityServer::ApiResourcesDeletionWarningMessage","AbpIdentityServer::AreYouSure",{messageLocalizationParams:[t]}).pipe(a.filter((function(e){return e===r.Confirmation.Status.confirm})),a.switchMap((function(t){return n.service.delete(e)})),a.take(1)).subscribe((function(e){n.list.get()}))},e}();b.decorators=[{type:i.Component,args:[{selector:"abp-api-resources",template:'<abp-identity-server-entity-base\r\n  [list]="list"\r\n  [service]="service"\r\n  entityName="ApiResources"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="createModalVisible"\r\n  [(visible)]="createModalVisible"\r\n  (save)="create($event)"\r\n>\r\n  <abp-identity-server-modal-info-tab [form]="newScopeForm"></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab></abp-identity-server-modal-claims-tab>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="editModalVisible"\r\n  [(visible)]="editModalVisible"\r\n  (save)="edit($event)"\r\n  type="Edit"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]="editScopeForm"\r\n    [selectedRecord]="editSelectedRecord"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab\r\n    [claims]="editClaims"\r\n  ></abp-identity-server-modal-claims-tab>\r\n  <abp-identity-server-modal-secrets-tab\r\n    [selectedSecrets]="editSecrets"\r\n  ></abp-identity-server-modal-secrets-tab>\r\n  <abp-identity-server-modal-properties-tab\r\n    [selectedProperties]="editProperties"\r\n  ></abp-identity-server-modal-properties-tab>\r\n</abp-identity-server-modal>\r\n',providers:[t.ListService,{provide:n.EXTENSIONS_IDENTIFIER,useValue:m}]}]}],b.ctorParameters=function(){return[{type:t.ListService},{type:u},{type:r.ConfirmationService},{type:o.FormBuilder},{type:i.Injector}]};var y=function(e){var t=this;this.restService=e,this.apiName="AbpIdentityServer",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity-server/apiScopes",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity-server/apiScopes",params:{id:e}},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/apiScopes/"+e},{apiName:t.apiName})},this.getAllList=function(){return t.restService.request({method:"GET",url:"/api/identity-server/apiScopes/all"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/apiScopes",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,r){return t.restService.request({method:"PUT",url:"/api/identity-server/apiScopes/"+e,body:r},{apiName:t.apiName})}};y.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new y(i.ɵɵinject(t.RestService))},token:y,providedIn:"root"}),y.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],y.ctorParameters=function(){return[{type:t.RestService}]};var v=function(){function e(e,t,r,n,i){this.list=e,this.service=t,this.fb=r,this.confirmationService=n,this.injector=i,this.createModalVisible=!1,this.editModalVisible=!1}return e.prototype.ngOnInit=function(){},e.prototype.onEdit=function(e){var t=this;this.service.get(e).pipe(a.take(1)).subscribe((function(e){t.editSelectedRecord=e;var r=new n.FormPropData(t.injector,e);t.editScopeForm=n.generateFormFromProps(r),t.editClaims=e.userClaims.map((function(e){return{id:e.apiScopeId,name:e.type,left:!0}})),t.editModalVisible=!0}))},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentityServer::ApiScopesDeletionWarningMessage","AbpIdentityServer::AreYouSure",{messageLocalizationParams:[t]}).pipe(a.filter((function(e){return e===r.Confirmation.Status.confirm})),a.switchMap((function(t){return n.service.delete(e)})),a.take(1)).subscribe((function(e){n.list.get()}))},e.prototype.onAdd=function(){this.newScopeForm=this.fb.group({name:["",[o.Validators.required]],displayName:[""],description:[""],required:[!1],enabled:[!1],emphasize:[!1],showInDiscoveryDocument:[!1]}),this.createModalVisible=!0},e.prototype.create=function(e){var t=this;this.service.create(Object.assign(Object.assign({},e),{properties:[]})).pipe(a.take(1)).subscribe((function(e){t.createModalVisible=!1,t.list.get()}))},e.prototype.edit=function(e){var t=this;this.service.update(this.editSelectedRecord.id,e).pipe(a.take(1)).subscribe((function(e){t.editModalVisible=!1,t.list.get()}))},e}();v.decorators=[{type:i.Component,args:[{selector:"abp-api-scopes",template:'<abp-identity-server-entity-base\r\n  [list]="list"\r\n  [service]="service"\r\n  entityName="ApiScopes"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="createModalVisible"\r\n  [(visible)]="createModalVisible"\r\n  (save)="create($event)"\r\n>\r\n  <abp-identity-server-modal-info-tab [form]="newScopeForm"></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab></abp-identity-server-modal-claims-tab>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="editModalVisible"\r\n  [(visible)]="editModalVisible"\r\n  (save)="edit($event)"\r\n  type="Edit"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]="editScopeForm"\r\n    [selectedRecord]="editSelectedRecord"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab\r\n    [claims]="editClaims"\r\n  ></abp-identity-server-modal-claims-tab>\r\n  <abp-identity-server-modal-properties-tab\r\n    [selectedProperties]="editSelectedRecord.properties"\r\n  ></abp-identity-server-modal-properties-tab>\r\n</abp-identity-server-modal>\r\n',providers:[t.ListService,{provide:n.EXTENSIONS_IDENTIFIER,useValue:"IdentityServer.ApiScopesComponent"}]}]}],v.ctorParameters=function(){return[{type:t.ListService},{type:y},{type:o.FormBuilder},{type:r.ConfirmationService},{type:i.Injector}]};
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
var f=function(e,t){return(f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};function g(e,t){function r(){this.constructor=e}f(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function h(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function S(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e}Object.create,Object.create;var I=function(e){var t=this;this.restService=e,this.apiName="AbpIdentityServer",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity-server/clients",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity-server/clients",params:{id:e}},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/clients/"+e},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/clients",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,r){return t.restService.request({method:"PUT",url:"/api/identity-server/clients/"+e,body:r},{apiName:t.apiName})}};I.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new I(i.ɵɵinject(t.RestService))},token:I,providedIn:"root"}),I.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],I.ctorParameters=function(){return[{type:t.RestService}]};var C=function(e){var t=this;this.restService=e,this.apiName="AbpIdentityServer",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity-server/identity-resources",body:e},{apiName:t.apiName})},this.createStandardResources=function(){return t.restService.request({method:"POST",url:"/api/identity-server/identity-resources/create-standard-resources"},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity-server/identity-resources",params:{id:e}},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/identity-resources/"+e},{apiName:t.apiName})},this.getAllList=function(){return t.restService.request({method:"GET",url:"/api/identity-server/identity-resources/all"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity-server/identity-resources",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,r){return t.restService.request({method:"PUT",url:"/api/identity-server/identity-resources/"+e,body:r},{apiName:t.apiName})}};C.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new C(i.ɵɵinject(t.RestService))},token:C,providedIn:"root"}),C.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],C.ctorParameters=function(){return[{type:t.RestService}]};var A=function(){function e(e,t,r,n,i,o,a){var s=this;this.list=e,this.service=t,this.apiResourceService=r,this.identityResourceService=n,this.confirmationService=i,this.fb=o,this.injector=a,this.createModalVisible=!1,this.editModalVisible=!1,this.identityResourcesPicklistValue=[],this.apiResourcesPicklistValue=[],this.visiblePermissions=!1,this.onVisiblePermissionChange=function(e){s.visiblePermissions=e}}return e.prototype.setEditApiResources=function(e){var t=N(e);this.editApiResources=this.apiResourcesPicklistValue.map((function(e){return Object.assign(Object.assign({},e),{left:t(e)})}))},e.prototype.setEditIdentityResources=function(e){var t=N(e);this.editIdentityResources=this.identityResourcesPicklistValue.map((function(e){return Object.assign(Object.assign({},e),{left:t(e)})}))},e.prototype.setEditGrantTypes=function(e){this.editGrantTypes=e.allowedGrantTypes.map((function(e){return e.grantType}))},e.prototype.ngOnInit=function(){var e=this;this.apiResourceService.getAllList().pipe(T()).subscribe((function(t){return e.apiResourcesPicklistValue=t})),this.identityResourceService.getAllList().pipe(T()).subscribe((function(t){return e.identityResourcesPicklistValue=t}))},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e.prototype.onAdd=function(){this.newScopeForm=this.fb.group({clientId:["",[o.Validators.required]],clientName:["",[o.Validators.required]],description:[""],clientUri:[""],logoUri:[""],requireConsent:[!1]}),this.createModalVisible=!0},e.prototype.create=function(e){var t=this;this.service.create(Object.assign(Object.assign({},e),{scopes:S(e.identityResources,e.apiResources).map((function(e){return e.name}))})).subscribe((function(e){t.createModalVisible=!1,t.list.get()}))},e.prototype.onEdit=function(e){var t=this;this.service.get(e).subscribe((function(e){t.editSelectedRecord=e;var r=new n.FormPropData(t.injector,e);t.editScopeForm=n.generateFormFromProps(r),t.editModalVisible=!0,t.setEditApiResources(e),t.setEditIdentityResources(e),t.setEditGrantTypes(e)}))},e.prototype.delete=function(e){var t=this,n=e.id,i=e.clientId;this.confirmationService.warn("AbpIdentityServer::ClientsDeletionWarningMessage","AbpIdentityServer::AreYouSure",{messageLocalizationParams:[i]}).pipe(a.filter((function(e){return e===r.Confirmation.Status.confirm})),a.switchMap((function(e){return t.service.delete(n)}))).subscribe((function(e){t.list.get()}))},e.prototype.edit=function(e){var t=this;this.service.update(this.editSelectedRecord.id,this.mapEditForm(e)).subscribe((function(e){t.editModalVisible=!1,t.list.get()}))},e.prototype.mapEditForm=function(e){var t=e.postLogoutRedirectUris.map((function(e){return e.postLogoutRedirectUri})),r=e.redirectUris.map((function(e){return e.redirectUri})),n=e.allowedCorsOrigins.map((function(e){return e.origin})),i=e.identityProviderRestrictions.map((function(e){return e.provider})),o=e.apiResources.concat(e.identityResources).map((function(e){return e.name}));return Object.assign(Object.assign({},e),{postLogoutRedirectUris:t,redirectUris:r,allowedCorsOrigins:n,identityProviderRestrictions:i,scopes:o})},e}();function N(e){return function(t){var r=t.name;return e.allowedScopes.findIndex((function(e){return e.scope===r}))>-1}}function T(){return a.map((function(e){return e.map((function(e){return{displayName:e.displayName||e.name,name:e.name,left:!1}}))}))}A.decorators=[{type:i.Component,args:[{selector:"abp-clients",template:'<abp-identity-server-entity-base\r\n  [list]="list"\r\n  [service]="service"\r\n  entityName="Clients"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="createModalVisible"\r\n  [(visible)]="createModalVisible"\r\n  (save)="create($event)"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]="newScopeForm"\r\n    title="Basic"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-clients-modal-uris-tab></abp-clients-modal-uris-tab>\r\n  <abp-identity-server-modal-secrets-tab></abp-identity-server-modal-secrets-tab>\r\n\r\n  <abp-identity-server-modal-tab-group title="Resources">\r\n    <abp-clients-modal-resources-tab\r\n      title="IdentityResources"\r\n      [resources]="identityResourcesPicklistValue"\r\n      fieldName="identityResources"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n    <abp-clients-modal-resources-tab\r\n      title="ApiResources"\r\n      [resources]="apiResourcesPicklistValue"\r\n      fieldName="apiResources"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="editModalVisible"\r\n  [(visible)]="editModalVisible"\r\n  (save)="edit($event)"\r\n  type="Edit"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    title="Details"\r\n    [form]="editScopeForm"\r\n    [selectedRecord]="editSelectedRecord"\r\n  ></abp-identity-server-modal-info-tab>\r\n\r\n  <abp-identity-server-modal-tab-group title="ApplicationUrls">\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title="Callback"\r\n      formTitle="CallbackUrl"\r\n      [fields]="[{ name: \'redirectUri\', title: \'Uri\' }]"\r\n      fieldName="redirectUris"\r\n      [selected]="editSelectedRecord?.redirectUris"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title="Signout"\r\n      formTitle="SignoutUrl"\r\n      [fields]="[{ name: \'postLogoutRedirectUri\', title: \'Uri\' }]"\r\n      fieldName="postLogoutRedirectUris"\r\n      [selected]="editSelectedRecord?.postLogoutRedirectUris"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title="CORS"\r\n      formTitle="AllowedCorsOrigins"\r\n      [fields]="[{ name: \'origin\', title: \'Uri\' }]"\r\n      fieldName="allowedCorsOrigins"\r\n      [selected]="editSelectedRecord?.allowedCorsOrigins"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n  <abp-identity-server-modal-secrets-tab\r\n    [selectedSecrets]="editSelectedRecord?.clientSecrets"\r\n    fieldName="clientSecrets"\r\n  ></abp-identity-server-modal-secrets-tab>\r\n  <abp-identity-server-modal-tab-group title="Resources">\r\n    <abp-clients-modal-resources-tab\r\n      title="IdentityResources"\r\n      [resources]="editIdentityResources"\r\n      fieldName="identityResources"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n    <abp-clients-modal-resources-tab\r\n      title="ApiResources"\r\n      [resources]="editApiResources"\r\n      fieldName="apiResources"\r\n    >\r\n    </abp-clients-modal-resources-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n\r\n  <abp-identity-server-modal-tab-group title="Advanced">\r\n    <abp-clients-modal-tokens-tab [selected]="editSelectedRecord"></abp-clients-modal-tokens-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title="Claims"\r\n      [fields]="[\r\n        { name: \'type\', title: \'Type\' },\r\n        { name: \'value\', title: \'Value\' }\r\n      ]"\r\n      fieldName="claims"\r\n      [selected]="editSelectedRecord?.claims"\r\n      [checkboxValue]="editSelectedRecord?.alwaysSendClientClaims"\r\n      checkboxFieldName="alwaysSendClientClaims"\r\n      checkboxLabel="AlwaysSendClientClaims"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-clients-modal-grant-types-tab\r\n      [selected]="editGrantTypes"\r\n    ></abp-clients-modal-grant-types-tab>\r\n    <abp-identity-server-modal-free-text-values-tab\r\n      title="Restrictions"\r\n      [fields]="[{ name: \'provider\', title: \'Name\' }]"\r\n      fieldName="identityProviderRestrictions"\r\n      [selected]="editSelectedRecord?.identityProviderRestrictions"\r\n      [checkboxValue]="editSelectedRecord?.enableLocalLogin"\r\n      checkboxFieldName="enableLocalLogin"\r\n      checkboxLabel="EnableLocalLogin"\r\n    ></abp-identity-server-modal-free-text-values-tab>\r\n    <abp-identity-server-modal-properties-tab\r\n      [selectedProperties]="editSelectedRecord.properties"\r\n    ></abp-identity-server-modal-properties-tab>\r\n  </abp-identity-server-modal-tab-group>\r\n</abp-identity-server-modal>\r\n\r\n<abp-permission-management\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'C\' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visiblePermissions, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n  }"\r\n  [(visible)]="visiblePermissions"\r\n  providerName="C"\r\n  [providerKey]="providerKey"\r\n>\r\n</abp-permission-management>\r\n',providers:[t.ListService,{provide:n.EXTENSIONS_IDENTIFIER,useValue:"IdentityServer.ClientsComponent"}]}]}],A.ctorParameters=function(){return[{type:t.ListService},{type:I},{type:u},{type:C},{type:r.ConfirmationService},{type:o.FormBuilder},{type:i.Injector}]};var R=function(){function e(){}return e.prototype.isValid=function(){return!0},e.prototype.getValue=function(){return{}},e}();R.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-tab",template:"<ng-template><ng-content></ng-content></ng-template>"}]}],R.propDecorators={title:[{type:i.Input}],template:[{type:i.ViewChild,args:[i.TemplateRef]}]};var x=function(e){function t(){var t=e.apply(this,S(arguments))||this;return t.fieldName="scopes",t}return g(t,e),t.prototype.getValue=function(){var e;return(e={})[this.fieldName]=this.resources.filter((function(e){return e.left})),e},t}(R);x.decorators=[{type:i.Component,args:[{selector:"abp-clients-modal-resources-tab",template:'<ng-template>\r\n  <h2>{{ \'AbpIdentityServer::\' + title | abpLocalization }}</h2>\r\n\r\n  <abp-picklist\r\n    trackByProp="name"\r\n    bindLabel="displayName"\r\n    [leftListTitle]="\'AbpIdentityServer::Assigned\' | abpLocalization"\r\n    [rightListTitle]="\'AbpIdentityServer::Available\' | abpLocalization"\r\n    [(ngModel)]="resources"\r\n  ></abp-picklist>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:x}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],x.propDecorators={resources:[{type:i.Input}],fieldName:[{type:i.Input}]};var E=function(e){function t(t){var r=e.call(this)||this;return r.fb=t,r.title="Tokens",r.form=r.fb.group({accessTokenLifetime:[0],accessTokenType:[0],consentLifetime:[0],pairWiseSubjectSalt:[""],includeJwtId:[!1],userSsoLifetime:[0],userCodeType:[""],deviceCodeLifetime:[0],requirePkce:[!1],requireClientSecret:[!1]}),r}return g(t,e),Object.defineProperty(t.prototype,"selected",{set:function(e){this.form.patchValue(e)},enumerable:!1,configurable:!0}),t.prototype.getValue=function(){return this.form.value},t}(R);E.decorators=[{type:i.Component,args:[{selector:"abp-clients-modal-tokens-tab",template:'<ng-template>\r\n  <h3>{{ \'AbpIdentityServer::\' + title | abpLocalization }}</h3>\r\n  <div [formGroup]="form">\r\n    <div class="form-group">\r\n      <label for="Client_AccessTokenLifetime">{{\r\n        \'AbpIdentityServer::AccessTokenLifetime\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="number"\r\n        id="Client_AccessTokenLifetime"\r\n        name="Client.AccessTokenLifetime"\r\n        class="form-control"\r\n        formControlName="accessTokenLifetime"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="Client_AccessTokenType">{{\r\n        \'AbpIdentityServer::AccessTokenType\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="number"\r\n        id="Client_AccessTokenType"\r\n        name="Client.AccessTokenType"\r\n        class="form-control"\r\n        formControlName="accessTokenType"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="Client_ConsentLifetime">{{\r\n        \'AbpIdentityServer::ConsentLifetime\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="number"\r\n        id="Client_ConsentLifetime"\r\n        name="Client.ConsentLifetime"\r\n        class="form-control"\r\n        formControlName="consentLifetime"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="Client_PairWiseSubjectSalt">{{\r\n        \'AbpIdentityServer::PairWiseSubjectSalt\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="text"\r\n        data-val="true"\r\n        id="Client_PairWiseSubjectSalt"\r\n        name="Client.PairWiseSubjectSalt"\r\n        class="form-control"\r\n        formControlName="pairWiseSubjectSalt"\r\n      />\r\n    </div>\r\n    <div class="custom-checkbox custom-control mb-2">\r\n      <input\r\n        type="checkbox"\r\n        id="Client_IncludeJwtId"\r\n        name="Client.IncludeJwtId"\r\n        class="custom-control-input"\r\n        formControlName="includeJwtId"\r\n      /><label class="custom-control-label" for="Client_IncludeJwtId">{{\r\n        \'AbpIdentityServer::IncludeJwtId\' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="Client_UserSsoLifetime">{{\r\n        \'AbpIdentityServer::UserSsoLifetime\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="number"\r\n        id="Client_UserSsoLifetime"\r\n        name="Client.UserSsoLifetime"\r\n        class="form-control"\r\n        formControlName="userSsoLifetime"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="Client_UserCodeType">{{\r\n        \'AbpIdentityServer::UserCodeType\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="text"\r\n        id="Client_UserCodeType"\r\n        name="Client.UserCodeType"\r\n        value=""\r\n        class="form-control"\r\n        formControlName="userCodeType"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="Client_DeviceCodeLifetime">{{\r\n        \'AbpIdentityServer::DeviceCodeLifetime\' | abpLocalization\r\n      }}</label\r\n      ><input\r\n        type="number"\r\n        id="Client_DeviceCodeLifetime"\r\n        name="Client.DeviceCodeLifetime"\r\n        class="form-control"\r\n        formControlName="deviceCodeLifetime"\r\n      />\r\n    </div>\r\n    <div class="custom-checkbox custom-control mb-2">\r\n      <input\r\n        type="checkbox"\r\n        id="client-require-pkce"\r\n        class="custom-control-input"\r\n        formControlName="requirePkce"\r\n      /><label class="custom-control-label" for="client-require-pkce">{{\r\n        \'AbpIdentityServer::RequirePkce\' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class="custom-checkbox custom-control mb-2">\r\n      <input\r\n        type="checkbox"\r\n        id="client-require-client-secret"\r\n        class="custom-control-input"\r\n        formControlName="requireClientSecret"\r\n      /><label class="custom-control-label" for="client-require-client-secret">{{\r\n        \'AbpIdentityServer::RequireClientSecret\' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:E}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],E.ctorParameters=function(){return[{type:o.FormBuilder}]},E.propDecorators={selected:[{type:i.Input}]};var k=function(e){function t(){var t=e.apply(this,S(arguments))||this;return t.title="Uris",t}return g(t,e),t.prototype.getValue=function(){return{callbackUrl:this.callbackUrl,logoutUrl:this.logoutUrl}},t}(R);k.decorators=[{type:i.Component,args:[{selector:"abp-clients-modal-uris-tab",template:'<ng-template>\r\n  <div class="form-group">\r\n    <label for="client-callback-url">{{ \'AbpIdentityServer::CallbackUrl\' | abpLocalization }}</label\r\n    ><input\r\n      type="text"\r\n      id="client-callback-url"\r\n      name="client-callback-url"\r\n      class="form-control"\r\n      [(ngModel)]="callbackUrl"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="client-logout-url">{{ \'AbpIdentityServer::LogoutUrl\' | abpLocalization }}</label\r\n    ><input\r\n      type="text"\r\n      id="client-logout-url"\r\n      name="client-logout-url"\r\n      class="form-control"\r\n      [(ngModel)]="logoutUrl"\r\n    />\r\n  </div>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:k}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}];var L=function(){function e(e,t,r,n,i){this.list=e,this.service=t,this.confirmationService=r,this.fb=n,this.injector=i,this.createModalVisible=!1,this.editModalVisible=!1}return e.prototype.ngOnInit=function(){},e.prototype.onAdd=function(){this.newScopeForm=this.fb.group({name:["",[o.Validators.required]],displayName:[""],description:[""],required:[!1],enabled:[!0],emphasize:[!1],showInDiscoveryDocument:[!0]}),this.createModalVisible=!0},e.prototype.create=function(e){var t=this;this.service.create(Object.assign(Object.assign({},e),{properties:[]})).pipe(a.take(1)).subscribe((function(e){t.createModalVisible=!1,t.list.get()}))},e.prototype.onEdit=function(e){var t=this;this.service.get(e).pipe(a.take(1)).subscribe((function(e){t.editSelectedRecord=e;var r=new n.FormPropData(t.injector,e);t.editScopeForm=n.generateFormFromProps(r),t.editClaims=e.userClaims.map((function(e){return{id:e.identityResourceId,name:e.type,left:!0}})),t.editProperties=e.properties,t.editModalVisible=!0}))},e.prototype.edit=function(e){var t=this;this.service.update(this.editSelectedRecord.id,e).pipe(a.take(1)).subscribe((function(e){t.editModalVisible=!1,t.list.get()}))},e.prototype.onCreateStandardResources=function(){var e=this;this.confirmationService.warn("AbpIdentityServer::CreateStandardIdentityResourcesWarningMessage","AbpIdentityServer::AreYouSure").pipe(a.filter((function(e){return e===r.Confirmation.Status.confirm})),a.switchMap((function(t){return e.service.createStandardResources()})),a.take(1)).subscribe()},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentityServer::IdentityResourcesDeletionWarningMessage","AbpIdentityServer::AreYouSure",{messageLocalizationParams:[t]}).pipe(a.filter((function(e){return e===r.Confirmation.Status.confirm})),a.switchMap((function(t){return n.service.delete(e)})),a.take(1)).subscribe((function(e){n.list.get()}))},e}();L.decorators=[{type:i.Component,args:[{selector:"abp-identity-resources",template:'<abp-identity-server-entity-base\r\n  [list]="list"\r\n  [service]="service"\r\n  entityName="IdentityResources"\r\n></abp-identity-server-entity-base>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="createModalVisible"\r\n  [(visible)]="createModalVisible"\r\n  (save)="create($event)"\r\n>\r\n  <abp-identity-server-modal-info-tab [form]="newScopeForm"></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab></abp-identity-server-modal-claims-tab>\r\n</abp-identity-server-modal>\r\n\r\n<abp-identity-server-modal\r\n  *ngIf="editModalVisible"\r\n  [(visible)]="editModalVisible"\r\n  (save)="edit($event)"\r\n  type="Edit"\r\n>\r\n  <abp-identity-server-modal-info-tab\r\n    [form]="editScopeForm"\r\n    [selectedRecord]="editSelectedRecord"\r\n  ></abp-identity-server-modal-info-tab>\r\n  <abp-identity-server-modal-claims-tab\r\n    [claims]="editClaims"\r\n  ></abp-identity-server-modal-claims-tab>\r\n  <abp-identity-server-modal-properties-tab\r\n    [selectedProperties]="editProperties"\r\n  ></abp-identity-server-modal-properties-tab>\r\n</abp-identity-server-modal>\r\n',providers:[t.ListService,{provide:n.EXTENSIONS_IDENTIFIER,useValue:"IdentityServer.IdentityResourcesComponent"}]}]}],L.ctorParameters=function(){return[{type:t.ListService},{type:C},{type:r.ConfirmationService},{type:o.FormBuilder},{type:i.Injector}]};var V=function(){function e(){}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.data$=this.list.hookToQuery((function(t){return e.service.getList(t)}))},e}();V.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-entity-base",template:'<ng-container *ngIf="data$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">\r\n        {{ \'AbpIdentityServer::\' + entityName | abpLocalization }}\r\n      </h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div id="data-tables-table-filter" class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data.items"\r\n        [recordsTotal]="data.totalCount"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n'}]}],V.ctorParameters=function(){return[]},V.propDecorators={entityName:[{type:i.Input}],list:[{type:i.Input}],service:[{type:i.Input}]};var P=function(e){function t(t){var r=e.call(this,t)||this;return r.injector=t,r.leftListTitle="",r.rightListTitle="",r.trackByProp="id",r.bindLabel="displayName",r}return g(t,e),t.prototype.trackByFn=function(){var e=this;return function(t,r){return r[e.trackByProp]||t}},t.prototype.transferItem=function(e){var t=this,r=this.value.findIndex((function(r){return r[t.bindLabel]===e}));this.value=S(this.value.slice(0,r),[Object.assign(Object.assign({},this.value[r]),{left:!this.value[r].left})],this.value.slice(r+1))},t}(t.AbstractNgModelComponent);P.decorators=[{type:i.Component,args:[{selector:"abp-picklist",template:'<div class="row">\r\n  <div class="col col-6">\r\n    <div class="card p-1 p-md-2">\r\n      <div class="card-header px-1 px-md-2 px-lg-3">{{ leftListTitle | abpLocalization }}</div>\r\n      <div class="card-body px-1 px-md-2 px-lg-3" style="height:320px; overflow: auto;">\r\n        <button\r\n          type="button"\r\n          class="ownedClaim btn btn-block btn-primary btn-sm mb-2 mt-0 text-truncate text-left px-1 px-md-2"\r\n          *abpFor="\r\n            let left of value || [];\r\n            filterBy: \'left\';\r\n            filterVal: true;\r\n            trackBy: trackByFn;\r\n            let i = index\r\n          "\r\n          [id]="left[bindLabel]"\r\n          (click)="transferItem(left[bindLabel])"\r\n        >\r\n          <i class="fa fa-long-arrow-right"></i>\r\n          {{ left[bindLabel] }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="col col-6">\r\n    <div class="card p-1 p-md-2">\r\n      <div class="card-header px-1 px-md-2 px-lg-3">{{ rightListTitle | abpLocalization }}</div>\r\n      <div class="card-body px-1 px-md-2 px-lg-3" style="height:320px; overflow: auto;">\r\n        <button\r\n          type="button"\r\n          class="otherClaim btn btn-block btn-outline-primary btn-sm mb-2 mt-0 text-truncate text-left px-1 px-md-2"\r\n          *abpFor="\r\n            let right of value || [];\r\n            filterBy: \'left\';\r\n            filterVal: false;\r\n            trackBy: trackByFn;\r\n            let i = index\r\n          "\r\n          [id]="right[bindLabel]"\r\n          (click)="transferItem(right[bindLabel])"\r\n        >\r\n          <i class="fa fa-long-arrow-left"></i>\r\n          {{ right[bindLabel] }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',providers:[{provide:o.NG_VALUE_ACCESSOR,useExisting:i.forwardRef((function(){return P})),multi:!0}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],P.ctorParameters=function(){return[{type:i.Injector}]},P.propDecorators={leftListTitle:[{type:i.Input}],rightListTitle:[{type:i.Input}],trackByProp:[{type:i.Input}],bindLabel:[{type:i.Input}]};var O,D,_,w,M,j=n.EntityAction.createMany([{text:"AbpIdentityServer::Edit",action:function(e){e.getInjected(b).onEdit(e.record.id)},permission:"IdentityServer.ApiResource.Update"},{text:"AbpIdentityServer::ChangeHistory",action:function(e){e.getInjected(s.SHOW_ENTITY_HISTORY)(e.record.id,"Volo.Abp.IdentityServer.ApiResources.ApiResource")},permission:"AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.ApiResources.ApiResource",visible:function(e){return Boolean(e.getInjected(s.SHOW_ENTITY_HISTORY,null))}},{text:"AbpIdentityServer::Delete",action:function(e){e.getInjected(b).delete(e.record.id,e.record.name)},permission:"IdentityServer.ApiResource.Delete"}]),F=n.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentityServer::Name",sortable:!0,columnWidth:250},{type:"string",name:"displayName",displayName:"AbpIdentityServer::DisplayName",sortable:!0,columnWidth:350},{type:"string",name:"description",displayName:"AbpIdentityServer::Description",sortable:!0,columnWidth:450}]),q=n.FormProp.createMany([{type:"string",name:"name",displayName:"AbpIdentityServer::Name",id:"name",validators:function(){return[o.Validators.required]}},{type:"string",name:"displayName",displayName:"AbpIdentityServer::DisplayName",id:"displayName"},{type:"string",name:"description",displayName:"AbpIdentityServer::Description",id:"description"},{type:"string",name:"allowedAccessTokenSigningAlgorithms",displayName:"AbpIdentityServer::AllowedAccessTokenSigningAlgorithms",id:"allowedAccessTokenSigningAlgorithms"},{type:"boolean",name:"showInDiscoveryDocument",displayName:"AbpIdentityServer::ShowInDiscoveryDocument",id:"showInDiscoveryDocument",defaultValue:!1}]),U=q.concat(n.FormProp.createMany([{type:"boolean",name:"enabled",displayName:"AbpIdentityServer::Enabled",id:"enabled",defaultValue:!1},{type:"multiselect",name:"scopes",displayName:"AbpIdentityServer::Scopes",id:"scopes",options:function(e){return e.getInjected(y).getAllList().pipe(a.map((function(e){return e.map((function(e){return{key:e.displayName,value:e.name}}))})))}}])),z=n.ToolbarAction.createMany([{text:"AbpIdentityServer::CreateANewResource",action:function(e){e.getInjected(b).onAdd()},permission:"IdentityServer.ApiResource.Create",icon:"fa fa-plus"}]),B=n.EntityAction.createMany([{text:"AbpIdentityServer::Edit",action:function(e){e.getInjected(A).onEdit(e.record.id)},permission:"IdentityServer.Client.Update"},{text:"AbpIdentityServer::Permission:ManagePermissions",action:function(e){e.getInjected(A).openPermissionsModal(e.record.clientId)},permission:"IdentityServer.Client.ManagePermissions"},{text:"AbpIdentityServer::ChangeHistory",action:function(e){e.getInjected(s.SHOW_ENTITY_HISTORY)(e.record.id,"Volo.Abp.IdentityServer.Clients.Client")},permission:"AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.Clients.Client",visible:function(e){return Boolean(e.getInjected(s.SHOW_ENTITY_HISTORY,null))}},{text:"AbpIdentityServer::Delete",action:function(e){e.getInjected(A).delete(e.record)},permission:"IdentityServer.Client.Delete"}]),Y=n.EntityProp.createMany([{type:"string",name:"clientId",displayName:"AbpIdentityServer::ClientId",sortable:!0}]),W=n.FormProp.createMany([{type:"string",name:"clientId",displayName:"AbpIdentityServer::ClientId",id:"Client_ClientId",validators:function(){return[o.Validators.required]}},{type:"string",name:"clientName",displayName:"AbpIdentityServer::ClientName",id:"Client_ClientName",validators:function(){return[o.Validators.required]}},{type:"text",name:"description",displayName:"AbpIdentityServer::Description",id:"Client_Description"},{type:"string",name:"clientUri",displayName:"AbpIdentityServer::ClientUri",id:"Client_ClientUri"},{type:"string",name:"logoUri",displayName:"AbpIdentityServer::LogoUri",id:"Client_LogoUri"},{type:"boolean",name:"requireConsent",displayName:"AbpIdentityServer::RequireConsent",id:"Client_RequireConsent",defaultValue:!1}]),G=W.filter((function(e){return"clientId"!==e.name})).concat(n.FormProp.createMany([{type:"boolean",name:"requireRequestObject",displayName:"AbpIdentityServer::RequireRequestObject",id:"Client_RequireRequestObject",defaultValue:!1},{type:"boolean",name:"allowRememberConsent",displayName:"AbpIdentityServer::AllowRememberConsent",id:"Client_AllowRememberConsent",defaultValue:!0},{type:"boolean",name:"enabled",displayName:"AbpIdentityServer::Enabled",id:"Client_Enabled",defaultValue:!1},{type:"boolean",name:"allowOfflineAccess",displayName:"AbpIdentityServer::AllowOfflineAccess",id:"Client_AllowOfflineAccess",defaultValue:!1},{type:"string",name:"frontChannelLogoutUri",displayName:"AbpIdentityServer::FrontChannelLogoutUri",id:"Client_FrontChannelLogoutUri"},{type:"boolean",name:"frontChannelLogoutSessionRequired",displayName:"AbpIdentityServer::FrontChannelLogoutSessionRequired",id:"Client_FrontChannelLogoutSessionRequired"},{type:"string",name:"backChannelLogoutUri",displayName:"AbpIdentityServer::BackChannelLogoutUri",id:"Client_BackChannelLogoutUri"},{type:"boolean",name:"backChannelLogoutSessionRequired",displayName:"AbpIdentityServer::BackChannelLogoutSessionRequired",id:"Client_BackChannelLogoutSessionRequired",defaultValue:!0},{type:"string",name:"allowedIdentityTokenSigningAlgorithms",displayName:"AbpIdentityServer::AllowedIdentityTokenSigningAlgorithms",id:"Client_AllowedIdentityTokenSigningAlgorithms"}])),H=n.ToolbarAction.createMany([{text:"AbpIdentityServer::CreateANewClient",action:function(e){e.getInjected(A).onAdd()},permission:"IdentityServer.Client.Create",icon:"fa fa-plus"}]),$=n.EntityAction.createMany([{text:"AbpIdentityServer::Edit",action:function(e){e.getInjected(L).onEdit(e.record.id)},permission:"IdentityServer.IdentityResource.Update"},{text:"AbpIdentityServer::ChangeHistory",action:function(e){e.getInjected(s.SHOW_ENTITY_HISTORY)(e.record.id,"Volo.Abp.IdentityServer.IdentityResources.IdentityResource")},permission:"AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.IdentityResources.IdentityResource",visible:function(e){return Boolean(e.getInjected(s.SHOW_ENTITY_HISTORY,null))}},{text:"AbpIdentityServer::Delete",action:function(e){e.getInjected(L).delete(e.record.id,e.record.name)},permission:"IdentityServer.IdentityResource.Delete"}]),K=n.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentityServer::Name",sortable:!0,columnWidth:250},{type:"string",name:"displayName",displayName:"AbpIdentityServer::DisplayName",sortable:!0,columnWidth:350},{type:"string",name:"description",displayName:"AbpIdentityServer::Description",sortable:!0,columnWidth:450}]),J=n.FormProp.createMany([{type:"string",name:"name",displayName:"AbpIdentityServer::Name",id:"name",validators:function(){return[o.Validators.required]}},{type:"string",name:"displayName",displayName:"AbpIdentityServer::DisplayName",id:"displayName"},{type:"string",name:"description",displayName:"AbpIdentityServer::Description",id:"description"},{type:"boolean",name:"enabled",displayName:"AbpIdentityServer::Enabled",id:"enabled",defaultValue:!0},{type:"boolean",name:"required",displayName:"AbpIdentityServer::Required",id:"required",defaultValue:!1},{type:"boolean",name:"emphasize",displayName:"AbpIdentityServer::Emphasize",id:"emphasize",defaultValue:!1},{type:"boolean",name:"showInDiscoveryDocument",displayName:"AbpIdentityServer::ShowInDiscoveryDocument",id:"showInDiscoveryDocument",defaultValue:!0}]),X=J,Q=n.ToolbarAction.createMany([{text:"AbpIdentityServer::CreateStandardResources",action:function(e){e.getInjected(L).onCreateStandardResources()},permission:"IdentityServer.IdentityResource.Create",icon:"fa fa-cog"},{text:"AbpIdentityServer::CreateANewResource",action:function(e){e.getInjected(L).onAdd()},permission:"IdentityServer.IdentityResource.Create",icon:"fa fa-plus"}]),Z=n.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentityServer::Name",sortable:!0,columnWidth:250},{type:"string",name:"displayName",displayName:"AbpIdentityServer::DisplayName",sortable:!0,columnWidth:350},{type:"string",name:"description",displayName:"AbpIdentityServer::Description",sortable:!0,columnWidth:450}]),ee=n.EntityAction.createMany([{text:"AbpIdentityServer::Edit",action:function(e){e.getInjected(v).onEdit(e.record.id)},permission:"IdentityServer.ApiScope.Update"},{text:"AbpIdentityServer::ChangeHistory",action:function(e){e.getInjected(s.SHOW_ENTITY_HISTORY)(e.record.id,"Volo.Abp.IdentityServer.ApiScopes.ApiScope")},permission:"AuditLogging.ViewChangeHistory:Volo.Abp.IdentityServer.ApiScopes.ApiScope",visible:function(e){return Boolean(e.getInjected(s.SHOW_ENTITY_HISTORY,null))}},{text:"AbpIdentityServer::Delete",action:function(e){e.getInjected(v).delete(e.record.id,e.record.name)},permission:"IdentityServer.ApiScope.Delete"}]),te=n.ToolbarAction.createMany([{text:"AbpIdentityServer::CreateANewScope",action:function(e){e.getInjected(v).onAdd()},permission:"IdentityServer.ApiScope.Create",icon:"fa fa-plus"}]),re=n.FormProp.createMany([{type:"string",name:"name",displayName:"AbpIdentityServer::Name",id:"name",validators:function(){return[o.Validators.required]}},{type:"string",name:"displayName",displayName:"AbpIdentityServer::DisplayName",id:"displayName"},{type:"string",name:"description",displayName:"AbpIdentityServer::Description",id:"description"},{type:"boolean",name:"required",displayName:"AbpIdentityServer::Required",id:"required",defaultValue:!1},{type:"boolean",name:"enabled",displayName:"AbpIdentityServer::Enabled",id:"enabled",defaultValue:!1},{type:"boolean",name:"showInDiscoveryDocument",displayName:"AbpIdentityServer::ShowInDiscoveryDocument",id:"showInDiscoveryDocument",defaultValue:!1},{type:"boolean",name:"emphasize",displayName:"AbpIdentityServer::Emphasize",id:"emphasize",defaultValue:!1}]),ne=re.filter((function(e){return"name"!==e.name})),ie=((O={})["IdentityServer.ApiResourcesComponent"]=j,O["IdentityServer.ClientsComponent"]=B,O["IdentityServer.IdentityResourcesComponent"]=$,O["IdentityServer.ApiScopesComponent"]=ee,O),oe=((D={})["IdentityServer.ApiResourcesComponent"]=z,D["IdentityServer.ClientsComponent"]=H,D["IdentityServer.IdentityResourcesComponent"]=Q,D["IdentityServer.ApiScopesComponent"]=te,D),ae=((_={})["IdentityServer.ApiResourcesComponent"]=F,_["IdentityServer.ClientsComponent"]=Y,_["IdentityServer.IdentityResourcesComponent"]=K,_["IdentityServer.ApiScopesComponent"]=Z,_),se=((w={})["IdentityServer.ApiResourcesComponent"]=q,w["IdentityServer.ClientsComponent"]=W,w["IdentityServer.IdentityResourcesComponent"]=J,w["IdentityServer.ApiScopesComponent"]=re,w),le=((M={})["IdentityServer.ApiResourcesComponent"]=U,M["IdentityServer.ClientsComponent"]=G,M["IdentityServer.IdentityResourcesComponent"]=X,M["IdentityServer.ApiScopesComponent"]=ne,M),ce=new i.InjectionToken("IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS"),pe=new i.InjectionToken("IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS"),de=new i.InjectionToken("IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS"),ue=new i.InjectionToken("IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS"),me=new i.InjectionToken("IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS"),be=function(){function e(e){this.injector=e}return e.prototype.canActivate=function(){var e=this.injector.get(n.ExtensionsService),r=this.injector.get(ce,null)||{},i=this.injector.get(pe,null)||{},o=this.injector.get(de,null)||{},s=this.injector.get(ue,null)||{},l=this.injector.get(me,null)||{},c=this.injector.get(t.ConfigStateService);return n.getObjectExtensionEntitiesFromStore(c,"IdentityServer").pipe(a.map((function(e){var t;return(t={})["IdentityServer.ApiResourcesComponent"]=e.ApiResource,t["IdentityServer.ClientsComponent"]=e.Client,t["IdentityServer.IdentityResourcesComponent"]=e.IdentityResource,t["IdentityServer.ApiScopesComponent"]=e.ApiScope,t})),n.mapEntitiesToContributors(c,"AbpIdentityServer"),a.tap((function(t){n.mergeWithDefaultActions(e.entityActions,ie,r),n.mergeWithDefaultActions(e.toolbarActions,oe,i),n.mergeWithDefaultProps(e.entityProps,ae,t.prop,o),n.mergeWithDefaultProps(e.createFormProps,se,t.createForm,s),n.mergeWithDefaultProps(e.editFormProps,le,t.editForm,l)})),a.mapTo(!0))},e}();be.decorators=[{type:i.Injectable}],be.ctorParameters=function(){return[{type:i.Injector}]};var ye={requiredPolicy:"IdentityServer.IdentityResource",replaceableComponent:{defaultComponent:L,key:"IdentityServer.IdentityResourcesComponent"}},ve={requiredPolicy:"IdentityServer.Client",replaceableComponent:{defaultComponent:A,key:"IdentityServer.ClientsComponent"}},fe={requiredPolicy:"IdentityServer.ApiResource",replaceableComponent:{defaultComponent:b,key:"IdentityServer.ApiResourcesComponent"}},ge={requiredPolicy:"IdentityServer.ApiScope",replaceableComponent:{defaultComponent:v,key:"IdentityServer.ApiScopesComponent"}},he=[{path:"",redirectTo:"identity-resources",pathMatch:"full"},{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard,be],children:[{path:"identity-resources",component:t.ReplaceableRouteContainerComponent,data:ye},{path:"clients",component:t.ReplaceableRouteContainerComponent,data:ve},{path:"api-resources",component:t.ReplaceableRouteContainerComponent,data:fe},{path:"api-scopes",component:t.ReplaceableRouteContainerComponent,data:ge}]}],Se=function(){};Se.decorators=[{type:i.NgModule,args:[{imports:[d.RouterModule.forChild(he)],exports:[d.RouterModule]}]}];var Ie=function(){function e(){var e=this;this.type="Create",this.visibleChange=new i.EventEmitter,this.save=new i.EventEmitter,this.shouldBeDisabled=function(){return!!e.tabs.some((function(e){return!e.isValid()}))}}return e.prototype.ngOnInit=function(){},e.prototype.onVisibleChange=function(e){this.visible=e,this.visibleChange.emit(e)},e.prototype.onSave=function(){if(!this.shouldBeDisabled()){var e=this.tabs.reduce((function(e,t){return Object.assign(Object.assign({},e),t.getValue())}),{});this.save.emit(e)}},e}();Ie.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal",template:'<abp-modal [visible]="visible" (visibleChange)="onVisibleChange($event)">\r\n  <ng-template #abpHeader>\r\n    <h5 class="modal-title" id="modal-basic-title">\r\n      {{ \'AbpIdentityServer::\' + type | abpLocalization }}\r\n    </h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <ul ngbNav #nav="ngbNav" [(activeId)]="activeTab" class="nav-tabs">\r\n      <ng-container *ngFor="let tab of tabs; let outerIndex = index">\r\n        <ng-container *ngIf="tab.innerTabs; else singleTab">\r\n          <li ngbDropdown class="nav-item">\r\n            <a\r\n              class="nav-link pointer"\r\n              [class.active]="activeTab?.startsWith(outerIndex + \'-\')"\r\n              ngbDropdownToggle\r\n              >{{ \'AbpIdentityServer::\' + tab.title | abpLocalization }}</a\r\n            >\r\n            <div ngbDropdownMenu>\r\n              <div ngbDropdownItem *ngFor="let innerTab of tab.innerTabs; let innerIndex = index">\r\n                <ng-container\r\n                  *ngTemplateOutlet="\r\n                    tabTemplateWithoutLink;\r\n                    context: { $implicit: innerTab, index: outerIndex + \'-\' + innerIndex }\r\n                  "\r\n                ></ng-container>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ng-container>\r\n\r\n        <ng-template #singleTab>\r\n          <ng-container\r\n            *ngTemplateOutlet="tabTemplate; context: { $implicit: tab, index: outerIndex + \'\' }"\r\n          ></ng-container>\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <ng-template #tabTemplate let-tab let-index="index">\r\n        <li [ngbNavItem]="index">\r\n          <a ngbNavLink>{{ \'AbpIdentityServer::\' + tab.title | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngTemplateOutlet="tab.template"></ng-container>\r\n          </ng-template>\r\n        </li>\r\n      </ng-template>\r\n\r\n      <ng-template #tabTemplateWithoutLink let-tab let-index="index">\r\n        <div\r\n          class="pointer"\r\n          [class.nav-item]="false"\r\n          [ngbNavItem]="index"\r\n          #item="ngbNavItem"\r\n          (click)="nav.click(item)"\r\n        >\r\n          {{ \'AbpIdentityServer::\' + tab.title | abpLocalization }}\r\n          <ng-template ngbNavContent>\r\n            <ng-container *ngTemplateOutlet="tab.template"></ng-container>\r\n          </ng-template>\r\n        </div>\r\n      </ng-template>\r\n    </ul>\r\n    <div [ngbNavOutlet]="nav" class="mt-2 fade-in-top"></div>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentityServer::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="onSave()" [disabled]="shouldBeDisabled()">{{\r\n      \'AbpIdentityServer::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n',changeDetection:i.ChangeDetectionStrategy.OnPush}]}],Ie.ctorParameters=function(){return[]},Ie.propDecorators={type:[{type:i.Input}],visible:[{type:i.Input}],visibleChange:[{type:i.Output}],save:[{type:i.Output}],tabs:[{type:i.ContentChildren,args:[R]}]};var Ce=function(e){var t=this;this.restService=e,this.apiName="AbpIdentityServer",this.getList=function(){return t.restService.request({method:"GET",url:"/api/identity-server/claim-types"},{apiName:t.apiName})}};Ce.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new Ce(i.ɵɵinject(t.RestService))},token:Ce,providedIn:"root"}),Ce.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],Ce.ctorParameters=function(){return[{type:t.RestService}]};var Ae=function(e){function t(t){var r=e.call(this)||this;return r.service=t,r.title="Claims",r._claims=[],r.definedClaims=[],r.givenClaimsNotContains=function(e){return r.claims.findIndex((function(t){return t.name===e.name}))<0},r}return g(t,e),Object.defineProperty(t.prototype,"claims",{get:function(){return this._claims},set:function(e){this._claims=e||[],this.mergeClaims()},enumerable:!1,configurable:!0}),t.prototype.ngOnInit=function(){var e=this;this.service.getList().pipe(a.take(1)).subscribe((function(t){e.definedClaims=t.map((function(e){return Object.assign(Object.assign({},e),{left:!1})})),e.definedClaims=e.mergeClaims()}))},t.prototype.getValue=function(){return{userClaims:this.definedClaims.filter((function(e){return e.left})).map((function(e){return{type:e.name}}))}},t.prototype.mergeClaims=function(){return S(this.definedClaims.filter(this.givenClaimsNotContains),this.claims)},t}(R);Ae.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-claims-tab",template:'<div class="card shadow-none bg-light">\r\n  <div class="card-body">\r\n    <abp-picklist\r\n      *ngIf="claims"\r\n      trackByProp="name"\r\n      bindLabel="name"\r\n      [leftListTitle]="\'AbpIdentityServer::OwnedClaims\' | abpLocalization"\r\n      [rightListTitle]="\'AbpIdentityServer::NotOwnedClaims\' | abpLocalization"\r\n      [(ngModel)]="definedClaims"\r\n    ></abp-picklist>\r\n  </div>\r\n</div>\r\n',providers:[{provide:R,useExisting:Ae}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],Ae.ctorParameters=function(){return[{type:Ce}]},Ae.propDecorators={claims:[{type:i.Input}]};var Ne=function(e){function t(t){var r=e.call(this)||this;return r.modal=t,r.title="Info",r.selectedRecord={},r}return g(t,e),t.prototype.isValid=function(){return this.form.valid},t.prototype.getValue=function(){return this.form.value},t}(R);Ne.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-info-tab",template:'<ng-template>\r\n  <form [formGroup]="form" (keyup.enter)="modal.onSave()">\r\n    <abp-extensible-form [selectedRecord]="selectedRecord"></abp-extensible-form>\r\n  </form>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:Ne}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],Ne.ctorParameters=function(){return[{type:Ie}]},Ne.propDecorators={form:[{type:i.Input}],selectedRecord:[{type:i.Input}]};var Te=function(e){function t(){var t=e.apply(this,S(arguments))||this;return t.title="Properties",t.fieldName="properties",t._selectedProperties=[],t}return g(t,e),Object.defineProperty(t.prototype,"selectedProperties",{get:function(){return this._selectedProperties},set:function(e){this._selectedProperties=e||[]},enumerable:!1,configurable:!0}),t.prototype.ngAfterViewInit=function(){this.template=this.freeTextTab.template},t.prototype.isValid=function(){return this.freeTextTab.isValid()},t.prototype.getValue=function(){return this.freeTextTab.getValue()},t}(R);Te.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-properties-tab",template:"<abp-identity-server-modal-free-text-values-tab\r\n  [title]=\"title\"\r\n  [fields]=\"[\r\n    { name: 'key', title: 'Key' },\r\n    { name: 'value', title: 'Value' }\r\n  ]\"\r\n  [selected]=\"selectedProperties\"\r\n  [fieldName]=\"fieldName\"\r\n></abp-identity-server-modal-free-text-values-tab>\r\n",providers:[{provide:R,useExisting:Te}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],Te.propDecorators={fieldName:[{type:i.Input}],freeTextTab:[{type:i.ViewChild,args:[R]}],selectedProperties:[{type:i.Input}]};var Re=function(e){function t(t){var r=e.call(this)||this;return r.fb=t,r.title="Secrets",r.fieldName="secrets",r.form=r.fb.group({type:["SharedSecret",o.Validators.required],value:[null,o.Validators.required],description:[null],expiration:[null]}),r._selectedSecrets=[],r.trackByFn=function(e,t){return t.type},r}return g(t,e),Object.defineProperty(t.prototype,"selectedSecrets",{get:function(){return this._selectedSecrets},set:function(e){this._selectedSecrets=e||[]},enumerable:!1,configurable:!0}),t.prototype.ngOnInit=function(){},t.prototype.add=function(){this.form.valid&&(this._selectedSecrets.push(this.form.value),this.form.reset(),this.form.patchValue({type:"SharedSecret"}))},t.prototype.getValue=function(){var e;return(e={})[this.fieldName]=this.selectedSecrets,e},t.prototype.delete=function(e){this._selectedSecrets.splice(e,1)},t}(R);Re.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-secrets-tab",template:'<ng-template>\r\n  <div class="bg-light shadow-none mb-3 card">\r\n    <div class="card-body">\r\n      <form [formGroup]="form" (ngSubmit)="add()" validateOnSubmit>\r\n        <div class="row">\r\n          <div class="col col-6">\r\n            <div class="form-group">\r\n              <label for="secret-type">{{ \'AbpIdentityServer::Type\' | abpLocalization }}</label>\r\n              <select\r\n                class="custom-select form-control"\r\n                id="secret-type"\r\n                name="secret-type"\r\n                formControlName="type"\r\n              >\r\n                <option ngValue="SharedSecret">Shared Secret</option>\r\n                <option ngValue="X509Thumbprint">X509 Thumbprint</option>\r\n              </select>\r\n            </div>\r\n            <div class="form-group">\r\n              <label for="secret-value">{{ \'AbpIdentityServer::Value\' | abpLocalization }}</label\r\n              ><input\r\n                type="text"\r\n                id="secret-value"\r\n                name="secret-value"\r\n                class="form-control"\r\n                formControlName="value"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class="col col-6">\r\n            <div class="form-group">\r\n              <label for="secret-description">{{\r\n                \'AbpIdentityServer::Description\' | abpLocalization\r\n              }}</label\r\n              ><input\r\n                type="text"\r\n                id="secret-description"\r\n                name="secret-description"\r\n                formControlName="description"\r\n                class="form-control"\r\n              />\r\n            </div>\r\n            <div class="form-group">\r\n              <label for="secret-expiration">{{\r\n                \'AbpIdentityServer::Expiration\' | abpLocalization\r\n              }}</label>\r\n              <div class="input-group" validationTarget>\r\n                <input\r\n                  id="secret-expiration"\r\n                  ngbDatepicker\r\n                  #expirationInput\r\n                  #datepicker="ngbDatepicker"\r\n                  class="form-control"\r\n                  name="secret-expiration"\r\n                  formControlName="expiration"\r\n                  readonly\r\n                  (click)="datepicker.toggle()"\r\n                />\r\n                <div *ngIf="expirationInput.value" class="input-group-append">\r\n                  <button\r\n                    class="btn btn-link px-2"\r\n                    type="button"\r\n                    [title]="\'AbpUi::Clear\' | abpLocalization"\r\n                    (click)="datepicker.writeValue(null); datepicker.manualDateChange(null, true)"\r\n                  >\r\n                    <i class="fa fa-times" aria-hidden="true"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <abp-button\r\n          buttonId="AddNewSecretButton"\r\n          iconClass="fa fa-plus"\r\n          buttonClass="float-right btn btn-primary btn-sm"\r\n          buttonType="submit"\r\n        >\r\n          {{ \'AbpIdentityServer::AddNew\' | abpLocalization }}\r\n        </abp-button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  <div *ngIf="selectedSecrets.length" class="table-responsive-sm">\r\n    <table id="secret-table-id" class="table table-hover">\r\n      <thead>\r\n        <tr>\r\n          <th scope="col">{{ \'AbpIdentityServer::Type\' | abpLocalization }}</th>\r\n          <th scope="col">{{ \'AbpIdentityServer::Value\' | abpLocalization }}</th>\r\n          <th scope="col">{{ \'AbpIdentityServer::Description\' | abpLocalization }}</th>\r\n          <th scope="col">{{ \'AbpIdentityServer::Expiration\' | abpLocalization }}</th>\r\n          <th scope="col"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody id="SecretTableBodyId">\r\n        <tr *ngFor="let group of selectedSecrets; trackBy: trackByFn; let i = index">\r\n          <td>\r\n            {{ group.type }}\r\n          </td>\r\n          <td style="max-width: 120px" class="abp-ellipsis-inline" [title]="group.value">\r\n            {{ group.value }}\r\n          </td>\r\n          <td style="max-width: 120px" class="abp-ellipsis-inline" [title]="group.description">\r\n            {{ group.description }}\r\n          </td>\r\n          <td>\r\n            {{ group.expiration | date }}\r\n          </td>\r\n          <td>\r\n            <button\r\n              type="button"\r\n              class="btn btn-outline-danger float-right deleteSecretButton"\r\n              (click)="delete(i)"\r\n            >\r\n              {{ \'AbpIdentityServer::Delete\' | abpLocalization }}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:Re},{provide:c.NgbDateAdapter,useClass:c.NgbDateNativeAdapter}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],Re.ctorParameters=function(){return[{type:o.FormBuilder}]},Re.propDecorators={fieldName:[{type:i.Input}],selectedSecrets:[{type:i.Input}]};var xe=function(){function e(){}return e.prototype.isValid=function(){return!this.innerTabs.some((function(e){return!e.isValid()}))},e.prototype.getValue=function(){return this.innerTabs.reduce((function(e,t){return Object.assign(Object.assign({},e),t.getValue())}),{})},e}();xe.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-tab-group",template:"<ng-template><ng-content></ng-content></ng-template>",providers:[{provide:R,useExisting:xe}]}]}],xe.propDecorators={title:[{type:i.Input}],innerTabs:[{type:i.ContentChildren,args:[R]}]};var Ee=function(e){function t(){var t=e.apply(this,S(arguments))||this;return t.model={},t.trackByFn=function(){return t.fields[0].name},t}return g(t,e),t.prototype.add=function(){var e=this;this.fields.map((function(t){return e.model[t.name]})).filter((function(e){return!!e})).length===this.fields.length&&this.uniqueSelect()&&(this.selected.push(this.model),this.model={})},t.prototype.getValue=function(){var e,t=((e={})[this.fieldName]=this.selected,e);return this.checkboxFieldName&&(t[this.checkboxFieldName]=this.checkboxValue),t},t.prototype.delete=function(e){this.selected.splice(e,1)},t.prototype.contains=function(e,t){return this.selected.findIndex((function(r){return r[e]===t}))>-1},t.prototype.uniqueSelect=function(){var e=this.fields.filter((function(e){return"select"===e.type}))[0];return!(e&&this.contains(e.name,this.model[e.name]))},t}(R);Ee.decorators=[{type:i.Component,args:[{selector:"abp-identity-server-modal-free-text-values-tab",template:'<ng-template>\r\n  <h3>{{ \'AbpIdentityServer::\' + (formTitle || title) | abpLocalization }}</h3>\r\n  <div class="pt-3 pb-5 clearfix">\r\n    <form (submit)="add()">\r\n      <div class="row">\r\n        <ng-container *ngFor="let field of fields">\r\n          <div class="col-{{ 12 / fields.length }}">\r\n            <div class="form-group">\r\n              <label [for]="\'sample-propert-\' + field.name"\r\n                >{{ \'AbpIdentityServer::\' + field.title | abpLocalization }}\r\n              </label>\r\n\r\n              <ng-container [ngSwitch]="field.type">\r\n                <ng-container *ngSwitchCase="\'select\'">\r\n                  <select\r\n                    class="form-control"\r\n                    [id]="\'sample-propert-\' + field.name"\r\n                    [name]="\'sample-propert-\' + field.name"\r\n                    [(ngModel)]="model[field.name]"\r\n                  >\r\n                    <option *ngFor="let option of field.selectOptions" [ngValue]="option.value">\r\n                      {{ option.key }}\r\n                    </option>\r\n                  </select>\r\n                </ng-container>\r\n\r\n                <ng-container *ngSwitchDefault>\r\n                  <input\r\n                    type="text"\r\n                    [id]="\'sample-propert-\' + field.name"\r\n                    [name]="\'sample-propert-\' + field.name"\r\n                    class="form-control"\r\n                    aria-invalid="false"\r\n                    [(ngModel)]="model[field.name]"\r\n                  />\r\n                </ng-container>\r\n              </ng-container>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n      <button id="add-new-property" class="float-right mb-2 btn btn-success" type="submit">\r\n        <i class="fa fa-plus"></i> {{ \'AbpIdentityServer::AddNew\' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n\r\n  <div *ngIf="checkboxFieldName" class="custom-checkbox custom-control mb-2">\r\n    <input\r\n      [id]="checkboxFieldName"\r\n      [name]="checkboxFieldName"\r\n      type="checkbox"\r\n      [(ngModel)]="checkboxValue"\r\n      class="custom-control-input"\r\n    /><label class="custom-control-label" [for]="checkboxFieldName">{{\r\n      \'AbpIdentityServer::\' + checkboxLabel | abpLocalization\r\n    }}</label>\r\n  </div>\r\n\r\n  <div *ngIf="selected?.length" class="table-responsive-sm">\r\n    <table id="property-table" class="table table-striped">\r\n      <thead>\r\n        <th *ngFor="let field of fields" scope="col">\r\n          {{ \'AbpIdentityServer::\' + field.title | abpLocalization }}\r\n        </th>\r\n        <th scope="col"></th>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor="let row of selected; trackBy: trackByFn; let i = index">\r\n          <td *ngFor="let field of fields">{{ row[field.name] }}</td>\r\n          <td>\r\n            <button type="button" class="btn btn-outline-danger float-right" (click)="delete(i)">\r\n              <i class="fa fa-trash"></i>\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:Ee}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],Ee.propDecorators={selected:[{type:i.Input}],fields:[{type:i.Input}],fieldName:[{type:i.Input}],formTitle:[{type:i.Input}],checkboxValue:[{type:i.Input}],checkboxFieldName:[{type:i.Input}],checkboxLabel:[{type:i.Input}]};var ke=function(e){function t(){var t=e.apply(this,S(arguments))||this;return t.selected=[],t.title="GrantTypes",t.customModel="Custom",t.grantTypesOptions=["implicit","authorization_code","hybrid","client_credentials","password",t.customModel],t.customModelValue="",t.trackByFn=function(e){return e},t}return g(t,e),t.prototype.add=function(){var e=this.model===this.customModel?this.customModelValue:this.model;this.selected.includes(e)||(this.selected.push(e),this.customModelValue="")},t.prototype.getValue=function(){return{allowedGrantTypes:this.selected}},t.prototype.delete=function(e){this.selected.splice(e,1)},t}(R);ke.decorators=[{type:i.Component,args:[{selector:"abp-clients-modal-grant-types-tab",template:'<ng-template>\r\n  <h3>{{ \'AbpIdentityServer::\' + title | abpLocalization }}</h3>\r\n  <div class="pt-3 pb-5 clearfix">\r\n    <form (submit)="add()">\r\n      <div class="row">\r\n        <div class="col-12">\r\n          <div class="form-group">\r\n            <label for="sample-propert-grant-type">Grant Type </label>\r\n            <select\r\n              class="form-control"\r\n              id="sample-propert-grant-type"\r\n              name="sample-propert-grant-type"\r\n              [(ngModel)]="model"\r\n            >\r\n              <option *ngFor="let option of grantTypesOptions" [ngValue]="option">\r\n                {{ option }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class="col-12" *ngIf="model === customModel">\r\n          <div class="form-group">\r\n            <label for="sample-propert-custom-grant-type">Grant Type </label>\r\n            <input\r\n              type="text"\r\n              id="sample-propert-custom-grant-type"\r\n              name="sample-propert-custom-grant-type"\r\n              class="form-control"\r\n              [placeholder]="\'AbpIdentityServer::CustomGrantType\' | abpLocalization"\r\n              [(ngModel)]="customModelValue"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button id="add-new-property" class="float-right mb-2 btn btn-success" type="submit">\r\n        <i class="fa fa-plus"></i> {{ \'AbpIdentityServer::AddNew\' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n\r\n  <div *ngIf="selected?.length" class="table-responsive-sm">\r\n    <table id="property-table" class="table table-striped">\r\n      <thead>\r\n        <th scope="col">Grant Type</th>\r\n        <th scope="col"></th>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor="let row of selected; trackBy: trackByFn; let i = index">\r\n          <td>{{ row }}</td>\r\n          <td>\r\n            <button type="button" class="btn btn-outline-danger float-right" (click)="delete(i)">\r\n              <i class="fa fa-trash"></i>\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</ng-template>\r\n',providers:[{provide:R,useExisting:ke}],changeDetection:i.ChangeDetectionStrategy.OnPush}]}],ke.propDecorators={selected:[{type:i.Input}]};var Le=[Ie,Ne,xe,R,Ae,Te,Re,Ee],Ve=[k,x,E,ke],Pe=function(){function e(){}return e.forChild=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[{provide:ce,useValue:t.entityActionContributors},{provide:pe,useValue:t.toolbarActionContributors},{provide:de,useValue:t.entityPropContributors},{provide:ue,useValue:t.createFormPropContributors},{provide:me,useValue:t.editFormPropContributors},be]}},e.forLazy=function(r){return void 0===r&&(r={}),new t.LazyModuleFactory(e.forChild(r))},e}();Pe.decorators=[{type:i.NgModule,args:[{declarations:S([L,P,A,b,V,v],Le,Ve),exports:S([L,P,A,b,V,v],Le,Ve),imports:[Se,t.CoreModule,s.CommercialUiModule,r.ThemeSharedModule,l.PermissionManagementModule,c.NgbDropdownModule,c.NgbNavModule,p.NgxValidateCoreModule,c.NgbDatepickerModule,o.ReactiveFormsModule]}]}],e.ApiResourcesComponent=b,e.ApiResourcesService=u,e.ApiScopesComponent=v,e.ClientsComponent=A,e.ClientsModalResourcesTabComponent=x,e.ClientsModalTokensTabComponent=E,e.ClientsModalUrisTabComponent=k,e.ClientsService=I,e.DEFAULT_IDENTITY_SERVER_CREATE_FORM_PROPS=se,e.DEFAULT_IDENTITY_SERVER_EDIT_FORM_PROPS=le,e.DEFAULT_IDENTITY_SERVER_ENTITY_ACTIONS=ie,e.DEFAULT_IDENTITY_SERVER_ENTITY_PROPS=ae,e.DEFAULT_IDENTITY_SERVER_TOOLBAR_ACTIONS=oe,e.IDENTITY_SERVER_CREATE_FORM_PROP_CONTRIBUTORS=ue,e.IDENTITY_SERVER_EDIT_FORM_PROP_CONTRIBUTORS=me,e.IDENTITY_SERVER_ENTITY_ACTION_CONTRIBUTORS=ce,e.IDENTITY_SERVER_ENTITY_PROP_CONTRIBUTORS=de,e.IDENTITY_SERVER_TOOLBAR_ACTION_CONTRIBUTORS=pe,e.IdentityResourcesComponent=L,e.IdentityResourcesService=C,e.IdentityServerClaimTypesService=Ce,e.IdentityServerEntityBaseComponent=V,e.IdentityServerExtensionsGuard=be,e.IdentityServerModalClaimsTabComponent=Ae,e.IdentityServerModalComponent=Ie,e.IdentityServerModalFreeTextValuesTabComponent=Ee,e.IdentityServerModalInfoTabComponent=Ne,e.IdentityServerModalPropertiesTabComponent=Te,e.IdentityServerModalSecretsTabComponent=Re,e.IdentityServerModalTabComponent=R,e.IdentityServerModalTabGroupComponent=xe,e.IdentityServerModule=Pe,e.PicklistComponent=P,e.ɵ0=m,e.ɵa=L,e.ɵba=ce,e.ɵbb=pe,e.ɵbc=de,e.ɵbd=ue,e.ɵbe=me,e.ɵd=P,e.ɵe=A,e.ɵg=b,e.ɵi=V,e.ɵj=v,e.ɵl=y,e.ɵm=Ie,e.ɵn=R,e.ɵo=Ne,e.ɵp=xe,e.ɵq=Ae,e.ɵr=Te,e.ɵs=Re,e.ɵt=Ee,e.ɵu=k,e.ɵv=x,e.ɵw=E,e.ɵx=ke,e.ɵy=Se,e.ɵz=be,Object.defineProperty(e,"__esModule",{value:!0})}));