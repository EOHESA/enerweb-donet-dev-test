import{__decorate}from"tslib";import{ListService}from"@abp/ng.core";import{Confirmation,ConfirmationService}from"@abp/ng.theme.shared";import{EXTENSIONS_IDENTIFIER,FormPropData,generateFormFromProps}from"@abp/ng.theme.shared/extensions";import{Component,Injector,ViewChild}from"@angular/core";import{FormBuilder}from"@angular/forms";import{Select,Store}from"@ngxs/store";import{of}from"rxjs";import{finalize,switchMap,take,tap}from"rxjs/operators";import{CreateTenant,DeleteTenant,GetEditions,GetTenants,UpdateTenant}from"../../actions/saas.actions";import{TenantService}from"../../proxy/host/tenant.service";import{SaasState}from"../../states/saas.state";const ɵ0="Saas.TenantsComponent";export class TenantsComponent{constructor(e,t,n,a,r,i){this.list=e,this.confirmationService=t,this.tenantService=n,this.fb=a,this.store=r,this.injector=i,this.selectedModalContent={},this.visibleFeatures=!1,this.modalBusy=!1,this.onVisibleFeaturesChange=e=>{this.visibleFeatures=e}}get useSharedDatabase(){return this.defaultConnectionStringForm.get("useSharedDatabase").value}get connectionString(){return this.defaultConnectionStringForm.get("defaultConnectionString").value}get hasSelectedTenant(){return Boolean(this.selected.id)}get isDisabledSaveButton(){return!!this.selectedModalContent&&(!("saveConnStr"!==this.selectedModalContent.type||!this.defaultConnectionStringForm||!this.defaultConnectionStringForm.invalid)||!("saveTenant"!==this.selectedModalContent.type||!this.tenantForm||!this.tenantForm.invalid))}ngOnInit(){this.hookToQuery()}hookToQuery(){this.list.hookToQuery(e=>this.store.dispatch(new GetTenants(e))).subscribe()}createTenantForm(){this.store.select(SaasState.getEditions).pipe(switchMap(e=>e.length?of(e):this.store.dispatch(new GetEditions({maxResultCount:1e3})))).subscribe(()=>{const e=new FormPropData(this.injector,this.selected);this.tenantForm=generateFormFromProps(e)})}createDefaultConnectionStringForm(){this.defaultConnectionStringForm=this.fb.group({useSharedDatabase:this._useSharedDatabase,defaultConnectionString:this.defaultConnectionString||""})}openModal(e,t,n){this.selectedModalContent={title:e,template:t,type:n},this.isModalVisible=!0}onEditConnectionString(e){this.tenantService.get(e).pipe(tap(e=>this.selected=e),switchMap(()=>this.tenantService.getDefaultConnectionString(e))).subscribe(e=>{this._useSharedDatabase=!e,this.defaultConnectionString=e||"",this.createDefaultConnectionStringForm(),this.openModal("Saas::ConnectionStrings",this.connectionStringModalTemplate,"saveConnStr")})}onAddTenant(){this.selected={},this.createTenantForm(),this.openModal("Saas::NewTenant",this.tenantModalTemplate,"saveTenant")}onEditTenant(e){this.tenantService.get(e).subscribe(e=>{this.selected=e,this.createTenantForm(),this.openModal("Saas::Edit",this.tenantModalTemplate,"saveTenant")})}save(){const{type:e}=this.selectedModalContent;e&&("saveTenant"===e?this.saveTenant():"saveConnStr"===e&&this.saveConnectionString())}saveConnectionString(){this.modalBusy||(this.modalBusy=!0,this.useSharedDatabase||!this.useSharedDatabase&&!this.connectionString?this.tenantService.deleteDefaultConnectionString(this.selected.id).pipe(take(1),finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.isModalVisible=!1}):this.tenantService.updateDefaultConnectionString(this.selected.id,this.connectionString).pipe(take(1),finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.isModalVisible=!1}))}saveTenant(){this.tenantForm.valid&&!this.modalBusy&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new UpdateTenant(Object.assign(Object.assign(Object.assign({},this.selected),this.tenantForm.value),{id:this.selected.id})):new CreateTenant(this.tenantForm.value)).pipe(finalize(()=>this.modalBusy=!1)).subscribe(()=>{this.list.get(),this.isModalVisible=!1}))}delete(e,t){this.confirmationService.warn("Saas::TenantDeletionConfirmationMessage","Saas::AreYouSure",{messageLocalizationParams:[t]}).subscribe(t=>{t===Confirmation.Status.confirm&&this.store.dispatch(new DeleteTenant(e)).subscribe(()=>this.list.get())})}onSharedDatabaseChange(e){e||setTimeout(()=>{const e=document.getElementById("defaultConnectionString");e&&e.focus()},0)}openFeaturesModal(e){this.providerKey=e,setTimeout(()=>{this.visibleFeatures=!0},0)}}TenantsComponent.decorators=[{type:Component,args:[{selector:"abp-tenants",template:'<ng-container *ngIf="tenants$ | async as data">\r\n  <div class="row entry-row">\r\n    <div class="col-auto">\r\n      <h1 class="content-header-title">{{ \'Saas::Tenants\' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class="col-lg-auto pl-lg-0">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class="col">\r\n      <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id="wrapper">\r\n    <div class="card">\r\n      <div class="card-body">\r\n        <div class="row">\r\n          <div class="col">\r\n            <div class="input-group">\r\n              <input\r\n                type="search"\r\n                class="form-control"\r\n                [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n                [(ngModel)]="list.filter"\r\n              />\r\n              <div class="input-group-append">\r\n                <button class="btn btn-primary" (click)="list.get()">\r\n                  <i class="fas fa-search"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="card">\r\n      <abp-extensible-table\r\n        [data]="data"\r\n        [recordsTotal]="totalCount$ | async"\r\n        [list]="list"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal\r\n  [(visible)]="isModalVisible"\r\n  [busy]="modalBusy"\r\n  (disappear)="tenantForm = null; defaultConnectionStringForm = null"\r\n>\r\n  <ng-template #abpHeader>\r\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-container *ngTemplateOutlet="selectedModalContent?.template"></ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type="button" class="btn btn-secondary">\r\n      {{ \'Saas::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" [disabled]="isDisabledSaveButton" (click)="save()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<ng-template #tenantModalTemplate>\r\n  <form *ngIf="tenantForm" [formGroup]="tenantForm" (ngSubmit)="save()" validateOnSubmit>\r\n    <div class="mt-2">\r\n      <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #connectionStringModalTemplate>\r\n  <form [formGroup]="defaultConnectionStringForm" (ngSubmit)="save()">\r\n    <div class="mt-2">\r\n      <div class="form-group">\r\n        <div class="custom-checkbox custom-control mb-2">\r\n          <input\r\n            id="useSharedDatabase"\r\n            type="checkbox"\r\n            class="custom-control-input"\r\n            formControlName="useSharedDatabase"\r\n            autofocus\r\n            (ngModelChange)="onSharedDatabaseChange($event)"\r\n          />\r\n          <label for="useSharedDatabase" class="custom-control-label">{{\r\n            \'Saas::DisplayName:UseSharedDatabase\' | abpLocalization\r\n          }}</label>\r\n        </div>\r\n      </div>\r\n      <div class="form-group" *ngIf="!useSharedDatabase">\r\n        <label for="defaultConnectionString">{{\r\n          \'Saas::DisplayName:DefaultConnectionString\' | abpLocalization\r\n        }}</label>\r\n        <input\r\n          type="text"\r\n          id="defaultConnectionString"\r\n          class="form-control"\r\n          formControlName="defaultConnectionString"\r\n        />\r\n      </div>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<abp-feature-management\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'T\' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visibleFeatures, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisibleFeaturesChange },\r\n    componentKey: \'FeatureManagement.FeatureManagementComponent\'\r\n  }"\r\n  [(visible)]="visibleFeatures"\r\n  providerName="T"\r\n  [providerKey]="providerKey"\r\n>\r\n</abp-feature-management>\r\n',providers:[ListService,{provide:EXTENSIONS_IDENTIFIER,useValue:ɵ0}]}]}],TenantsComponent.ctorParameters=()=>[{type:ListService},{type:ConfirmationService},{type:TenantService},{type:FormBuilder},{type:Store},{type:Injector}],TenantsComponent.propDecorators={tenantModalTemplate:[{type:ViewChild,args:["tenantModalTemplate"]}],connectionStringModalTemplate:[{type:ViewChild,args:["connectionStringModalTemplate"]}]},__decorate([Select(SaasState.getTenants)],TenantsComponent.prototype,"tenants$",void 0),__decorate([Select(SaasState.getTenantsTotalCount)],TenantsComponent.prototype,"totalCount$",void 0),__decorate([Select(SaasState.getEditions)],TenantsComponent.prototype,"editions$",void 0);export{ɵ0};