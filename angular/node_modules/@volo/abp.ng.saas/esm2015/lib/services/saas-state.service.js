import{Injectable}from"@angular/core";import{Store}from"@ngxs/store";import{SaasState}from"../states";import{GetTenants,GetTenantById,CreateTenant,UpdateTenant,DeleteTenant,GetEditions,GetEditionById,CreateEdition,UpdateEdition,DeleteEdition,GetUsageStatistics,GetLatestTenants}from"../actions/saas.actions";import*as i0 from"@angular/core";import*as i1 from"@ngxs/store";export class SaasStateService{constructor(t){this.store=t}getTenants(){return this.store.selectSnapshot(SaasState.getTenants)}getLatestTenants(){return this.store.selectSnapshot(SaasState.getLatestTenants)}getTenantsTotalCount(){return this.store.selectSnapshot(SaasState.getTenantsTotalCount)}getEditions(){return this.store.selectSnapshot(SaasState.getEditions)}getEditionsTotalCount(){return this.store.selectSnapshot(SaasState.getEditionsTotalCount)}getUsageStatistics(){return this.store.selectSnapshot(SaasState.getUsageStatistics)}dispatchGetTenants(...t){return this.store.dispatch(new GetTenants(...t))}dispatchGetTenantById(...t){return this.store.dispatch(new GetTenantById(...t))}dispatchCreateTenant(...t){return this.store.dispatch(new CreateTenant(...t))}dispatchUpdateTenant(...t){return this.store.dispatch(new UpdateTenant(...t))}dispatchDeleteTenant(...t){return this.store.dispatch(new DeleteTenant(...t))}dispatchGetEditions(...t){return this.store.dispatch(new GetEditions(...t))}dispatchGetEditionById(...t){return this.store.dispatch(new GetEditionById(...t))}dispatchCreateEdition(...t){return this.store.dispatch(new CreateEdition(...t))}dispatchUpdateEdition(...t){return this.store.dispatch(new UpdateEdition(...t))}dispatchDeleteEdition(...t){return this.store.dispatch(new DeleteEdition(...t))}dispatchGetUsageStatistics(){return this.store.dispatch(new GetUsageStatistics)}dispatchGetLatestTenants(){return this.store.dispatch(new GetLatestTenants)}}SaasStateService.ɵprov=i0.ɵɵdefineInjectable({factory:function(){return new SaasStateService(i0.ɵɵinject(i1.Store))},token:SaasStateService,providedIn:"root"}),SaasStateService.decorators=[{type:Injectable,args:[{providedIn:"root"}]}],SaasStateService.ctorParameters=()=>[{type:Store}];