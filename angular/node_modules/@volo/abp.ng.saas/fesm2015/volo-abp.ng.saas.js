import { __rest, __decorate } from 'tslib';
import { RestService, ListService, SubscriptionService, PermissionService, ConfigStateService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { Confirmation, ConfirmationService, getRandomBackgroundColor, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.theme.shared/extensions';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, Injector, ViewChild, Output, Input, InjectionToken, NgModule } from '@angular/core';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { tap, finalize, switchMap, take, map, mapTo } from 'rxjs/operators';
import { FormBuilder, Validators } from '@angular/forms';
import { of, BehaviorSubject } from 'rxjs';
import { SHOW_ENTITY_HISTORY, CommercialUiModule } from '@volo/abp.commercial.ng.ui';
import { FeatureManagementModule } from '@abp/ng.feature-management';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { RouterModule } from '@angular/router';

class GetTenants {
    constructor(payload) {
        this.payload = payload;
    }
}
GetTenants.type = '[Saas] Get Tenant';
class GetTenantById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetTenantById.type = '[Saas] Get Tenant By Id';
class CreateTenant {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateTenant.type = '[Saas] Create Tenant';
class UpdateTenant {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateTenant.type = '[Saas] Update Tenant';
class DeleteTenant {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteTenant.type = '[Saas] Delete Tenant';
class GetEditions {
    constructor(payload) {
        this.payload = payload;
    }
}
GetEditions.type = '[Saas] Get Edition';
class GetEditionById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetEditionById.type = '[Saas] Get Edition By Id';
class CreateEdition {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateEdition.type = '[Saas] Create Edition';
class UpdateEdition {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateEdition.type = '[Saas] Update Edition';
class DeleteEdition {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteEdition.type = '[Saas] Delete Edition';
class GetUsageStatistics {
}
GetUsageStatistics.type = '[Saas] Get Usage Statistics';
class GetLatestTenants {
}
GetLatestTenants.type = '[Saas] Get Latest Tenatns';

class EditionService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SaasHost';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/saas/editions`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/saas/editions/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/saas/editions/${id}`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/saas/editions`,
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.getUsageStatistics = () => this.restService.request({
            method: 'GET',
            url: `/api/saas/editions/statistics/usage-statistic`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/saas/editions/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
EditionService.ɵprov = ɵɵdefineInjectable({ factory: function EditionService_Factory() { return new EditionService(ɵɵinject(RestService)); }, token: EditionService, providedIn: "root" });
EditionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
EditionService.ctorParameters = () => [
    { type: RestService }
];

class TenantService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SaasHost';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: `/api/saas/tenants`,
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/saas/tenants/${id}`,
        }, { apiName: this.apiName });
        this.deleteDefaultConnectionString = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/saas/tenants/${id}/default-connection-string`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/saas/tenants/${id}`,
        }, { apiName: this.apiName });
        this.getDefaultConnectionString = (id) => this.restService.request({
            method: 'GET',
            url: `/api/saas/tenants/${id}/default-connection-string`,
            responseType: 'text',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/saas/tenants`,
            params: {
                filter: input.filter,
                getEditionNames: input.getEditionNames,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/saas/tenants/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateDefaultConnectionString = (id, defaultConnectionString) => this.restService.request({
            method: 'PUT',
            url: `/api/saas/tenants/${id}/default-connection-string`,
            params: { defaultConnectionString },
        }, { apiName: this.apiName });
    }
}
TenantService.ɵprov = ɵɵdefineInjectable({ factory: function TenantService_Factory() { return new TenantService(ɵɵinject(RestService)); }, token: TenantService, providedIn: "root" });
TenantService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
TenantService.ctorParameters = () => [
    { type: RestService }
];

let SaasState = class SaasState {
    constructor(tenantService, editionService) {
        this.tenantService = tenantService;
        this.editionService = editionService;
    }
    static getTenants({ tenants }) {
        return tenants.items || [];
    }
    static getLatestTenants({ latestTenants }) {
        return latestTenants;
    }
    static getTenantsTotalCount({ tenants }) {
        return tenants.totalCount || 0;
    }
    static getEditions({ editions }) {
        return editions.items || [];
    }
    static getEditionsTotalCount({ editions }) {
        return editions.totalCount || 0;
    }
    static getUsageStatistics({ usageStatistics }) {
        return usageStatistics;
    }
    getTenants({ patchState }, { payload }) {
        return this.tenantService.getList(payload).pipe(tap(tenants => patchState({
            tenants,
        })));
    }
    deleteTenant(_, { payload }) {
        return this.tenantService.delete(payload);
    }
    createTenant(_, { payload }) {
        return this.tenantService.create(payload);
    }
    updateTenant(_, _a) {
        var _b = _a.payload, { id } = _b, input = __rest(_b, ["id"]);
        return this.tenantService.update(id, input);
    }
    getEditions({ patchState }, { payload }) {
        return this.editionService.getList(payload).pipe(tap(editions => patchState({
            editions,
        })));
    }
    deleteEdition(_, { payload }) {
        return this.editionService.delete(payload);
    }
    createEdition(_, { payload }) {
        return this.editionService.create(payload);
    }
    updateEdition(_, _a) {
        var _b = _a.payload, { id } = _b, input = __rest(_b, ["id"]);
        return this.editionService.update(id, input);
    }
    getUsage({ patchState }) {
        return this.editionService.getUsageStatistics().pipe(tap(response => {
            patchState({
                usageStatistics: response.data,
            });
        }));
    }
    getLatestTenants({ patchState }) {
        return this.tenantService
            .getList({
            getEditionNames: true,
            maxResultCount: 6,
            skipCount: 0,
            sorting: 'CreationTime desc',
        })
            .pipe(tap(response => {
            patchState({
                latestTenants: response.items,
            });
        }));
    }
};
SaasState.decorators = [
    { type: Injectable }
];
SaasState.ctorParameters = () => [
    { type: TenantService },
    { type: EditionService }
];
__decorate([
    Action(GetTenants)
], SaasState.prototype, "getTenants", null);
__decorate([
    Action(DeleteTenant)
], SaasState.prototype, "deleteTenant", null);
__decorate([
    Action(CreateTenant)
], SaasState.prototype, "createTenant", null);
__decorate([
    Action(UpdateTenant)
], SaasState.prototype, "updateTenant", null);
__decorate([
    Action(GetEditions)
], SaasState.prototype, "getEditions", null);
__decorate([
    Action(DeleteEdition)
], SaasState.prototype, "deleteEdition", null);
__decorate([
    Action(CreateEdition)
], SaasState.prototype, "createEdition", null);
__decorate([
    Action(UpdateEdition)
], SaasState.prototype, "updateEdition", null);
__decorate([
    Action(GetUsageStatistics)
], SaasState.prototype, "getUsage", null);
__decorate([
    Action(GetLatestTenants)
], SaasState.prototype, "getLatestTenants", null);
__decorate([
    Selector()
], SaasState, "getTenants", null);
__decorate([
    Selector()
], SaasState, "getLatestTenants", null);
__decorate([
    Selector()
], SaasState, "getTenantsTotalCount", null);
__decorate([
    Selector()
], SaasState, "getEditions", null);
__decorate([
    Selector()
], SaasState, "getEditionsTotalCount", null);
__decorate([
    Selector()
], SaasState, "getUsageStatistics", null);
SaasState = __decorate([
    State({
        name: 'SaasState',
        defaults: { tenants: {}, editions: {}, latestTenants: [], usageStatistics: {} },
    })
], SaasState);

const ɵ0 = "Saas.EditionsComponent" /* Editions */;
class EditionsComponent {
    constructor(list, confirmationService, editionService, store, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.editionService = editionService;
        this.store = store;
        this.injector = injector;
        this.visibleFeatures = false;
        this.modalBusy = false;
        this.onVisibleFeaturesChange = (value) => {
            this.visibleFeatures = value;
        };
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetEditions(query))).subscribe();
    }
    createEditionForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.editionForm = generateFormFromProps(data);
    }
    onAddEdition() {
        this.selected = {};
        this.createEditionForm();
        this.isModalVisible = true;
    }
    onEditEdition(id) {
        this.editionService.get(id).subscribe(selectedEdition => {
            this.selected = selectedEdition;
            this.createEditionForm();
            this.isModalVisible = true;
        });
    }
    save() {
        if (!this.editionForm.valid)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(this.selected.id
            ? new UpdateEdition(Object.assign(Object.assign(Object.assign({}, this.selected), this.editionForm.value), { id: this.selected.id }))
            : new CreateEdition(this.editionForm.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.list.get();
            this.isModalVisible = false;
        });
    }
    delete({ id, displayName }) {
        this.confirmationService
            .warn('Saas::EditionDeletionConfirmationMessage', 'Saas::AreYouSure', {
            messageLocalizationParams: [displayName],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteEdition(id)).subscribe(() => this.list.get());
            }
        });
    }
    openFeaturesModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visibleFeatures = true;
        }, 0);
    }
}
EditionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-editions',
                template: "<ng-container *ngIf=\"data$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'Saas::Editions' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data\"\r\n        [recordsTotal]=\"totalCount$ | async\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\" (disappear)=\"editionForm = null\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'Saas::Edit' : 'Saas::NewEdition') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"editionForm\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <div class=\"mt-2\">\r\n        <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type=\"button\" class=\"btn btn-secondary\">\r\n      {{ 'Saas::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"editionForm?.invalid\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-feature-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'E' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visibleFeatures, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisibleFeaturesChange },\r\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\r\n  }\"\r\n  [(visible)]=\"visibleFeatures\"\r\n  providerName=\"E\"\r\n  [providerKey]=\"providerKey\"\r\n>\r\n</abp-feature-management>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0,
                    },
                ]
            },] }
];
EditionsComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: EditionService },
    { type: Store },
    { type: Injector }
];
__decorate([
    Select(SaasState.getEditions)
], EditionsComponent.prototype, "data$", void 0);
__decorate([
    Select(SaasState.getEditionsTotalCount)
], EditionsComponent.prototype, "totalCount$", void 0);

const ɵ0$1 = "Saas.TenantsComponent" /* Tenants */;
class TenantsComponent {
    constructor(list, confirmationService, tenantService, fb, store, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.tenantService = tenantService;
        this.fb = fb;
        this.store = store;
        this.injector = injector;
        this.selectedModalContent = {};
        this.visibleFeatures = false;
        this.modalBusy = false;
        this.onVisibleFeaturesChange = (value) => {
            this.visibleFeatures = value;
        };
    }
    get useSharedDatabase() {
        return this.defaultConnectionStringForm.get('useSharedDatabase').value;
    }
    get connectionString() {
        return this.defaultConnectionStringForm.get('defaultConnectionString').value;
    }
    get hasSelectedTenant() {
        return Boolean(this.selected.id);
    }
    get isDisabledSaveButton() {
        if (!this.selectedModalContent)
            return false;
        if (this.selectedModalContent.type === 'saveConnStr' &&
            this.defaultConnectionStringForm &&
            this.defaultConnectionStringForm.invalid) {
            return true;
        }
        else if (this.selectedModalContent.type === 'saveTenant' &&
            this.tenantForm &&
            this.tenantForm.invalid) {
            return true;
        }
        else {
            return false;
        }
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetTenants(query))).subscribe();
    }
    createTenantForm() {
        this.store
            .select(SaasState.getEditions)
            .pipe(switchMap(editions => editions.length
            ? of(editions)
            : this.store.dispatch(new GetEditions({ maxResultCount: 1000 }))))
            .subscribe(() => {
            const data = new FormPropData(this.injector, this.selected);
            this.tenantForm = generateFormFromProps(data);
        });
    }
    createDefaultConnectionStringForm() {
        this.defaultConnectionStringForm = this.fb.group({
            useSharedDatabase: this._useSharedDatabase,
            defaultConnectionString: this.defaultConnectionString || '',
        });
    }
    openModal(title, template, type) {
        this.selectedModalContent = {
            title,
            template,
            type,
        };
        this.isModalVisible = true;
    }
    onEditConnectionString(id) {
        this.tenantService
            .get(id)
            .pipe(tap(selectedTenant => (this.selected = selectedTenant)), switchMap(() => this.tenantService.getDefaultConnectionString(id)))
            .subscribe(fetchedConnectionString => {
            this._useSharedDatabase = fetchedConnectionString ? false : true;
            this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';
            this.createDefaultConnectionStringForm();
            this.openModal('Saas::ConnectionStrings', this.connectionStringModalTemplate, 'saveConnStr');
        });
    }
    onAddTenant() {
        this.selected = {};
        this.createTenantForm();
        this.openModal('Saas::NewTenant', this.tenantModalTemplate, 'saveTenant');
    }
    onEditTenant(id) {
        this.tenantService.get(id).subscribe(selectedTenant => {
            this.selected = selectedTenant;
            this.createTenantForm();
            this.openModal('Saas::Edit', this.tenantModalTemplate, 'saveTenant');
        });
    }
    save() {
        const { type } = this.selectedModalContent;
        if (!type)
            return;
        if (type === 'saveTenant')
            this.saveTenant();
        else if (type === 'saveConnStr')
            this.saveConnectionString();
    }
    saveConnectionString() {
        if (this.modalBusy)
            return;
        this.modalBusy = true;
        if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {
            this.tenantService
                .deleteDefaultConnectionString(this.selected.id)
                .pipe(take(1), finalize(() => (this.modalBusy = false)))
                .subscribe(() => {
                this.isModalVisible = false;
            });
        }
        else {
            this.tenantService
                .updateDefaultConnectionString(this.selected.id, this.connectionString)
                .pipe(take(1), finalize(() => (this.modalBusy = false)))
                .subscribe(() => {
                this.isModalVisible = false;
            });
        }
    }
    saveTenant() {
        if (!this.tenantForm.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(this.selected.id
            ? new UpdateTenant(Object.assign(Object.assign(Object.assign({}, this.selected), this.tenantForm.value), { id: this.selected.id }))
            : new CreateTenant(this.tenantForm.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.list.get();
            this.isModalVisible = false;
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('Saas::TenantDeletionConfirmationMessage', 'Saas::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteTenant(id)).subscribe(() => this.list.get());
            }
        });
    }
    onSharedDatabaseChange(value) {
        if (!value) {
            setTimeout(() => {
                const defaultConnectionString = document.getElementById('defaultConnectionString');
                if (defaultConnectionString) {
                    defaultConnectionString.focus();
                }
            }, 0);
        }
    }
    openFeaturesModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visibleFeatures = true;
        }, 0);
    }
}
TenantsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-tenants',
                template: "<ng-container *ngIf=\"tenants$ | async as data\">\r\n  <div class=\"row entry-row\">\r\n    <div class=\"col-auto\">\r\n      <h1 class=\"content-header-title\">{{ 'Saas::Tenants' | abpLocalization }}</h1>\r\n    </div>\r\n    <div class=\"col-lg-auto pl-lg-0\">\r\n      <abp-breadcrumb></abp-breadcrumb>\r\n    </div>\r\n    <div class=\"col\">\r\n      <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"wrapper\">\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"search\"\r\n                class=\"form-control\"\r\n                [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n                [(ngModel)]=\"list.filter\"\r\n              />\r\n              <div class=\"input-group-append\">\r\n                <button class=\"btn btn-primary\" (click)=\"list.get()\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <abp-extensible-table\r\n        [data]=\"data\"\r\n        [recordsTotal]=\"totalCount$ | async\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal\r\n  [(visible)]=\"isModalVisible\"\r\n  [busy]=\"modalBusy\"\r\n  (disappear)=\"tenantForm = null; defaultConnectionStringForm = null\"\r\n>\r\n  <ng-template #abpHeader>\r\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-container *ngTemplateOutlet=\"selectedModalContent?.template\"></ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type=\"button\" class=\"btn btn-secondary\">\r\n      {{ 'Saas::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"isDisabledSaveButton\" (click)=\"save()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<ng-template #tenantModalTemplate>\r\n  <form *ngIf=\"tenantForm\" [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n    <div class=\"mt-2\">\r\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #connectionStringModalTemplate>\r\n  <form [formGroup]=\"defaultConnectionStringForm\" (ngSubmit)=\"save()\">\r\n    <div class=\"mt-2\">\r\n      <div class=\"form-group\">\r\n        <div class=\"custom-checkbox custom-control mb-2\">\r\n          <input\r\n            id=\"useSharedDatabase\"\r\n            type=\"checkbox\"\r\n            class=\"custom-control-input\"\r\n            formControlName=\"useSharedDatabase\"\r\n            autofocus\r\n            (ngModelChange)=\"onSharedDatabaseChange($event)\"\r\n          />\r\n          <label for=\"useSharedDatabase\" class=\"custom-control-label\">{{\r\n            'Saas::DisplayName:UseSharedDatabase' | abpLocalization\r\n          }}</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\" *ngIf=\"!useSharedDatabase\">\r\n        <label for=\"defaultConnectionString\">{{\r\n          'Saas::DisplayName:DefaultConnectionString' | abpLocalization\r\n        }}</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"defaultConnectionString\"\r\n          class=\"form-control\"\r\n          formControlName=\"defaultConnectionString\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<abp-feature-management\r\n  *abpReplaceableTemplate=\"{\r\n    inputs: {\r\n      providerName: { value: 'T' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visibleFeatures, twoWay: true }\r\n    },\r\n    outputs: { visibleChange: onVisibleFeaturesChange },\r\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\r\n  }\"\r\n  [(visible)]=\"visibleFeatures\"\r\n  providerName=\"T\"\r\n  [providerKey]=\"providerKey\"\r\n>\r\n</abp-feature-management>\r\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$1,
                    },
                ]
            },] }
];
TenantsComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: TenantService },
    { type: FormBuilder },
    { type: Store },
    { type: Injector }
];
TenantsComponent.propDecorators = {
    tenantModalTemplate: [{ type: ViewChild, args: ['tenantModalTemplate',] }],
    connectionStringModalTemplate: [{ type: ViewChild, args: ['connectionStringModalTemplate',] }]
};
__decorate([
    Select(SaasState.getTenants)
], TenantsComponent.prototype, "tenants$", void 0);
__decorate([
    Select(SaasState.getTenantsTotalCount)
], TenantsComponent.prototype, "totalCount$", void 0);
__decorate([
    Select(SaasState.getEditions)
], TenantsComponent.prototype, "editions$", void 0);

class EditionsUsageWidgetComponent {
    constructor(store, subscription, permissionService) {
        this.store = store;
        this.subscription = subscription;
        this.permissionService = permissionService;
        this.initialized = new BehaviorSubject(this);
        this.width = 273;
        this.height = 136;
        this.chartData = {};
        this.draw = () => {
            if (!this.permissionService.getGrantedPolicy('Saas.Editions')) {
                return;
            }
            this.store.dispatch(new GetUsageStatistics());
        };
        this.listenToData();
    }
    initialize(chartComponent) {
        this.chart = chartComponent;
    }
    listenToData() {
        this.subscription.addOne(this.data$, data => {
            if (!data || JSON.stringify(data) === '{}') {
                this.chartData = {};
                return;
            }
            const dataKeys = Object.keys(data);
            setTimeout(() => {
                this.chartData = {
                    labels: dataKeys,
                    datasets: [
                        {
                            data: dataKeys.map(key => data[key]),
                            backgroundColor: getRandomBackgroundColor(Object.keys(data).length),
                        },
                    ],
                };
                this.chart.refresh();
            }, 0);
        });
    }
}
EditionsUsageWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-editions-usage-widget',
                template: "<div *abpPermission=\"'Saas.Editions'\" class=\"abp-widget-wrapper\">\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">\r\n      <h5 class=\"card-title\">{{ 'Saas::EditionUsageStatistics' | abpLocalization }}</h5>\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <div class=\"row\">\r\n        <abp-chart\r\n          #chart\r\n          (initialized)=\"initialize($event)\"\r\n          class=\"w-100\"\r\n          type=\"pie\"\r\n          [data]=\"chartData\"\r\n          [width]=\"width\"\r\n          [height]=\"height\"\r\n        ></abp-chart>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                providers: [SubscriptionService]
            },] }
];
EditionsUsageWidgetComponent.ctorParameters = () => [
    { type: Store },
    { type: SubscriptionService },
    { type: PermissionService }
];
EditionsUsageWidgetComponent.propDecorators = {
    initialized: [{ type: Output }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
__decorate([
    Select(SaasState.getUsageStatistics)
], EditionsUsageWidgetComponent.prototype, "data$", void 0);

class LatestTenantsWidgetComponent {
    constructor(store, permissionService) {
        this.store = store;
        this.permissionService = permissionService;
        this.minHeight = 136;
        this.trackByFn = (_, item) => item.id;
        this.draw = () => {
            if (!this.permissionService.getGrantedPolicy('Saas.Tenants')) {
                return;
            }
            this.store.dispatch(new GetLatestTenants());
        };
    }
}
LatestTenantsWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-latest-tenants-widget',
                template: "<div\r\n  *abpPermission=\"'Saas.Tenants'\"\r\n  class=\"abp-widget-wrapper\"\r\n  data-widget-name=\"SaasLatestTenantsWidget\"\r\n  data-refresh-url=\"SaasWidgets/LatestTenants\"\r\n>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">\r\n      <h5 class=\"card-title\">Latest tenants</h5>\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <div [style.min-height.px]=\"minHeight\">\r\n        <table class=\"table table-hover table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>{{ 'Saas::Name' | abpLocalization }}</th>\r\n              <th>{{ 'Saas::EditionName' | abpLocalization }}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let data of datas$ | async; trackBy: trackByFn; let i = index\">\r\n              <th>{{ i + 1 }}</th>\r\n              <td>{{ data.name }}</td>\r\n              <td>{{ data.editionName }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
            },] }
];
LatestTenantsWidgetComponent.ctorParameters = () => [
    { type: Store },
    { type: PermissionService }
];
LatestTenantsWidgetComponent.propDecorators = {
    minHeight: [{ type: Input }]
};
__decorate([
    Select(SaasState.getLatestTenants)
], LatestTenantsWidgetComponent.prototype, "datas$", void 0);

const ɵ0$2 = data => {
    const component = data.getInjected(EditionsComponent);
    component.onEditEdition(data.record.id);
}, ɵ1 = data => {
    const component = data.getInjected(EditionsComponent);
    component.openFeaturesModal(data.record.id);
}, ɵ2 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Saas.Edition');
}, ɵ3 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ4 = data => {
    const component = data.getInjected(EditionsComponent);
    component.delete(data.record);
};
const DEFAULT_EDITIONS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'Saas::Edit',
        action: ɵ0$2,
        permission: 'Saas.Editions.Update',
    },
    {
        text: 'Saas::Features',
        action: ɵ1,
        permission: 'Saas.Editions.ManageFeatures',
    },
    {
        text: 'Saas::ChangeHistory',
        action: ɵ2,
        permission: 'Saas.Editions.ViewChangeHistory',
        visible: ɵ3,
    },
    {
        text: 'Saas::Delete',
        action: ɵ4,
        permission: 'Saas.Editions.Delete',
    },
]);

const DEFAULT_EDITIONS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'Saas::EditionName',
        sortable: true,
    },
]);

const ɵ0$3 = () => [Validators.required, Validators.maxLength(256)];
const DEFAULT_EDITIONS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'displayName',
        displayName: 'Saas::EditionName',
        validators: ɵ0$3,
    },
]);
const DEFAULT_EDITIONS_EDIT_FORM_PROPS = DEFAULT_EDITIONS_CREATE_FORM_PROPS;

const ɵ0$4 = data => {
    const component = data.getInjected(EditionsComponent);
    component.onAddEdition();
};
const DEFAULT_EDITIONS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'Saas::NewEdition',
        action: ɵ0$4,
        permission: 'Saas.Editions.Create',
        icon: 'fa fa-plus',
    },
]);

const ɵ0$5 = data => {
    const component = data.getInjected(TenantsComponent);
    component.onEditTenant(data.record.id);
}, ɵ1$1 = data => {
    const component = data.getInjected(TenantsComponent);
    component.onEditConnectionString(data.record.id);
}, ɵ2$1 = data => {
    const component = data.getInjected(TenantsComponent);
    component.openFeaturesModal(data.record.id);
}, ɵ3$1 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.id, 'Volo.Saas.Tenant');
}, ɵ4$1 = data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)), ɵ5 = data => {
    const component = data.getInjected(TenantsComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_TENANTS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'Saas::Edit',
        action: ɵ0$5,
        permission: 'Saas.Tenants.Update',
    },
    {
        text: 'Saas::ConnectionStrings',
        action: ɵ1$1,
        permission: 'Saas.Tenants.ManageConnectionStrings',
    },
    {
        text: 'Saas::Features',
        action: ɵ2$1,
        permission: 'Saas.Tenants.ManageFeatures',
    },
    {
        text: 'Saas::ChangeHistory',
        action: ɵ3$1,
        permission: 'Saas.Tenants.ViewChangeHistory',
        visible: ɵ4$1,
    },
    {
        text: 'Saas::Delete',
        action: ɵ5,
        permission: 'Saas.Tenants.Delete',
    },
]);

const DEFAULT_TENANTS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'Saas::TenantName',
        sortable: true,
        columnWidth: 370,
    },
    {
        type: "string" /* String */,
        name: 'editionName',
        displayName: 'Saas::EditionName',
        columnWidth: 370,
    },
]);

const ɵ0$6 = () => [Validators.required, Validators.maxLength(256)], ɵ1$2 = data => data.getInjected(TenantsComponent).editions$.pipe(map(editions => [
    {
        key: '',
        value: '',
    },
    ...editions.map(edition => ({
        key: edition.displayName,
        value: edition.id,
    })),
])), ɵ2$2 = () => [Validators.required, Validators.maxLength(256), Validators.email], ɵ3$2 = data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })];
const DEFAULT_TENANTS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        id: 'name',
        displayName: 'Saas::TenantName',
        validators: ɵ0$6,
    },
    {
        type: "string" /* String */,
        name: 'editionId',
        displayName: 'Saas::Edition',
        id: 'edition',
        options: ɵ1$2,
    },
    {
        type: "email" /* Email */,
        name: 'adminEmailAddress',
        displayName: 'Saas::DisplayName:AdminEmailAddress',
        id: 'admin-email-address',
        validators: ɵ2$2,
    },
    {
        type: "password" /* Password */,
        name: 'adminPassword',
        displayName: 'Saas::DisplayName:AdminPassword',
        id: 'admin-password',
        autocomplete: 'new-password',
        validators: ɵ3$2,
    },
]);
const DEFAULT_TENANTS_EDIT_FORM_PROPS = DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 2);

const ɵ0$7 = data => {
    const component = data.getInjected(TenantsComponent);
    component.openFeaturesModal(null);
}, ɵ1$3 = data => {
    const component = data.getInjected(TenantsComponent);
    component.onAddTenant();
};
const DEFAULT_TENANTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'Saas::ManageHostFeatures',
        action: ɵ0$7,
        permission: 'Saas.Tenants.ManageFeatures',
        icon: 'fa fa-cog',
    },
    {
        text: 'Saas::NewTenant',
        action: ɵ1$3,
        permission: 'Saas.Tenants.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_SAAS_ENTITY_ACTIONS = {
    ["Saas.EditionsComponent" /* Editions */]: DEFAULT_EDITIONS_ENTITY_ACTIONS,
    ["Saas.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_ENTITY_ACTIONS,
};
const DEFAULT_SAAS_TOOLBAR_ACTIONS = {
    ["Saas.EditionsComponent" /* Editions */]: DEFAULT_EDITIONS_TOOLBAR_ACTIONS,
    ["Saas.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_TOOLBAR_ACTIONS,
};
const DEFAULT_SAAS_ENTITY_PROPS = {
    ["Saas.EditionsComponent" /* Editions */]: DEFAULT_EDITIONS_ENTITY_PROPS,
    ["Saas.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_ENTITY_PROPS,
};
const DEFAULT_SAAS_CREATE_FORM_PROPS = {
    ["Saas.EditionsComponent" /* Editions */]: DEFAULT_EDITIONS_CREATE_FORM_PROPS,
    ["Saas.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_CREATE_FORM_PROPS,
};
const DEFAULT_SAAS_EDIT_FORM_PROPS = {
    ["Saas.EditionsComponent" /* Editions */]: DEFAULT_EDITIONS_EDIT_FORM_PROPS,
    ["Saas.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_EDIT_FORM_PROPS,
};
const SAAS_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('SAAS_ENTITY_ACTION_CONTRIBUTORS');
const SAAS_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('SAAS_TOOLBAR_ACTION_CONTRIBUTORS');
const SAAS_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('SAAS_ENTITY_PROP_CONTRIBUTORS');
const SAAS_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('SAAS_CREATE_FORM_PROP_CONTRIBUTORS');
const SAAS_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('SAAS_EDIT_FORM_PROP_CONTRIBUTORS');

class SaasExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(SAAS_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(SAAS_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(SAAS_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(SAAS_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(SAAS_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'Saas').pipe(map(entities => ({
            ["Saas.EditionsComponent" /* Editions */]: entities.Edition,
            ["Saas.TenantsComponent" /* Tenants */]: entities.Tenant,
        })), mapEntitiesToContributors(configState, 'Saas'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_SAAS_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_SAAS_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_SAAS_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_SAAS_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_SAAS_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
SaasExtensionsGuard.decorators = [
    { type: Injectable }
];
SaasExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];

const ɵ0$8 = {
    requiredPolicy: 'Saas.Tenants',
    replaceableComponent: {
        key: "Saas.TenantsComponent" /* Tenants */,
        defaultComponent: TenantsComponent,
    },
}, ɵ1$4 = {
    requiredPolicy: 'Saas.Editions',
    replaceableComponent: {
        key: "Saas.EditionsComponent" /* Editions */,
        defaultComponent: EditionsComponent,
    },
};
const routes = [
    { path: '', redirectTo: 'tenants', pathMatch: 'full' },
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, SaasExtensionsGuard],
        children: [
            {
                path: 'tenants',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0$8,
            },
            {
                path: 'editions',
                component: ReplaceableRouteContainerComponent,
                data: ɵ1$4,
            },
        ],
    },
];
class SaasRoutingModule {
}
SaasRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

class SaasModule {
    static forChild(options = {}) {
        return {
            ngModule: SaasModule,
            providers: [
                {
                    provide: SAAS_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: SAAS_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: SAAS_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: SAAS_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: SAAS_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                SaasExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(SaasModule.forChild(options));
    }
}
SaasModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TenantsComponent,
                    EditionsComponent,
                    EditionsUsageWidgetComponent,
                    LatestTenantsWidgetComponent,
                ],
                exports: [
                    TenantsComponent,
                    EditionsComponent,
                    EditionsUsageWidgetComponent,
                    LatestTenantsWidgetComponent,
                ],
                imports: [
                    SaasRoutingModule,
                    NgxsModule.forFeature([SaasState]),
                    NgxValidateCoreModule,
                    CoreModule,
                    CommercialUiModule,
                    ThemeSharedModule,
                    NgbDropdownModule,
                    FeatureManagementModule,
                ],
            },] }
];

class SaasStateService {
    constructor(store) {
        this.store = store;
    }
    getTenants() {
        return this.store.selectSnapshot(SaasState.getTenants);
    }
    getLatestTenants() {
        return this.store.selectSnapshot(SaasState.getLatestTenants);
    }
    getTenantsTotalCount() {
        return this.store.selectSnapshot(SaasState.getTenantsTotalCount);
    }
    getEditions() {
        return this.store.selectSnapshot(SaasState.getEditions);
    }
    getEditionsTotalCount() {
        return this.store.selectSnapshot(SaasState.getEditionsTotalCount);
    }
    getUsageStatistics() {
        return this.store.selectSnapshot(SaasState.getUsageStatistics);
    }
    dispatchGetTenants(...args) {
        return this.store.dispatch(new GetTenants(...args));
    }
    dispatchGetTenantById(...args) {
        return this.store.dispatch(new GetTenantById(...args));
    }
    dispatchCreateTenant(...args) {
        return this.store.dispatch(new CreateTenant(...args));
    }
    dispatchUpdateTenant(...args) {
        return this.store.dispatch(new UpdateTenant(...args));
    }
    dispatchDeleteTenant(...args) {
        return this.store.dispatch(new DeleteTenant(...args));
    }
    dispatchGetEditions(...args) {
        return this.store.dispatch(new GetEditions(...args));
    }
    dispatchGetEditionById(...args) {
        return this.store.dispatch(new GetEditionById(...args));
    }
    dispatchCreateEdition(...args) {
        return this.store.dispatch(new CreateEdition(...args));
    }
    dispatchUpdateEdition(...args) {
        return this.store.dispatch(new UpdateEdition(...args));
    }
    dispatchDeleteEdition(...args) {
        return this.store.dispatch(new DeleteEdition(...args));
    }
    dispatchGetUsageStatistics() {
        return this.store.dispatch(new GetUsageStatistics());
    }
    dispatchGetLatestTenants() {
        return this.store.dispatch(new GetLatestTenants());
    }
}
SaasStateService.ɵprov = ɵɵdefineInjectable({ factory: function SaasStateService_Factory() { return new SaasStateService(ɵɵinject(Store)); }, token: SaasStateService, providedIn: "root" });
SaasStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SaasStateService.ctorParameters = () => [
    { type: Store }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CreateEdition, CreateTenant, DEFAULT_SAAS_CREATE_FORM_PROPS, DEFAULT_SAAS_EDIT_FORM_PROPS, DEFAULT_SAAS_ENTITY_ACTIONS, DEFAULT_SAAS_ENTITY_PROPS, DEFAULT_SAAS_TOOLBAR_ACTIONS, DeleteEdition, DeleteTenant, EditionService, EditionsComponent, EditionsUsageWidgetComponent, GetEditionById, GetEditions, GetLatestTenants, GetTenantById, GetTenants, GetUsageStatistics, LatestTenantsWidgetComponent, SAAS_CREATE_FORM_PROP_CONTRIBUTORS, SAAS_EDIT_FORM_PROP_CONTRIBUTORS, SAAS_ENTITY_ACTION_CONTRIBUTORS, SAAS_ENTITY_PROP_CONTRIBUTORS, SAAS_TOOLBAR_ACTION_CONTRIBUTORS, SaasExtensionsGuard, SaasModule, SaasState, SaasStateService, TenantService, TenantsComponent, UpdateEdition, UpdateTenant, ɵ0, TenantsComponent as ɵa, SAAS_ENTITY_PROP_CONTRIBUTORS as ɵba, SAAS_CREATE_FORM_PROP_CONTRIBUTORS as ɵbb, SAAS_EDIT_FORM_PROP_CONTRIBUTORS as ɵbc, SaasState as ɵc, TenantService as ɵd, EditionService as ɵe, GetTenants as ɵf, CreateTenant as ɵg, UpdateTenant as ɵh, DeleteTenant as ɵi, GetEditions as ɵj, CreateEdition as ɵk, UpdateEdition as ɵl, DeleteEdition as ɵm, GetUsageStatistics as ɵn, GetLatestTenants as ɵo, EditionsComponent as ɵt, EditionsUsageWidgetComponent as ɵu, LatestTenantsWidgetComponent as ɵv, SaasRoutingModule as ɵw, SaasExtensionsGuard as ɵx, SAAS_ENTITY_ACTION_CONTRIBUTORS as ɵy, SAAS_TOOLBAR_ACTION_CONTRIBUTORS as ɵz };
//# sourceMappingURL=volo-abp.ng.saas.js.map
