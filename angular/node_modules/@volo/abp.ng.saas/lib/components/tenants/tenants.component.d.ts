import { ListService } from '@abp/ng.core';
import { ConfirmationService } from '@abp/ng.theme.shared';
import { Injector, OnInit, TemplateRef } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Store } from '@ngxs/store';
import { Observable } from 'rxjs';
import { EditionDto, GetTenantsInput, SaasTenantDto } from '../../proxy/host/dtos/models';
import { TenantService } from '../../proxy/host/tenant.service';
interface SelectedModalContent {
    type: 'saveConnStr' | 'saveTenant';
    title: string;
    template: TemplateRef<any>;
}
export declare class TenantsComponent implements OnInit {
    readonly list: ListService<GetTenantsInput>;
    private confirmationService;
    private tenantService;
    private fb;
    private store;
    private injector;
    tenants$: Observable<SaasTenantDto[]>;
    totalCount$: Observable<number>;
    editions$: Observable<EditionDto[]>;
    selected: SaasTenantDto;
    tenantForm: FormGroup;
    defaultConnectionStringForm: FormGroup;
    defaultConnectionString: string;
    isModalVisible: boolean;
    selectedModalContent: SelectedModalContent;
    visibleFeatures: boolean;
    providerKey: string;
    _useSharedDatabase: boolean;
    modalBusy: boolean;
    tenantModalTemplate: TemplateRef<any>;
    connectionStringModalTemplate: TemplateRef<any>;
    get useSharedDatabase(): boolean;
    get connectionString(): string;
    get hasSelectedTenant(): boolean;
    get isDisabledSaveButton(): boolean;
    onVisibleFeaturesChange: (value: boolean) => void;
    constructor(list: ListService<GetTenantsInput>, confirmationService: ConfirmationService, tenantService: TenantService, fb: FormBuilder, store: Store, injector: Injector);
    ngOnInit(): void;
    private hookToQuery;
    private createTenantForm;
    private createDefaultConnectionStringForm;
    openModal(title: string, template: TemplateRef<any>, type: 'saveConnStr' | 'saveTenant'): void;
    onEditConnectionString(id: string): void;
    onAddTenant(): void;
    onEditTenant(id: string): void;
    save(): void;
    saveConnectionString(): void;
    saveTenant(): void;
    delete(id: string, name: string): void;
    onSharedDatabaseChange(value: boolean): void;
    openFeaturesModal(providerKey: string): void;
}
export {};
