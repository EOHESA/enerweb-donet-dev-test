import { Statistics } from '@abp/ng.theme.shared';
import { StateContext } from '@ngxs/store';
import { CreateEdition, CreateTenant, DeleteEdition, DeleteTenant, GetEditions, GetTenants, UpdateEdition, UpdateTenant } from '../actions/saas.actions';
import { Saas } from '../models/saas';
import { EditionDto, SaasTenantDto } from '../proxy/host/dtos/models';
import { EditionService } from '../proxy/host/edition.service';
import { TenantService } from '../proxy/host/tenant.service';
export declare class SaasState {
    private tenantService;
    private editionService;
    static getTenants({ tenants }: Saas.State): SaasTenantDto[];
    static getLatestTenants({ latestTenants }: Saas.State): SaasTenantDto[];
    static getTenantsTotalCount({ tenants }: Saas.State): number;
    static getEditions({ editions }: Saas.State): EditionDto[];
    static getEditionsTotalCount({ editions }: Saas.State): number;
    static getUsageStatistics({ usageStatistics }: Saas.State): Statistics.Data;
    constructor(tenantService: TenantService, editionService: EditionService);
    getTenants({ patchState }: StateContext<Saas.State>, { payload }: GetTenants): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<SaasTenantDto>>;
    deleteTenant(_: any, { payload }: DeleteTenant): import("rxjs").Observable<void>;
    createTenant(_: any, { payload }: CreateTenant): import("rxjs").Observable<SaasTenantDto>;
    updateTenant(_: any, { payload: { id, ...input } }: UpdateTenant): import("rxjs").Observable<SaasTenantDto>;
    getEditions({ patchState }: StateContext<Saas.State>, { payload }: GetEditions): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<EditionDto>>;
    deleteEdition(_: any, { payload }: DeleteEdition): import("rxjs").Observable<void>;
    createEdition(_: any, { payload }: CreateEdition): import("rxjs").Observable<EditionDto>;
    updateEdition(_: any, { payload: { id, ...input } }: UpdateEdition): import("rxjs").Observable<EditionDto>;
    getUsage({ patchState }: StateContext<Saas.State>): import("rxjs").Observable<import("../proxy/host").GetEditionUsageStatisticsResult>;
    getLatestTenants({ patchState }: StateContext<Saas.State>): import("rxjs").Observable<import("@abp/ng.core").PagedResultDto<SaasTenantDto>>;
}
