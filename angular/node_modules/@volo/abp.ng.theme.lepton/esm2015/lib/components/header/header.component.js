import{Component,ElementRef,EventEmitter,Output,Renderer2,ViewChild,ViewEncapsulation}from"@angular/core";import{SubscriptionService}from"@abp/ng.core";import{Store}from"@ngxs/store";import{LayoutStateService}from"../../services/layout-state.service";export class HeaderComponent{constructor(e,n,a,r){this.subscription=e,this.renderer=n,this.store=a,this.layoutStateService=r,this.isNavbarExpanded$=this.layoutStateService.get$("isNavbarExpanded"),this.isMenuExpanded$=this.layoutStateService.get$("isMenuExpanded"),this.smallScreen$=this.layoutStateService.get$("smallScreen"),this.isMenuPlacementTop$=this.layoutStateService.get$("isMenuPlacementTop"),this.logoComponentKey="Theme.LogoComponent",this.navbarComponentKey="Theme.NavbarComponent",this.navbarMobileComponentKey="Theme.NavbarMobileComponent",this.sidebarComponentKey="Theme.Sidebar",this.mouseMoveContainer=new EventEmitter}ngAfterViewInit(){this.mouseMoveContainer.next([this.navbarBrandRef])}navbarIconClick(e){this.layoutStateService.patch({isNavbarExpanded:e})}menuIconClick(e){this.layoutStateService.patch({isMenuExpanded:e})}}HeaderComponent.decorators=[{type:Component,args:[{selector:"abp-header",template:'<header\r\n  *ngIf="{\r\n    isNavbarExpanded: isNavbarExpanded$ | async,\r\n    isMenuExpanded: isMenuExpanded$ | async,\r\n    smallScreen: smallScreen$ | async,\r\n    isMenuPlacementTop: isMenuPlacementTop$ | async\r\n  } as data"\r\n>\r\n  <div #navbarBrand>\r\n    <abp-logo *abpReplaceableTemplate="{ componentKey: logoComponentKey }"></abp-logo>\r\n  </div>\r\n\r\n  <abp-navbar-mobile\r\n    *abpReplaceableTemplate="{\r\n      componentKey: navbarMobileComponentKey,\r\n      inputs: {\r\n        isNavbarExpanded: { value: data.isNavbarExpanded },\r\n        isMenuExpanded: { value: data.isMenuExpanded }\r\n      },\r\n      outputs: {\r\n        navbarIconClick: navbarIconClick,\r\n        menuIconClick: menuIconClick\r\n      }\r\n    }"\r\n    [isNavbarExpanded]="data.isNavbarExpanded"\r\n    [isMenuExpanded]="data.isMenuExpanded"\r\n    (navbarIconClick)="navbarIconClick($event)"\r\n    (menuIconClick)="menuIconClick($event)"\r\n  ></abp-navbar-mobile>\r\n\r\n  <abp-navbar\r\n    *abpReplaceableTemplate="{\r\n      componentKey: navbarComponentKey,\r\n      inputs: {\r\n        isNavbarExpanded: { value: data.isNavbarExpanded },\r\n        smallScreen: { value: data.smallScreen }\r\n      }\r\n    }"\r\n    [smallScreen]="data.smallScreen"\r\n    [isNavbarExpanded]="data.isNavbarExpanded"\r\n  >\r\n  </abp-navbar>\r\n  <abp-sidebar\r\n    *abpReplaceableTemplate="{\r\n      componentKey: sidebarComponentKey,\r\n      inputs: {\r\n        smallScreen: { value: data.smallScreen },\r\n        isMenuExpanded: { value: data.isMenuExpanded },\r\n        isMenuPlacementTop: { value: data.isMenuPlacementTop }\r\n      },\r\n      outputs: { mouseMoveContainer: mouseMoveContainer.next }\r\n    }"\r\n    [smallScreen]="data.smallScreen"\r\n    [isMenuExpanded]="data.isMenuExpanded"\r\n    [isMenuPlacementTop]="data.isMenuPlacementTop"\r\n    (mouseMoveContainer)="mouseMoveContainer.next($event)"\r\n  ></abp-sidebar>\r\n</header>\r\n',providers:[SubscriptionService],encapsulation:ViewEncapsulation.None}]}],HeaderComponent.ctorParameters=()=>[{type:SubscriptionService},{type:Renderer2},{type:Store},{type:LayoutStateService}],HeaderComponent.propDecorators={mouseMoveContainer:[{type:Output}],navbarBrandRef:[{type:ViewChild,args:["navbarBrand",{read:ElementRef}]}]};