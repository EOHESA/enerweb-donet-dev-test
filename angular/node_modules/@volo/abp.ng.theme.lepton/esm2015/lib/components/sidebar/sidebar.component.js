import{Component,ElementRef,EventEmitter,Input,Output,ViewChild,ViewEncapsulation}from"@angular/core";import{LayoutStateService}from"../../services/layout-state.service";import{SubscriptionService}from"@abp/ng.core";import{LayoutService}from"../../services/layout.service";import{fromEvent}from"rxjs";import{debounceTime,startWith,switchMap}from"rxjs/operators";export class SidebarComponent{constructor(e,n){this.layoutStateService=e,this.layout=n,this.mouseMoveContainer=new EventEmitter,this.routesComponentKey="Theme.RoutesComponent",this.mouseOnSidebar$=this.layoutStateService.get$("mouseOnSidebar"),this.isSidebarCollapsed$=this.layoutStateService.get$("isSidebarCollapsed")}onClickLink(){this.smallScreen&&this.layoutStateService.patch({isMenuExpanded:!1,isNavbarExpanded:!1})}onClickMenuIcon(e){this.layout.onClickMenuIcon(e)}ngAfterViewInit(){this.mouseMoveContainer.next([this.navbarSidebarRef]),this.listenResize()}listenResize(){fromEvent(window,"resize").pipe(debounceTime(150)).pipe(startWith({}),switchMap(()=>this.layout.setSmallScreen())).subscribe()}}SidebarComponent.decorators=[{type:Component,args:[{selector:"abp-sidebar",template:'<div\r\n  #navbarSidebar\r\n  class="lp-sidebar navbar-collapse d-lg-block collapse"\r\n  id="navbarSidebar"\r\n  [class.show]="smallScreen"\r\n  [class.abp-collapsed-height]="smallScreen"\r\n  [class.abp-mh-100]="smallScreen && isMenuExpanded"\r\n  *ngIf="{\r\n    isSidebarCollapsed: isSidebarCollapsed$ | async,\r\n    mouseOnSidebar: mouseOnSidebar$ | async\r\n  } as data"\r\n>\r\n  <div class="lp-sidebar-header" [class.w-75]="!data.mouseOnSidebar">\r\n    <div class="lp-toggle-sidebar" (click)="onClickMenuIcon(data.isSidebarCollapsed)">\r\n      <i\r\n        class="fa fa-align-{{ data.isSidebarCollapsed ? \'left\' : \'justify\' }} material-icons lp-{{\r\n          data.isSidebarCollapsed ? \'open\' : \'close\'\r\n        }}-icon"\r\n      ></i>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-routes\r\n    *abpReplaceableTemplate="{\r\n      componentKey: routesComponentKey,\r\n      outputs: { clickedToLink: onClickLink },\r\n      inputs: {\r\n        isMenuPlacementTop: { value: isMenuPlacementTop },\r\n        smallScreen: { value: smallScreen }\r\n      }\r\n    }"\r\n    (clickedToLink)="onClickLink()"\r\n    [isMenuPlacementTop]="isMenuPlacementTop"\r\n    [smallScreen]="smallScreen"\r\n  ></abp-routes>\r\n</div>\r\n',providers:[SubscriptionService],encapsulation:ViewEncapsulation.None}]}],SidebarComponent.ctorParameters=()=>[{type:LayoutStateService},{type:LayoutService}],SidebarComponent.propDecorators={isMenuExpanded:[{type:Input}],smallScreen:[{type:Input}],isMenuPlacementTop:[{type:Input}],mouseMoveContainer:[{type:Output}],navbarSidebarRef:[{type:ViewChild,args:["navbarSidebar",{read:ElementRef}]}]};