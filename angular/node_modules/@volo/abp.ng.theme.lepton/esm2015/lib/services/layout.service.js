import{Injectable,Injector,RendererFactory2}from"@angular/core";import{Observable,throwError}from"rxjs";import{catchError}from"rxjs/operators";import{Layout}from"../models";import{setStyle}from"../utils/layout.utils";import{SettingsService}from"./settings.service";import{LayoutStateService}from"./layout-state.service";import*as i0 from"@angular/core";export class LayoutService{constructor(e){this.injector=e,this.rendererFactory=e.get(RendererFactory2),this.themeSettingsService=e.get(SettingsService),this.layoutState=e.get(LayoutStateService),this.renderer=this.rendererFactory.createRenderer(document.body,null)}fetchThemeSettings(e){this.themeSettingsService.get().subscribe(t=>{setStyle((t.style||0)+1,this.injector),this.setMenuPlacement(t.menuPlacement||0),this.setLayoutBoxed(t.boxedLayout||!1),(t.menuPlacement||0)===Layout.MenuPlacement.Left&&this.setMenuStatus(t.menuStatus||0),this.layoutState.patch({themeSettings:t}),e&&e(t)})}updateThemeSettings(e,t,s){this.themeSettingsService.update(e).pipe(catchError(e=>s?s(e):throwError(e))).subscribe(s=>{this.layoutState.patch({themeSettings:e}),t&&t(s)})}setLayoutBoxed(e){this.layoutState.get("boxedLayout")!==e&&(e?this.renderer.addClass(document.body,"lp-boxed"):this.renderer.removeClass(document.body,"lp-boxed"),this.layoutState.patch({boxedLayout:e}))}setMenuStatus(e){this.layoutState.get("menuStatus")===e&&this.layoutState.get("menuPlacement")!==Layout.MenuPlacement.Left||(this.addMenuStatusClasses(e),this.layoutState.patch({menuStatus:e,isSidebarCollapsed:!!e}))}setMenuPlacement(e){this.layoutState.get("menuPlacement")!==e&&(this.addMenuPlacementClasses(e),this.layoutState.patch({menuPlacement:e,isMenuPlacementTop:e===Layout.MenuPlacement.Top}))}onClickMenuIcon(e){this.layoutState.patch({isSidebarCollapsed:!e}),e?this.setMenuStatus(Layout.MenuStatus.AlwaysOpened):this.setMenuStatus(Layout.MenuStatus.OpenOnHover)}addMenuPlacementClasses(e){e===Layout.MenuPlacement.Top?(["lp-opened-sidebar","lp-body-fixed","lp-closed"].forEach(e=>this.renderer.removeClass(document.body,e)),this.renderer.addClass(document.body,"lp-topmenu")):(this.renderer.removeClass(document.body,"lp-topmenu"),this.renderer.addClass(document.body,"lp-opened-sidebar"))}addMenuStatusClasses(e){e?(this.renderer.removeClass(document.body,"lp-body-fixed"),this.renderer.removeClass(document.body,"lp-opened-sidebar"),this.renderer.addClass(document.body,"lp-closed")):(this.renderer.addClass(document.body,"lp-body-fixed"),this.renderer.addClass(document.body,"lp-opened-sidebar"),this.renderer.removeClass(document.body,"lp-closed"))}addSidebarClasses(e){e?document.body.classList.contains("lp-closed")&&this.renderer.addClass(document.body,"lp-extended"):this.renderer.removeClass(document.body,"lp-extended")}setSmallScreen(){return new Observable(e=>{setTimeout(()=>{const t=this.layoutState.get("isMenuPlacementTop"),s=this.layoutState.get("isMenuSwitched"),a=window.innerWidth<992;a&&t?(this.setMenuPlacement(Layout.MenuPlacement.Left),this.layoutState.patch({isMenuSwitched:s})):!a&&s&&this.layoutState.patch({isMenuSwitched:!1,menuPlacement:Layout.MenuPlacement.Top}),this.layoutState.patch({smallScreen:a}),e.next(),e.complete()},0)})}}LayoutService.ɵprov=i0.ɵɵdefineInjectable({factory:function(){return new LayoutService(i0.ɵɵinject(i0.INJECTOR))},token:LayoutService,providedIn:"root"}),LayoutService.decorators=[{type:Injectable,args:[{providedIn:"root"}]}],LayoutService.ctorParameters=()=>[{type:Injector}];