import { uuid, TrackByService, PROJECTION_STRATEGY, ContentProjectionService, RoutesService, CoreModule } from '@abp/ng.core';
import { collapse, ThemeSharedModule } from '@abp/ng.theme.shared';
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, ɵɵdefineInjectable, ɵɵinject, Injectable, APP_INITIALIZER, NgModule } from '@angular/core';
import { EntityChangeType, AuditLogsService, SHOW_ENTITY_DETAILS } from '@volo/abp.ng.audit-logging';
import { SHOW_ENTITY_HISTORY } from '@volo/abp.commercial.ng.ui';

class EntityChangeDetailsComponent {
    constructor(track) {
        this.track = track;
        this.isCollapsed = false;
        this.colors = {
            [EntityChangeType.Created]: 'success',
            [EntityChangeType.Updated]: 'info',
            [EntityChangeType.Deleted]: 'danger',
        };
        this.uuid = uuid();
    }
    set itemWithUserName(item) {
        this.changeType = EntityChangeType[item.entityChange.changeType];
        this.color = this.colors[item.entityChange.changeType];
        this.userName = item.userName;
        this.entityChange = item.entityChange;
    }
    getPropColor(propertyChange) {
        return this.entityChange.changeType === EntityChangeType.Updated &&
            propertyChange.newValue !== propertyChange.originalValue
            ? 'red'
            : undefined;
    }
    getInterpolationParams(changeTime) {
        return [this.changeType, changeTime, this.userName];
    }
}
EntityChangeDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-entity-change-details',
                template: "<div\r\n  class=\"mb-3 border border-dark rounded\"\r\n  *ngIf=\"getInterpolationParams(entityChange.changeTime | date: 'medium') as params\"\r\n>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-{{ color }} btn-block\"\r\n    (click)=\"isCollapsed = !isCollapsed\"\r\n    [attr.aria-expanded]=\"!isCollapsed\"\r\n    [attr.aria-controls]=\"uuid\"\r\n  >\r\n    {{ 'AbpAuditLogging::DaysAgoWithUserTitle' | abpLocalization: params }}\r\n  </button>\r\n  <div [id]=\"uuid\" [@collapse]=\"isCollapsed ? 'collapsed' : 'expanded'\">\r\n    <div class=\"m-3\">\r\n      <table class=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>{{ 'AbpAuditLogging::PropertyName' | abpLocalization }}</th>\r\n            <th>{{ 'AbpAuditLogging::OriginalValue' | abpLocalization }}</th>\r\n            <th>{{ 'AbpAuditLogging::NewValue' | abpLocalization }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let prop of entityChange.propertyChanges; trackBy: track.by('id')\">\r\n            <td>{{ prop.propertyName }}</td>\r\n            <td>{{ prop.originalValue }}</td>\r\n            <td [style.color]=\"getPropColor(prop)\">{{ prop.newValue }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                animations: [collapse]
            },] }
];
EntityChangeDetailsComponent.ctorParameters = () => [
    { type: TrackByService }
];
EntityChangeDetailsComponent.propDecorators = {
    itemWithUserName: [{ type: Input }],
    isCollapsed: [{ type: Input }]
};

class EntityChangeModalComponent {
    constructor(cdRef, track) {
        this.cdRef = cdRef;
        this.track = track;
        this.history = [];
        this.visible = false;
    }
}
EntityChangeModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-entity-change-modal',
                template: "<abp-modal [(visible)]=\"visible\">\r\n  <ng-template #abpHeader>\r\n    <h5 class=\"modal-title\">\r\n      {{ entityTypeFullName }}\r\n      <br />\r\n      <span style=\"font-size:small\">({{ entityId }})</span>\r\n    </h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <ng-container *ngIf=\"history.length; else noChanges\">\r\n      <abp-entity-change-details\r\n        *ngFor=\"let change of history; first as f; trackBy: track.byDeep('entityChange', 'id')\"\r\n        [itemWithUserName]=\"change\"\r\n        [isCollapsed]=\"!f\"\r\n      ></abp-entity-change-details>\r\n    </ng-container>\r\n\r\n    <ng-template #noChanges\r\n      ><div class=\"text-center\">\r\n        {{ 'AbpAuditLogging::NoChanges' | abpLocalization }}\r\n      </div></ng-template\r\n    >\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpAuditLogging::Close' | abpLocalization }}\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
EntityChangeModalComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: TrackByService }
];

class EntityChangeModalService {
    constructor(auditLogsService, contentProjectionService) {
        this.auditLogsService = auditLogsService;
        this.contentProjectionService = contentProjectionService;
        this.projectModal();
    }
    projectModal() {
        this.modalRef = this.contentProjectionService.projectContent(PROJECTION_STRATEGY.AppendComponentToBody(EntityChangeModalComponent));
        this.modalRef.changeDetectorRef.detectChanges();
    }
    detectChanges() {
        this.modalRef.changeDetectorRef.detectChanges();
        this.modalRef.instance.cdRef.detectChanges();
    }
    showDetails(entityChangeId) {
        this.auditLogsService.getEntityChangeWithUsername(entityChangeId).subscribe(change => {
            this.modalRef.instance.entityId = change.entityChange.entityId;
            this.modalRef.instance.entityTypeFullName = change.entityChange.entityTypeFullName;
            this.modalRef.instance.history = [change].filter(Boolean);
            this.modalRef.instance.visible = true;
            this.detectChanges();
        });
    }
    showHistory(entityId, entityTypeFullName) {
        this.auditLogsService
            .getEntityChangesWithUsername({ entityId, entityTypeFullName })
            .subscribe(changes => {
            this.modalRef.instance.entityId = entityId;
            this.modalRef.instance.entityTypeFullName = entityTypeFullName;
            this.modalRef.instance.history = changes;
            this.modalRef.instance.visible = true;
            this.detectChanges();
        });
    }
}
EntityChangeModalService.ɵprov = ɵɵdefineInjectable({ factory: function EntityChangeModalService_Factory() { return new EntityChangeModalService(ɵɵinject(AuditLogsService), ɵɵinject(ContentProjectionService)); }, token: EntityChangeModalService, providedIn: "root" });
EntityChangeModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
EntityChangeModalService.ctorParameters = () => [
    { type: AuditLogsService },
    { type: ContentProjectionService }
];

const ENTITY_DETAILS_PROVIDERS = [
    {
        provide: SHOW_ENTITY_DETAILS,
        useFactory: bindShowDetails,
        deps: [EntityChangeModalService],
    },
];
function bindShowDetails(service) {
    return service.showDetails.bind(service);
}

const ENTITY_HISTORY_PROVIDERS = [
    {
        provide: SHOW_ENTITY_HISTORY,
        useFactory: bindShowHistory,
        deps: [EntityChangeModalService],
    },
];
function bindShowHistory(service) {
    return service.showHistory.bind(service);
}

const AUDIT_LOGGING_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
];
function configureRoutes(routes) {
    return () => {
        routes.add([
            {
                name: "AbpAuditLogging::Menu:AuditLogging" /* AuditLogging */,
                path: '/audit-logs',
                parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                layout: "application" /* application */,
                iconClass: 'fa fa-file-text',
                order: 6,
                requiredPolicy: "AuditLogging.AuditLogs" /* AuditLogging */,
            },
        ]);
    };
}

class AuditLoggingConfigModule {
    static forRoot() {
        return {
            ngModule: AuditLoggingConfigModule,
            providers: [
                AUDIT_LOGGING_ROUTE_PROVIDERS,
                ENTITY_DETAILS_PROVIDERS,
                ENTITY_HISTORY_PROVIDERS,
            ],
        };
    }
}
AuditLoggingConfigModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [EntityChangeModalComponent],
                declarations: [EntityChangeDetailsComponent, EntityChangeModalComponent],
                exports: [EntityChangeDetailsComponent, EntityChangeModalComponent],
                imports: [CoreModule, ThemeSharedModule],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AUDIT_LOGGING_ROUTE_PROVIDERS, AuditLoggingConfigModule, ENTITY_DETAILS_PROVIDERS, ENTITY_HISTORY_PROVIDERS, EntityChangeDetailsComponent, EntityChangeModalComponent, EntityChangeModalService, bindShowDetails, bindShowHistory, configureRoutes, EntityChangeModalComponent as ɵa, EntityChangeDetailsComponent as ɵb, AUDIT_LOGGING_ROUTE_PROVIDERS as ɵc, configureRoutes as ɵd, ENTITY_DETAILS_PROVIDERS as ɵe, ENTITY_HISTORY_PROVIDERS as ɵf };
//# sourceMappingURL=volo-abp.ng.audit-logging-config.js.map
