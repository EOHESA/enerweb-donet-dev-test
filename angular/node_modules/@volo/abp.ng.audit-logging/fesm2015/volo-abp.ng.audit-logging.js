import { RestService, ListService, ConfigStateService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, mapEnumToOptions, TrackByService, SubscriptionService, LocalizationService, PermissionService, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { collapse, fadeIn, ThemeSharedModule } from '@abp/ng.theme.shared';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, Component, InjectionToken, Injector, NgModule, ChangeDetectionStrategy, Output, Input } from '@angular/core';
import { NgbDateAdapter, NgbNavModule, NgbDatepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { SHOW_ENTITY_HISTORY, CommercialUiModule } from '@volo/abp.commercial.ng.ui';
import { RouterModule } from '@angular/router';
import { __decorate } from 'tslib';
import { EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, DateAdapter } from '@abp/ng.theme.shared/extensions';
import { trigger, transition, useAnimation } from '@angular/animations';
import { tap, take, map, mapTo } from 'rxjs/operators';
import { of, BehaviorSubject } from 'rxjs';
import { FormBuilder } from '@angular/forms';

class GetAuditLogs {
    constructor(payload) {
        this.payload = payload;
    }
}
GetAuditLogs.type = '[AuditLogging] Get';
class GetAverageExecutionDurationPerDay {
    constructor(payload) {
        this.payload = payload;
    }
}
GetAverageExecutionDurationPerDay.type = '[AuditLogging] Get Average Execution Duration Per Day';
class GetErrorRate {
    constructor(payload) {
        this.payload = payload;
    }
}
GetErrorRate.type = '[AuditLogging] Get Error Rate';

const HTTP_METHODS = ['GET', 'POST', 'DELETE', 'PUT', 'HEAD', 'CONNECT', 'OPTIONS', 'TRACE'];
const HTTP_STATUS_CODES = [
    { code: 100, message: 'Continue' },
    { code: 101, message: 'Switching Protocols' },
    { code: 102, message: 'Processing' },
    { code: 103, message: 'Early Hints' },
    { code: 200, message: 'OK' },
    { code: 201, message: 'Created' },
    { code: 202, message: 'Accepted' },
    { code: 203, message: 'Non-authoritative Information' },
    { code: 204, message: 'No Content' },
    { code: 205, message: 'Reset Content' },
    { code: 206, message: 'Partial Content' },
    { code: 207, message: 'Multi-Status' },
    { code: 208, message: 'Already Registered' },
    { code: 226, message: 'IM Used' },
    { code: 300, message: 'Multiple Choices' },
    { code: 301, message: 'Moved Permanently' },
    { code: 302, message: 'Found' },
    { code: 303, message: 'See Other' },
    { code: 304, message: 'Not Modified' },
    { code: 305, message: 'Use Proxy' },
    { code: 306, message: 'Switch Proxy' },
    { code: 307, message: 'Temporary Redirect' },
    { code: 308, message: 'Permanent Redirect' },
    { code: 400, message: 'Bad Request' },
    { code: 401, message: 'Unauthorized' },
    { code: 402, message: 'Payment Required' },
    { code: 403, message: 'Forbidden' },
    { code: 404, message: 'Not Found' },
    { code: 405, message: 'Method Not Allowed' },
    { code: 406, message: 'Not Acceptable' },
    { code: 407, message: 'Proxy Authentication Required' },
    { code: 408, message: 'Request Timeout' },
    { code: 409, message: 'Conflict' },
    { code: 410, message: 'Gone' },
    { code: 411, message: 'Length Required' },
    { code: 412, message: 'Precondition Failed' },
    { code: 413, message: 'Payload Too Large' },
    { code: 414, message: 'Request-URI Too Long' },
    { code: 415, message: 'Unsupported Media Type' },
    { code: 416, message: 'Requested Range Not Satisfiable' },
    { code: 417, message: 'Expectation Failed' },
    { code: 421, message: 'Misdirected Request' },
    { code: 423, message: 'Locked' },
    { code: 424, message: 'Failed Dependency' },
    { code: 426, message: 'Upgrade Required' },
    { code: 428, message: 'Precondition Required' },
    { code: 429, message: 'Too Many Requests' },
    { code: 431, message: 'Request Header Fields Too Large' },
    { code: 451, message: 'Unavailable For Legal Reasons' },
    { code: 500, message: 'Internal Server Error' },
    { code: 501, message: 'Not Implemented' },
    { code: 502, message: 'Bad Gateway' },
    { code: 503, message: 'Service Unavailable' },
    { code: 504, message: 'Gateway Timeout' },
    { code: 505, message: 'HTTP Version Not Supported' },
    { code: 506, message: 'Variant Also Negotiates' },
    { code: 507, message: 'Insufficient Storage' },
    { code: 508, message: 'Loop Detected' },
    { code: 510, message: 'Not Extended' },
    { code: 511, message: 'Network Authentication Required' },
];

class AuditLogsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpAuditLogging';
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/${id}`,
        }, { apiName: this.apiName });
        this.getAverageExecutionDurationPerDay = (filter) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/statistics/average-execution-duration-per-day`,
            params: { startDate: filter.startDate, endDate: filter.endDate },
        }, { apiName: this.apiName });
        this.getEntityChange = (entityChangeId) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/entity-changes/${entityChangeId}`,
        }, { apiName: this.apiName });
        this.getEntityChangeWithUsername = (entityChangeId) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/entity-change-with-username/${entityChangeId}`,
        }, { apiName: this.apiName });
        this.getEntityChanges = (input) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/entity-changes`,
            params: {
                auditLogId: input.auditLogId,
                entityChangeType: input.entityChangeType,
                entityId: input.entityId,
                entityTypeFullName: input.entityTypeFullName,
                startDate: input.startDate,
                endDate: input.endDate,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
        this.getEntityChangesWithUsername = (input) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/entity-changes-with-username`,
            params: { entityId: input.entityId, entityTypeFullName: input.entityTypeFullName },
        }, { apiName: this.apiName });
        this.getErrorRate = (filter) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs/statistics/error-rate`,
            params: { startDate: filter.startDate, endDate: filter.endDate },
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: `/api/audit-logging/audit-logs`,
            params: {
                url: input.url,
                userName: input.userName,
                applicationName: input.applicationName,
                correlationId: input.correlationId,
                httpMethod: input.httpMethod,
                httpStatusCode: input.httpStatusCode,
                maxExecutionDuration: input.maxExecutionDuration,
                minExecutionDuration: input.minExecutionDuration,
                hasException: input.hasException,
                sorting: input.sorting,
                skipCount: input.skipCount,
                maxResultCount: input.maxResultCount,
            },
        }, { apiName: this.apiName });
    }
}
AuditLogsService.ɵprov = ɵɵdefineInjectable({ factory: function AuditLogsService_Factory() { return new AuditLogsService(ɵɵinject(RestService)); }, token: AuditLogsService, providedIn: "root" });
AuditLogsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuditLogsService.ctorParameters = () => [
    { type: RestService }
];

let AuditLoggingState = class AuditLoggingState {
    constructor(service) {
        this.service = service;
    }
    static get({ result }) {
        return result.items || [];
    }
    static getTotalCount({ result }) {
        return result.totalCount || 0;
    }
    static getAverageExecutionStatistics({ averageExecutionStatistics }) {
        return averageExecutionStatistics;
    }
    static getErrorRateStatistics({ errorRateStatistics }) {
        return errorRateStatistics;
    }
    get({ patchState }, { payload }) {
        return this.service.getList(payload).pipe(tap(result => patchState({
            result,
        })));
    }
    getAverageExecutionData({ patchState }, { payload }) {
        return this.service.getAverageExecutionDurationPerDay(payload).pipe(tap(averageExecution => {
            patchState({
                averageExecutionStatistics: averageExecution.data,
            });
        }));
    }
    getErrorRate({ patchState }, { payload }) {
        return this.service.getErrorRate(payload).pipe(tap(errorRate => {
            patchState({
                errorRateStatistics: errorRate.data,
            });
        }));
    }
};
AuditLoggingState.decorators = [
    { type: Injectable }
];
AuditLoggingState.ctorParameters = () => [
    { type: AuditLogsService }
];
__decorate([
    Action(GetAuditLogs)
], AuditLoggingState.prototype, "get", null);
__decorate([
    Action(GetAverageExecutionDurationPerDay)
], AuditLoggingState.prototype, "getAverageExecutionData", null);
__decorate([
    Action(GetErrorRate)
], AuditLoggingState.prototype, "getErrorRate", null);
__decorate([
    Selector()
], AuditLoggingState, "get", null);
__decorate([
    Selector()
], AuditLoggingState, "getTotalCount", null);
__decorate([
    Selector()
], AuditLoggingState, "getAverageExecutionStatistics", null);
__decorate([
    Selector()
], AuditLoggingState, "getErrorRateStatistics", null);
AuditLoggingState = __decorate([
    State({
        name: 'AuditLoggingState',
        defaults: {
            result: {},
            averageExecutionStatistics: {},
            errorRateStatistics: {},
        },
    })
], AuditLoggingState);

const ɵ0 = "AuditLogging.AuditLogsComponent" /* AuditLogs */;
class AuditLogsComponent {
    constructor(list, service, store) {
        this.list = list;
        this.service = service;
        this.store = store;
        this.selected = {};
        this.pageQuery = { maxResultCount: 10, skipCount: 0 };
        this.httpMethods = HTTP_METHODS;
        this.httpStatusCodes = HTTP_STATUS_CODES;
        this.modalVisible = false;
        this.collapseActionStates = [true];
        this.collapseChangeStates = [true];
        this.sortOrder = '';
        this.sortKey = '';
        this.selectedTab = 'audit-logs';
    }
    ngOnInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.store.dispatch(new GetAuditLogs(Object.assign(Object.assign(Object.assign(Object.assign({}, this.pageQuery), (this.pageQuery.minExecutionDuration === null && {
            minExecutionDuration: undefined,
        })), (this.pageQuery.maxExecutionDuration === null && {
            maxExecutionDuration: undefined,
        })), query))))
            .subscribe();
    }
    openModal(id) {
        this.service
            .get(id)
            .pipe(take(1))
            .subscribe(log => {
            this.selected = log;
            this.modalVisible = true;
        });
    }
    httpCodeClass(httpStatusCode) {
        switch (httpStatusCode.toString()[0]) {
            case '2':
                return 'badge-success';
            case '3':
                return 'badge-warning';
            case '4':
            case '5':
                return 'badge-danger';
            default:
                return 'badge-light';
        }
    }
    httpMethodClass(httpMethod) {
        switch (httpMethod) {
            case 'GET':
                return 'badge-dark';
            case 'POST':
                return 'badge-success';
            case 'DELETE':
                return 'badge-danger';
            case 'PUT':
                return 'badge-warning';
            default:
                return '';
        }
    }
}
AuditLogsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-audit-logs',
                template: "<ng-container *ngIf=\"datas$ | async as data\">\r\n  <div id=\"wrapper\">\r\n    <div class=\"row entry-row\">\r\n      <div class=\"col-auto\">\r\n        <h1 class=\"content-header-title\">{{ 'AbpAuditLogging::AuditLogs' | abpLocalization }}</h1>\r\n      </div>\r\n      <div class=\"col-lg-auto pl-lg-0\">\r\n        <abp-breadcrumb></abp-breadcrumb>\r\n      </div>\r\n      <div class=\"col\">\r\n        <abp-page-toolbar [record]=\"data\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n    <ul class=\"nav nav-tabs\">\r\n      <li class=\"nav-item\">\r\n        <a\r\n          class=\"nav-link pointer\"\r\n          [class.active]=\"selectedTab === 'audit-logs'\"\r\n          (click)=\"selectedTab = 'audit-logs'\"\r\n          >{{ 'AbpAuditLogging::AuditLogs' | abpLocalization }}</a\r\n        >\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a\r\n          class=\"nav-link pointer\"\r\n          [class.active]=\"selectedTab === 'entity-changes'\"\r\n          (click)=\"selectedTab = 'entity-changes'\"\r\n          >{{ 'AbpAuditLogging::EntityChanges' | abpLocalization }}</a\r\n        >\r\n      </li>\r\n    </ul>\r\n    <div class=\"tab-content\" [class.p-0]=\"selectedTab !== 'audit-logs'\">\r\n      <div class=\"tab-pane\" [class.active]=\"selectedTab === 'audit-logs'\" [@fadeIn]=\"selectedTab\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body pb-lg-3\">\r\n            <form (keyup.enter)=\"list.get()\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6 col-lg-2\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"userName\">{{ 'AbpAuditLogging::UserName' | abpLocalization }}</label\r\n                    ><input\r\n                      id=\"userName\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      [(ngModel)]=\"pageQuery.userName\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-2\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"url\">{{ 'AbpAuditLogging::UrlFilter' | abpLocalization }}</label\r\n                    ><input\r\n                      id=\"url\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      [(ngModel)]=\"pageQuery.url\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-2\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"minDuration\">{{\r\n                      'AbpAuditLogging::MinDuration' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id=\"minDuration\"\r\n                      type=\"number\"\r\n                      class=\"form-control\"\r\n                      [(ngModel)]=\"pageQuery.minExecutionDuration\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-2\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"maxDuration\">{{\r\n                      'AbpAuditLogging::MaxDuration' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id=\"maxDuration\"\r\n                      type=\"number\"\r\n                      class=\"form-control\"\r\n                      [(ngModel)]=\"pageQuery.maxExecutionDuration\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-2\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"httpMethod\">{{\r\n                      'AbpAuditLogging::HttpMethod' | abpLocalization\r\n                    }}</label\r\n                    ><select\r\n                      id=\"httpMethod\"\r\n                      class=\"custom-select form-control\"\r\n                      [(ngModel)]=\"pageQuery.httpMethod\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                      (change)=\"list.get()\"\r\n                    >\r\n                      <option [ngValue]=\"\"></option>\r\n                      <option *ngFor=\"let method of httpMethods\" [ngValue]=\"method\">\r\n                        {{ method }}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-2\">\r\n                  <div class=\"form-group\">\r\n                    <label for=\"httpStatusCode\">{{\r\n                      'AbpAuditLogging::HttpStatusCode' | abpLocalization\r\n                    }}</label\r\n                    ><select\r\n                      id=\"httpStatusCode\"\r\n                      class=\"custom-select form-control\"\r\n                      [(ngModel)]=\"pageQuery.httpStatusCode\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                      (change)=\"list.get()\"\r\n                    >\r\n                      <option [ngValue]=\"\"></option>\r\n                      <option *ngFor=\"let h of httpStatusCodes\" [ngValue]=\"h.code\">\r\n                        {{ h.code }} - {{ h.message }}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6 col-lg-3\">\r\n                  <div class=\"form-group mb-lg-0\">\r\n                    <label for=\"applicationName\">{{\r\n                      'AbpAuditLogging::ApplicationName' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id=\"applicationName\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      [(ngModel)]=\"pageQuery.applicationName\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-3\">\r\n                  <div class=\"form-group mb-lg-0\">\r\n                    <label for=\"correlationId\">{{\r\n                      'AbpAuditLogging::CorrelationId' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id=\"correlationId\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      [(ngModel)]=\"pageQuery.correlationId\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-3\">\r\n                  <div class=\"form-group mb-lg-0\">\r\n                    <label for=\"hasException\">{{\r\n                      'AbpAuditLogging::HasException' | abpLocalization\r\n                    }}</label>\r\n                    <select\r\n                      name=\"hasException\"\r\n                      id=\"hasException\"\r\n                      class=\"custom-select form-control\"\r\n                      [(ngModel)]=\"pageQuery.hasException\"\r\n                      [ngModelOptions]=\"{ standalone: true }\"\r\n                      (change)=\"list.get()\"\r\n                    >\r\n                      <option [ngValue]=\"\"></option>\r\n                      <option [ngValue]=\"true\">\r\n                        {{ 'AbpAuditLogging::Yes' | abpLocalization }}\r\n                      </option>\r\n                      <option [ngValue]=\"false\">\r\n                        {{ 'AbpAuditLogging::No' | abpLocalization }}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6 col-lg-3\">\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"btn btn-primary btn-block mt-0 mt-md-4\"\r\n                    (click)=\"list.get()\"\r\n                  >\r\n                    <span>\r\n                      {{ 'AbpAuditLogging::Refresh' | abpLocalization }}\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div class=\"card\">\r\n          <div class=\"card-body p-0\">\r\n            <abp-extensible-table\r\n              [data]=\"data\"\r\n              [recordsTotal]=\"totalCount$ | async\"\r\n              [list]=\"list\"\r\n            ></abp-extensible-table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"tab-content\" [class.p-0]=\"selectedTab !== 'entity-changes'\">\r\n      <div\r\n        class=\"tab-pane\"\r\n        [class.active]=\"selectedTab === 'entity-changes'\"\r\n        [@fadeIn]=\"selectedTab\"\r\n      >\r\n        <abp-entity-changes *ngIf=\"selectedTab === 'entity-changes'\"></abp-entity-changes>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal *ngIf=\"selected\" [(visible)]=\"modalVisible\">\r\n  <ng-template #abpHeader>\r\n    <h5 class=\"modal-title\">\r\n      {{ 'AbpAuditLogging::Detail' | abpLocalization }}\r\n    </h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\r\n      <li ngbNavItem>\r\n        <a ngbNavLink>{{ 'AbpAuditLogging::Overall' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::HttpStatusCode' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">\r\n              <span class=\"badge\" [ngClass]=\"httpCodeClass(selected.httpStatusCode)\">{{\r\n                selected.httpStatusCode\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::HttpMethod' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">\r\n              <span class=\"badge\" [ngClass]=\"httpMethodClass(selected.httpMethod)\">{{\r\n                selected.httpMethod\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::Url' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.url }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::ClientIpAddress' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.clientIpAddress }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::ClientName' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.clientName }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::Exceptions' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">\r\n              <pre lang=\"c-sharp\">\r\n                {{ selected.exceptions }}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::UserName' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.userName }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::Time' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.executionTime }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::Duration' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.executionDuration }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::BrowserInfo' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.browserInfo }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::ApplicationName' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.applicationName }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::CorrelationId' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.correlationId }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::Comments' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">{{ selected.comments }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class=\"row\">\r\n            <div class=\"col-form-label col col-lg-3\">\r\n              <strong>{{ 'AbpAuditLogging::ExtraProperties' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class=\"col-form-label col col-lg-9\">\r\n              <pre lang=\"json\" class=\"p-2\">\r\n                {{ selected.extraProperties | json }}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem>\r\n        <a ngbNavLink\r\n          >{{ 'AbpAuditLogging::Actions' | abpLocalization }} ({{ selected.actions.length }})</a\r\n        >\r\n        <ng-template ngbNavContent>\r\n          <div\r\n            class=\"mb-3 border border-dark rounded\"\r\n            *ngFor=\"let action of selected.actions; let i = index\"\r\n          >\r\n            <button\r\n              class=\"btn btn-primary btn-block\"\r\n              type=\"button\"\r\n              (click)=\"collapseActionStates[i] = !collapseActionStates[i]\"\r\n            >\r\n              {{ action.serviceName }}\r\n            </button>\r\n            <div [@collapse]=\"collapseActionStates[i] ? 'expanded' : 'collapsed'\">\r\n              <div class=\"m-3\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-form-label col col-lg-3\">\r\n                    <strong>{{ 'AbpAuditLogging::Duration' | abpLocalization }}</strong>\r\n                  </div>\r\n                  <div class=\"col-form-label col col-lg-9\">\r\n                    {{ action.executionDuration ? action.executionDuration + ' ms' : '' }}\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <div class=\"row\">\r\n                  <div class=\"col-form-label col col-lg-3\">\r\n                    <strong>{{ 'AbpAuditLogging::Parameters' | abpLocalization }}</strong>\r\n                  </div>\r\n                  <div class=\"col-form-label col col-lg-9\">\r\n                    <pre lang=\"json\" class=\"p-2\">{{ action.parameters }}</pre>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n    </ul>\r\n    <div [ngbNavOutlet]=\"nav\"></div>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button class=\"btn btn-secondary\" #abpClose>\r\n      {{ 'AbpAuditLogging::Close' | abpLocalization }}\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n",
                animations: [collapse, trigger('fadeIn', [transition('* <=> *', useAnimation(fadeIn))])],
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0,
                    },
                ]
            },] }
];
AuditLogsComponent.ctorParameters = () => [
    { type: ListService },
    { type: AuditLogsService },
    { type: Store }
];
__decorate([
    Select(AuditLoggingState.get)
], AuditLogsComponent.prototype, "datas$", void 0);
__decorate([
    Select(AuditLoggingState.getTotalCount)
], AuditLogsComponent.prototype, "totalCount$", void 0);

const ɵ0$1 = data => {
    const component = data.getInjected(AuditLogsComponent);
    component.openModal(data.record.id);
};
const DEFAULT_AUDIT_LOGS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpAuditLogging::Detail',
        action: ɵ0$1,
        icon: 'fa fa-search',
    },
]);

const ɵ0$2 = data => {
    const component = data.getInjected(AuditLogsComponent);
    const { httpMethod, httpStatusCode, url } = data.record;
    const methodClass = component.httpMethodClass(httpMethod);
    const statusClass = component.httpCodeClass(httpStatusCode);
    return of(`<span class="badge ${statusClass} mr-1">${httpStatusCode}</span>` +
        `<span class="badge ${methodClass} mr-1">${httpMethod}</span>` +
        (url || ''));
};
const DEFAULT_AUDIT_LOGS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'url',
        displayName: 'AbpAuditLogging::HttpRequest',
        sortable: true,
        columnWidth: 600,
        valueResolver: ɵ0$2,
    },
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpAuditLogging::User',
        sortable: true,
        columnWidth: 150,
    },
    {
        type: "string" /* String */,
        name: 'clientIpAddress',
        displayName: 'AbpAuditLogging::IpAddress',
        sortable: true,
        columnWidth: 150,
    },
    {
        type: "dateTime" /* DateTime */,
        name: 'executionTime',
        displayName: 'AbpAuditLogging::Time',
        sortable: true,
        columnWidth: 150,
    },
    {
        type: "number" /* Number */,
        name: 'executionDuration',
        displayName: 'AbpAuditLogging::Duration',
        sortable: true,
        columnWidth: 150,
    },
    {
        type: "string" /* String */,
        name: 'applicationName',
        displayName: 'AbpAuditLogging::ApplicationName',
        sortable: true,
        columnWidth: 200,
    },
]);

const DEFAULT_AUDIT_LOGS_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);

const SHOW_ENTITY_DETAILS = new InjectionToken('SHOW_ENTITY_DETAILS');

const ɵ0$3 = data => {
    const showDetails = data.getInjected(SHOW_ENTITY_DETAILS);
    showDetails(data.record.id);
}, ɵ1 = data => {
    const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
    showHistory(data.record.entityId, data.record.entityTypeFullName);
};
const DEFAULT_ENTITY_CHANGES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpAuditLogging::ChangeDetails',
        action: ɵ0$3,
        icon: 'fa fa-search',
    },
    {
        text: 'AbpAuditLogging::FullChangeHistory',
        action: ɵ1,
        icon: 'fa fa-history',
    },
]);

const DEFAULT_AUDIT_LOGGING_ENTITY_ACTIONS = {
    ["AuditLogging.AuditLogsComponent" /* AuditLogs */]: DEFAULT_AUDIT_LOGS_ENTITY_ACTIONS,
    ["AuditLogging.EntityChangesComponent" /* EntityChanges */]: DEFAULT_ENTITY_CHANGES_ENTITY_ACTIONS,
};
const DEFAULT_AUDIT_LOGGING_TOOLBAR_ACTIONS = {
    ["AuditLogging.AuditLogsComponent" /* AuditLogs */]: DEFAULT_AUDIT_LOGS_TOOLBAR_ACTIONS,
};
const DEFAULT_AUDIT_LOGGING_ENTITY_PROPS = {
    ["AuditLogging.AuditLogsComponent" /* AuditLogs */]: DEFAULT_AUDIT_LOGS_ENTITY_PROPS,
};
const AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS');
const AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS');
const AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS');

class AuditLoggingExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'AuditLogging').pipe(map(entities => ({
            ["AuditLogging.AuditLogsComponent" /* AuditLogs */]: entities.AuditLog,
        })), mapEntitiesToContributors(configState, 'AuditLogging'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_AUDIT_LOGGING_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_AUDIT_LOGGING_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_AUDIT_LOGGING_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
        }), mapTo(true));
    }
}
AuditLoggingExtensionsGuard.decorators = [
    { type: Injectable }
];
AuditLoggingExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];

const ɵ0$4 = {
    requiredPolicy: 'AuditLogging.AuditLogs',
    replaceableComponent: {
        key: "AuditLogging.AuditLogsComponent" /* AuditLogs */,
        defaultComponent: AuditLogsComponent,
    },
};
const routes = [
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, AuditLoggingExtensionsGuard],
        children: [
            {
                path: '',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0$4,
            },
        ],
    },
];
class AuditLoggingRoutingModule {
}
AuditLoggingRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

var EntityChangeType;
(function (EntityChangeType) {
    EntityChangeType[EntityChangeType["Created"] = 0] = "Created";
    EntityChangeType[EntityChangeType["Updated"] = 1] = "Updated";
    EntityChangeType[EntityChangeType["Deleted"] = 2] = "Deleted";
})(EntityChangeType || (EntityChangeType = {}));
const entityChangeTypeOptions = mapEnumToOptions(EntityChangeType);

const ɵ0$5 = "AuditLogging.EntityChangesComponent" /* EntityChanges */;
class EntityChangesComponent {
    constructor(list, fb, auditLogsService, track) {
        this.list = list;
        this.fb = fb;
        this.auditLogsService = auditLogsService;
        this.track = track;
        this.form = this.fb.group({
            entityChangeType: [''],
            entityTypeFullName: [''],
            startDate: [''],
            endDate: [''],
        });
        this.response = { items: [], totalCount: 0 };
        this.changeType = EntityChangeType;
        this.changeTypes = mapEnumToOptions(EntityChangeType);
    }
    get data() {
        return this.response.items;
    }
    get count() {
        return this.response.totalCount;
    }
    ngAfterViewInit() {
        this.hookToQuery();
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.auditLogsService.getEntityChanges(Object.assign(Object.assign({}, this.form.value), query)))
            .subscribe(res => (this.response = res));
    }
    handleSubmit() {
        this.list.get();
    }
}
EntityChangesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-entity-changes',
                template: "<div class=\"card\">\r\n  <div class=\"card-body pb-lg-3\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"handleSubmit()\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6 col-xl-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"start-date\">{{\r\n              'AbpAuditLogging::EntityChangeStartTime' | abpLocalization\r\n            }}</label\r\n            ><input\r\n              ngbDatepicker\r\n              #pickerStart=\"ngbDatepicker\"\r\n              id=\"start-date\"\r\n              class=\"form-control\"\r\n              formControlName=\"startDate\"\r\n              readonly\r\n              (click)=\"pickerStart.toggle()\"\r\n              (keyup.space)=\"pickerStart.open()\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-6 col-xl-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"end-date\">{{\r\n              'AbpAuditLogging::EntityChangeEndTime' | abpLocalization\r\n            }}</label\r\n            ><input\r\n              ngbDatepicker\r\n              #pickerEnd=\"ngbDatepicker\"\r\n              id=\"end-date\"\r\n              class=\"form-control\"\r\n              formControlName=\"endDate\"\r\n              readonly\r\n              (click)=\"pickerEnd.toggle()\"\r\n              (keyup.space)=\"pickerEnd.open()\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-6 col-xl-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"change-type\">{{ 'AbpAuditLogging::ChangeType' | abpLocalization }}</label\r\n            ><select\r\n              id=\"change-type\"\r\n              class=\"custom-select form-control\"\r\n              formControlName=\"entityChangeType\"\r\n              (change)=\"handleSubmit()\"\r\n            >\r\n              <option [ngValue]=\"\"></option>\r\n              <option\r\n                *ngFor=\"let type of changeTypes; trackBy: track.by('id')\"\r\n                [ngValue]=\"type.value\"\r\n                >{{ 'AbpAuditLogging::' + type.key | abpLocalization }}</option\r\n              >\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-6 col-xl-3\">\r\n          <div class=\"form-group\">\r\n            <label for=\"entity-type-full-name\">{{\r\n              'AbpAuditLogging::EntityTypeFullName' | abpLocalization\r\n            }}</label\r\n            ><input\r\n              id=\"entity-type-full-name\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              formControlName=\"entityTypeFullName\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <button type=\"submit\" class=\"btn btn-primary btn-block mt-0 mt-md-4\">\r\n            <span>\r\n              {{ 'AbpAuditLogging::Refresh' | abpLocalization }}\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n<div class=\"card\">\r\n  <div class=\"card-body p-0\">\r\n    <ngx-datatable default [rows]=\"data\" [count]=\"count\" [list]=\"list\">\r\n      <ngx-datatable-column\r\n        [name]=\"'AbpAuditLogging::Detail' | abpLocalization\"\r\n        [maxWidth]=\"150\"\r\n        [width]=\"150\"\r\n        [sortable]=\"false\"\r\n      >\r\n        <ng-template let-row=\"row\" let-i=\"rowIndex\" ngx-datatable-cell-template>\r\n          <abp-grid-actions\r\n            [index]=\"i\"\r\n            [record]=\"row\"\r\n            text=\"AbpAuditLogging::Actions\"\r\n          ></abp-grid-actions>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]=\"'AbpAuditLogging::Time' | abpLocalization\"\r\n        [width]=\"230\"\r\n        prop=\"changeTime\"\r\n      >\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]=\"'AbpAuditLogging::ChangeType' | abpLocalization\"\r\n        [width]=\"140\"\r\n        [sortable]=\"false\"\r\n      >\r\n        <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          {{ 'AbpAuditLogging::' + changeType[row.changeType] | abpLocalization }}\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column name=\"TenantId\" [width]=\"150\" [sortable]=\"false\">\r\n        <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <div abpEllipsis>{{ row.tenantId }}</div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]=\"'AbpAuditLogging::EntityTypeFullName' | abpLocalization\"\r\n        [width]=\"150\"\r\n        [sortable]=\"false\"\r\n      >\r\n        <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <div abpEllipsis>{{ row.entityTypeFullName }}</div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$5,
                    },
                    { provide: NgbDateAdapter, useClass: DateAdapter },
                ]
            },] }
];
EntityChangesComponent.ctorParameters = () => [
    { type: ListService },
    { type: FormBuilder },
    { type: AuditLogsService },
    { type: TrackByService }
];

class AverageExecutionDurationWidgetComponent {
    constructor(store, localizationService, subscription, permissionService) {
        this.store = store;
        this.localizationService = localizationService;
        this.subscription = subscription;
        this.permissionService = permissionService;
        this.initialized = new BehaviorSubject(this);
        this.width = 273;
        this.height = 136;
        this.chartData = {};
        this.draw = (filter) => {
            if (!this.permissionService.getGrantedPolicy('AuditLogging.AuditLogs')) {
                return;
            }
            this.store.dispatch(new GetAverageExecutionDurationPerDay({
                startDate: filter.startDate,
                endDate: filter.endDate,
            }));
        };
        this.listenToData();
    }
    initialize(chartComponent) {
        this.chart = chartComponent;
    }
    listenToData() {
        this.subscription.addOne(this.data$, data => {
            if (!data || JSON.stringify(data) === '{}') {
                this.chartData = {};
                return;
            }
            const dataKeys = Object.keys(data);
            setTimeout(() => {
                this.chartData = {
                    labels: dataKeys,
                    datasets: [
                        {
                            label: this.localizationService.instant('AbpAuditLogging::AverageExecutionDurationInMilliseconds'),
                            backgroundColor: '#fa6e6e',
                            data: dataKeys.map(key => data[key]),
                        },
                    ],
                };
                this.chart.refresh();
            }, 0);
        });
    }
}
AverageExecutionDurationWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-average-execution-duration-widget',
                template: `
    <div [abpPermission]="'AuditLogging.AuditLogs'" class="abp-widget-wrapper">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">
            {{ 'AbpAuditLogging::AverageExecutionDurationInLogsPerDay' | abpLocalization }}
          </h5>
        </div>
        <div class="card-body">
          <div class="row">
            <abp-chart
              #chart
              (initialized)="initialize($event)"
              class="w-100"
              type="bar"
              [data]="chartData"
              [width]="width"
              [height]="height"
            ></abp-chart>
          </div>
        </div>
      </div>
    </div>
  `,
                providers: [SubscriptionService]
            },] }
];
AverageExecutionDurationWidgetComponent.ctorParameters = () => [
    { type: Store },
    { type: LocalizationService },
    { type: SubscriptionService },
    { type: PermissionService }
];
AverageExecutionDurationWidgetComponent.propDecorators = {
    initialized: [{ type: Output }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
__decorate([
    Select(AuditLoggingState.getAverageExecutionStatistics)
], AverageExecutionDurationWidgetComponent.prototype, "data$", void 0);

class ErrorRateWidgetComponent {
    constructor(store, subscription, permissionService) {
        this.store = store;
        this.subscription = subscription;
        this.permissionService = permissionService;
        this.initialized = new BehaviorSubject(this);
        this.width = 273;
        this.height = 136;
        this.chartData = {};
        this.draw = (filter) => {
            if (!this.permissionService.getGrantedPolicy('AuditLogging.AuditLogs')) {
                return;
            }
            this.store.dispatch(new GetErrorRate({
                startDate: filter.startDate,
                endDate: filter.endDate,
            }));
        };
        this.listenToData();
    }
    initialize(chartComponent) {
        this.chart = chartComponent;
    }
    listenToData() {
        this.subscription.addOne(this.data$, data => {
            if (!data || JSON.stringify(data) === '{}') {
                this.chartData = {};
                return;
            }
            const dataKeys = Object.keys(data);
            setTimeout(() => {
                this.chartData = {
                    labels: dataKeys,
                    datasets: [
                        {
                            data: dataKeys.map(key => data[key]),
                            backgroundColor: ['#d76e6e', '#63ac44'],
                        },
                    ],
                };
                this.chart.refresh();
            }, 0);
        });
    }
}
ErrorRateWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-error-rate-widget',
                template: `
    <div [abpPermission]="'AuditLogging.AuditLogs'" class="abp-widget-wrapper">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">{{ 'AbpAuditLogging::ErrorRateInLogs' | abpLocalization }}</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <abp-chart
              #chart
              (initialized)="initialize($event)"
              class="w-100"
              type="pie"
              [data]="chartData"
              [width]="width"
              [height]="height"
            ></abp-chart>
          </div>
        </div>
      </div>
    </div>
  `,
                providers: [SubscriptionService]
            },] }
];
ErrorRateWidgetComponent.ctorParameters = () => [
    { type: Store },
    { type: SubscriptionService },
    { type: PermissionService }
];
ErrorRateWidgetComponent.propDecorators = {
    initialized: [{ type: Output }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
__decorate([
    Select(AuditLoggingState.getErrorRateStatistics)
], ErrorRateWidgetComponent.prototype, "data$", void 0);

class AuditLoggingModule {
    static forChild(options = {}) {
        return {
            ngModule: AuditLoggingModule,
            providers: [
                {
                    provide: AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                AuditLoggingExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(AuditLoggingModule.forChild(options));
    }
}
AuditLoggingModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AuditLogsComponent,
                    EntityChangesComponent,
                    ErrorRateWidgetComponent,
                    AverageExecutionDurationWidgetComponent,
                ],
                exports: [
                    AuditLogsComponent,
                    EntityChangesComponent,
                    ErrorRateWidgetComponent,
                    AverageExecutionDurationWidgetComponent,
                ],
                imports: [
                    AuditLoggingRoutingModule,
                    NgxsModule.forFeature([AuditLoggingState]),
                    CoreModule,
                    CommercialUiModule,
                    ThemeSharedModule,
                    NgbNavModule,
                    NgbDatepickerModule,
                ],
                entryComponents: [EntityChangesComponent],
            },] }
];

var eEntityChangeType;
(function (eEntityChangeType) {
    eEntityChangeType[eEntityChangeType["Created"] = 0] = "Created";
    eEntityChangeType[eEntityChangeType["Updated"] = 1] = "Updated";
    eEntityChangeType[eEntityChangeType["Deleted"] = 2] = "Deleted";
})(eEntityChangeType || (eEntityChangeType = {}));

class AuditLoggingStateService {
    constructor(store) {
        this.store = store;
    }
    get() {
        return this.store.selectSnapshot(AuditLoggingState.get);
    }
    getTotalCount() {
        return this.store.selectSnapshot(AuditLoggingState.getTotalCount);
    }
    getAverageExecutionStatistics() {
        return this.store.selectSnapshot(AuditLoggingState.getAverageExecutionStatistics);
    }
    getErrorRateStatistics() {
        return this.store.selectSnapshot(AuditLoggingState.getErrorRateStatistics);
    }
    dispatchGetAuditLogs(...args) {
        return this.store.dispatch(new GetAuditLogs(...args));
    }
    dispatchGetAverageExecutionDurationPerDay(...args) {
        return this.store.dispatch(new GetAverageExecutionDurationPerDay(...args));
    }
    dispatchGetErrorRate(...args) {
        return this.store.dispatch(new GetErrorRate(...args));
    }
}
AuditLoggingStateService.ɵprov = ɵɵdefineInjectable({ factory: function AuditLoggingStateService_Factory() { return new AuditLoggingStateService(ɵɵinject(Store)); }, token: AuditLoggingStateService, providedIn: "root" });
AuditLoggingStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuditLoggingStateService.ctorParameters = () => [
    { type: Store }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS, AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS, AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS, AuditLoggingExtensionsGuard, AuditLoggingModule, AuditLoggingState, AuditLoggingStateService, AuditLogsComponent, AuditLogsService, AverageExecutionDurationWidgetComponent, DEFAULT_AUDIT_LOGGING_ENTITY_ACTIONS, DEFAULT_AUDIT_LOGGING_ENTITY_PROPS, DEFAULT_AUDIT_LOGGING_TOOLBAR_ACTIONS, EntityChangeType, EntityChangesComponent, ErrorRateWidgetComponent, GetAuditLogs, GetAverageExecutionDurationPerDay, GetErrorRate, HTTP_METHODS, HTTP_STATUS_CODES, SHOW_ENTITY_DETAILS, eEntityChangeType, entityChangeTypeOptions, ɵ0, AuditLogsComponent as ɵa, AuditLoggingState as ɵc, AuditLogsService as ɵd, GetAuditLogs as ɵe, GetAverageExecutionDurationPerDay as ɵf, GetErrorRate as ɵg, EntityChangesComponent as ɵk, ErrorRateWidgetComponent as ɵl, AverageExecutionDurationWidgetComponent as ɵm, AuditLoggingRoutingModule as ɵn, AuditLoggingExtensionsGuard as ɵo, AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS as ɵp, AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS as ɵq, AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS as ɵr };
//# sourceMappingURL=volo-abp.ng.audit-logging.js.map
