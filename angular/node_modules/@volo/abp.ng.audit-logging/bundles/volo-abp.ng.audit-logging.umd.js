!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngxs/store"),require("@volo/abp.commercial.ng.ui"),require("@angular/router"),require("@abp/ng.theme.shared/extensions"),require("@angular/animations"),require("rxjs/operators"),require("rxjs"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@volo/abp.ng.audit-logging",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngxs/store","@volo/abp.commercial.ng.ui","@angular/router","@abp/ng.theme.shared/extensions","@angular/animations","rxjs/operators","rxjs","@angular/forms"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).volo=e.volo||{},e.volo.abp=e.volo.abp||{},e.volo.abp.ng=e.volo.abp.ng||{},e.volo.abp.ng["audit-logging"]={}),e.i1,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.i1$1,e.abp_commercial_ng_ui,e.ng.router,e.extensions,e.ng.animations,e.rxjs.operators,e.rxjs,e.ng.forms)}(this,(function(e,t,n,r,o,a,i,s,l,c,d,g,p){"use strict";var u=function(e){this.payload=e};u.type="[AuditLogging] Get";var m=function(e){this.payload=e};m.type="[AuditLogging] Get Average Execution Duration Per Day";var b=function(e){this.payload=e};b.type="[AuditLogging] Get Error Rate";function v(e,t,n,r){var o,a=arguments.length,i=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(i=(a<3?o(i):a>3?o(t,n,i):o(t,n))||i);return a>3&&i&&Object.defineProperty(t,n,i),i}Object.create;function h(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e}Object.create;var f=["GET","POST","DELETE","PUT","HEAD","CONNECT","OPTIONS","TRACE"],A=[{code:100,message:"Continue"},{code:101,message:"Switching Protocols"},{code:102,message:"Processing"},{code:103,message:"Early Hints"},{code:200,message:"OK"},{code:201,message:"Created"},{code:202,message:"Accepted"},{code:203,message:"Non-authoritative Information"},{code:204,message:"No Content"},{code:205,message:"Reset Content"},{code:206,message:"Partial Content"},{code:207,message:"Multi-Status"},{code:208,message:"Already Registered"},{code:226,message:"IM Used"},{code:300,message:"Multiple Choices"},{code:301,message:"Moved Permanently"},{code:302,message:"Found"},{code:303,message:"See Other"},{code:304,message:"Not Modified"},{code:305,message:"Use Proxy"},{code:306,message:"Switch Proxy"},{code:307,message:"Temporary Redirect"},{code:308,message:"Permanent Redirect"},{code:400,message:"Bad Request"},{code:401,message:"Unauthorized"},{code:402,message:"Payment Required"},{code:403,message:"Forbidden"},{code:404,message:"Not Found"},{code:405,message:"Method Not Allowed"},{code:406,message:"Not Acceptable"},{code:407,message:"Proxy Authentication Required"},{code:408,message:"Request Timeout"},{code:409,message:"Conflict"},{code:410,message:"Gone"},{code:411,message:"Length Required"},{code:412,message:"Precondition Failed"},{code:413,message:"Payload Too Large"},{code:414,message:"Request-URI Too Long"},{code:415,message:"Unsupported Media Type"},{code:416,message:"Requested Range Not Satisfiable"},{code:417,message:"Expectation Failed"},{code:421,message:"Misdirected Request"},{code:423,message:"Locked"},{code:424,message:"Failed Dependency"},{code:426,message:"Upgrade Required"},{code:428,message:"Precondition Required"},{code:429,message:"Too Many Requests"},{code:431,message:"Request Header Fields Too Large"},{code:451,message:"Unavailable For Legal Reasons"},{code:500,message:"Internal Server Error"},{code:501,message:"Not Implemented"},{code:502,message:"Bad Gateway"},{code:503,message:"Service Unavailable"},{code:504,message:"Gateway Timeout"},{code:505,message:"HTTP Version Not Supported"},{code:506,message:"Variant Also Negotiates"},{code:507,message:"Insufficient Storage"},{code:508,message:"Loop Detected"},{code:510,message:"Not Extended"},{code:511,message:"Network Authentication Required"}],L=function(e){var t=this;this.restService=e,this.apiName="AbpAuditLogging",this.get=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/"+e},{apiName:t.apiName})},this.getAverageExecutionDurationPerDay=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/statistics/average-execution-duration-per-day",params:{startDate:e.startDate,endDate:e.endDate}},{apiName:t.apiName})},this.getEntityChange=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/entity-changes/"+e},{apiName:t.apiName})},this.getEntityChangeWithUsername=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/entity-change-with-username/"+e},{apiName:t.apiName})},this.getEntityChanges=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/entity-changes",params:{auditLogId:e.auditLogId,entityChangeType:e.entityChangeType,entityId:e.entityId,entityTypeFullName:e.entityTypeFullName,startDate:e.startDate,endDate:e.endDate,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getEntityChangesWithUsername=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/entity-changes-with-username",params:{entityId:e.entityId,entityTypeFullName:e.entityTypeFullName}},{apiName:t.apiName})},this.getErrorRate=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs/statistics/error-rate",params:{startDate:e.startDate,endDate:e.endDate}},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/audit-logging/audit-logs",params:{url:e.url,userName:e.userName,applicationName:e.applicationName,correlationId:e.correlationId,httpMethod:e.httpMethod,httpStatusCode:e.httpStatusCode,maxExecutionDuration:e.maxExecutionDuration,minExecutionDuration:e.minExecutionDuration,hasException:e.hasException,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})}};L.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new L(r.ɵɵinject(t.RestService))},token:L,providedIn:"root"}),L.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],L.ctorParameters=function(){return[{type:t.RestService}]},e.ɵc=function(){function e(e){this.service=e}return e.get=function(e){return e.result.items||[]},e.getTotalCount=function(e){return e.result.totalCount||0},e.getAverageExecutionStatistics=function(e){return e.averageExecutionStatistics},e.getErrorRateStatistics=function(e){return e.errorRateStatistics},e.prototype.get=function(e,t){var n=e.patchState,r=t.payload;return this.service.getList(r).pipe(d.tap((function(e){return n({result:e})})))},e.prototype.getAverageExecutionData=function(e,t){var n=e.patchState,r=t.payload;return this.service.getAverageExecutionDurationPerDay(r).pipe(d.tap((function(e){n({averageExecutionStatistics:e.data})})))},e.prototype.getErrorRate=function(e,t){var n=e.patchState,r=t.payload;return this.service.getErrorRate(r).pipe(d.tap((function(e){n({errorRateStatistics:e.data})})))},e}(),e.ɵc.decorators=[{type:r.Injectable}],e.ɵc.ctorParameters=function(){return[{type:L}]},v([a.Action(u)],e.ɵc.prototype,"get",null),v([a.Action(m)],e.ɵc.prototype,"getAverageExecutionData",null),v([a.Action(b)],e.ɵc.prototype,"getErrorRate",null),v([a.Selector()],e.ɵc,"get",null),v([a.Selector()],e.ɵc,"getTotalCount",null),v([a.Selector()],e.ɵc,"getAverageExecutionStatistics",null),v([a.Selector()],e.ɵc,"getErrorRateStatistics",null),e.ɵc=v([a.State({name:"AuditLoggingState",defaults:{result:{},averageExecutionStatistics:{},errorRateStatistics:{}}})],e.ɵc);var T="AuditLogging.AuditLogsComponent",S=function(){function e(e,t,n){this.list=e,this.service=t,this.store=n,this.selected={},this.pageQuery={maxResultCount:10,skipCount:0},this.httpMethods=f,this.httpStatusCodes=A,this.modalVisible=!1,this.collapseActionStates=[!0],this.collapseChangeStates=[!0],this.sortOrder="",this.sortKey="",this.selectedTab="audit-logs"}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new u(Object.assign(Object.assign(Object.assign(Object.assign({},e.pageQuery),null===e.pageQuery.minExecutionDuration&&{minExecutionDuration:void 0}),null===e.pageQuery.maxExecutionDuration&&{maxExecutionDuration:void 0}),t)))})).subscribe()},e.prototype.openModal=function(e){var t=this;this.service.get(e).pipe(d.take(1)).subscribe((function(e){t.selected=e,t.modalVisible=!0}))},e.prototype.httpCodeClass=function(e){switch(e.toString()[0]){case"2":return"badge-success";case"3":return"badge-warning";case"4":case"5":return"badge-danger";default:return"badge-light"}},e.prototype.httpMethodClass=function(e){switch(e){case"GET":return"badge-dark";case"POST":return"badge-success";case"DELETE":return"badge-danger";case"PUT":return"badge-warning";default:return""}},e}();S.decorators=[{type:r.Component,args:[{selector:"abp-audit-logs",template:'<ng-container *ngIf="datas$ | async as data">\r\n  <div id="wrapper">\r\n    <div class="row entry-row">\r\n      <div class="col-auto">\r\n        <h1 class="content-header-title">{{ \'AbpAuditLogging::AuditLogs\' | abpLocalization }}</h1>\r\n      </div>\r\n      <div class="col-lg-auto pl-lg-0">\r\n        <abp-breadcrumb></abp-breadcrumb>\r\n      </div>\r\n      <div class="col">\r\n        <abp-page-toolbar [record]="data"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n    <ul class="nav nav-tabs">\r\n      <li class="nav-item">\r\n        <a\r\n          class="nav-link pointer"\r\n          [class.active]="selectedTab === \'audit-logs\'"\r\n          (click)="selectedTab = \'audit-logs\'"\r\n          >{{ \'AbpAuditLogging::AuditLogs\' | abpLocalization }}</a\r\n        >\r\n      </li>\r\n      <li class="nav-item">\r\n        <a\r\n          class="nav-link pointer"\r\n          [class.active]="selectedTab === \'entity-changes\'"\r\n          (click)="selectedTab = \'entity-changes\'"\r\n          >{{ \'AbpAuditLogging::EntityChanges\' | abpLocalization }}</a\r\n        >\r\n      </li>\r\n    </ul>\r\n    <div class="tab-content" [class.p-0]="selectedTab !== \'audit-logs\'">\r\n      <div class="tab-pane" [class.active]="selectedTab === \'audit-logs\'" [@fadeIn]="selectedTab">\r\n        <div class="card">\r\n          <div class="card-body pb-lg-3">\r\n            <form (keyup.enter)="list.get()">\r\n              <div class="row">\r\n                <div class="col-md-6 col-lg-2">\r\n                  <div class="form-group">\r\n                    <label for="userName">{{ \'AbpAuditLogging::UserName\' | abpLocalization }}</label\r\n                    ><input\r\n                      id="userName"\r\n                      type="text"\r\n                      class="form-control"\r\n                      [(ngModel)]="pageQuery.userName"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-2">\r\n                  <div class="form-group">\r\n                    <label for="url">{{ \'AbpAuditLogging::UrlFilter\' | abpLocalization }}</label\r\n                    ><input\r\n                      id="url"\r\n                      type="text"\r\n                      class="form-control"\r\n                      [(ngModel)]="pageQuery.url"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-2">\r\n                  <div class="form-group">\r\n                    <label for="minDuration">{{\r\n                      \'AbpAuditLogging::MinDuration\' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id="minDuration"\r\n                      type="number"\r\n                      class="form-control"\r\n                      [(ngModel)]="pageQuery.minExecutionDuration"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-2">\r\n                  <div class="form-group">\r\n                    <label for="maxDuration">{{\r\n                      \'AbpAuditLogging::MaxDuration\' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id="maxDuration"\r\n                      type="number"\r\n                      class="form-control"\r\n                      [(ngModel)]="pageQuery.maxExecutionDuration"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-2">\r\n                  <div class="form-group">\r\n                    <label for="httpMethod">{{\r\n                      \'AbpAuditLogging::HttpMethod\' | abpLocalization\r\n                    }}</label\r\n                    ><select\r\n                      id="httpMethod"\r\n                      class="custom-select form-control"\r\n                      [(ngModel)]="pageQuery.httpMethod"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                      (change)="list.get()"\r\n                    >\r\n                      <option [ngValue]=""></option>\r\n                      <option *ngFor="let method of httpMethods" [ngValue]="method">\r\n                        {{ method }}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-2">\r\n                  <div class="form-group">\r\n                    <label for="httpStatusCode">{{\r\n                      \'AbpAuditLogging::HttpStatusCode\' | abpLocalization\r\n                    }}</label\r\n                    ><select\r\n                      id="httpStatusCode"\r\n                      class="custom-select form-control"\r\n                      [(ngModel)]="pageQuery.httpStatusCode"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                      (change)="list.get()"\r\n                    >\r\n                      <option [ngValue]=""></option>\r\n                      <option *ngFor="let h of httpStatusCodes" [ngValue]="h.code">\r\n                        {{ h.code }} - {{ h.message }}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class="row">\r\n                <div class="col-md-6 col-lg-3">\r\n                  <div class="form-group mb-lg-0">\r\n                    <label for="applicationName">{{\r\n                      \'AbpAuditLogging::ApplicationName\' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id="applicationName"\r\n                      type="text"\r\n                      class="form-control"\r\n                      [(ngModel)]="pageQuery.applicationName"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-3">\r\n                  <div class="form-group mb-lg-0">\r\n                    <label for="correlationId">{{\r\n                      \'AbpAuditLogging::CorrelationId\' | abpLocalization\r\n                    }}</label\r\n                    ><input\r\n                      id="correlationId"\r\n                      type="text"\r\n                      class="form-control"\r\n                      [(ngModel)]="pageQuery.correlationId"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-3">\r\n                  <div class="form-group mb-lg-0">\r\n                    <label for="hasException">{{\r\n                      \'AbpAuditLogging::HasException\' | abpLocalization\r\n                    }}</label>\r\n                    <select\r\n                      name="hasException"\r\n                      id="hasException"\r\n                      class="custom-select form-control"\r\n                      [(ngModel)]="pageQuery.hasException"\r\n                      [ngModelOptions]="{ standalone: true }"\r\n                      (change)="list.get()"\r\n                    >\r\n                      <option [ngValue]=""></option>\r\n                      <option [ngValue]="true">\r\n                        {{ \'AbpAuditLogging::Yes\' | abpLocalization }}\r\n                      </option>\r\n                      <option [ngValue]="false">\r\n                        {{ \'AbpAuditLogging::No\' | abpLocalization }}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class="col-md-6 col-lg-3">\r\n                  <button\r\n                    type="button"\r\n                    class="btn btn-primary btn-block mt-0 mt-md-4"\r\n                    (click)="list.get()"\r\n                  >\r\n                    <span>\r\n                      {{ \'AbpAuditLogging::Refresh\' | abpLocalization }}\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div class="card">\r\n          <div class="card-body p-0">\r\n            <abp-extensible-table\r\n              [data]="data"\r\n              [recordsTotal]="totalCount$ | async"\r\n              [list]="list"\r\n            ></abp-extensible-table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class="tab-content" [class.p-0]="selectedTab !== \'entity-changes\'">\r\n      <div\r\n        class="tab-pane"\r\n        [class.active]="selectedTab === \'entity-changes\'"\r\n        [@fadeIn]="selectedTab"\r\n      >\r\n        <abp-entity-changes *ngIf="selectedTab === \'entity-changes\'"></abp-entity-changes>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<abp-modal *ngIf="selected" [(visible)]="modalVisible">\r\n  <ng-template #abpHeader>\r\n    <h5 class="modal-title">\r\n      {{ \'AbpAuditLogging::Detail\' | abpLocalization }}\r\n    </h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <ul ngbNav #nav="ngbNav" class="nav-tabs">\r\n      <li ngbNavItem>\r\n        <a ngbNavLink>{{ \'AbpAuditLogging::Overall\' | abpLocalization }}</a>\r\n        <ng-template ngbNavContent>\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::HttpStatusCode\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">\r\n              <span class="badge" [ngClass]="httpCodeClass(selected.httpStatusCode)">{{\r\n                selected.httpStatusCode\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::HttpMethod\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">\r\n              <span class="badge" [ngClass]="httpMethodClass(selected.httpMethod)">{{\r\n                selected.httpMethod\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::Url\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.url }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::ClientIpAddress\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.clientIpAddress }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::ClientName\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.clientName }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::Exceptions\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">\r\n              <pre lang="c-sharp">\r\n                {{ selected.exceptions }}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::UserName\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.userName }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::Time\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.executionTime }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::Duration\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.executionDuration }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::BrowserInfo\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.browserInfo }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::ApplicationName\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.applicationName }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::CorrelationId\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.correlationId }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::Comments\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">{{ selected.comments }}</div>\r\n          </div>\r\n          <hr />\r\n          <div class="row">\r\n            <div class="col-form-label col col-lg-3">\r\n              <strong>{{ \'AbpAuditLogging::ExtraProperties\' | abpLocalization }}</strong>\r\n            </div>\r\n            <div class="col-form-label col col-lg-9">\r\n              <pre lang="json" class="p-2">\r\n                {{ selected.extraProperties | json }}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem>\r\n        <a ngbNavLink\r\n          >{{ \'AbpAuditLogging::Actions\' | abpLocalization }} ({{ selected.actions.length }})</a\r\n        >\r\n        <ng-template ngbNavContent>\r\n          <div\r\n            class="mb-3 border border-dark rounded"\r\n            *ngFor="let action of selected.actions; let i = index"\r\n          >\r\n            <button\r\n              class="btn btn-primary btn-block"\r\n              type="button"\r\n              (click)="collapseActionStates[i] = !collapseActionStates[i]"\r\n            >\r\n              {{ action.serviceName }}\r\n            </button>\r\n            <div [@collapse]="collapseActionStates[i] ? \'expanded\' : \'collapsed\'">\r\n              <div class="m-3">\r\n                <div class="row">\r\n                  <div class="col-form-label col col-lg-3">\r\n                    <strong>{{ \'AbpAuditLogging::Duration\' | abpLocalization }}</strong>\r\n                  </div>\r\n                  <div class="col-form-label col col-lg-9">\r\n                    {{ action.executionDuration ? action.executionDuration + \' ms\' : \'\' }}\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <div class="row">\r\n                  <div class="col-form-label col col-lg-3">\r\n                    <strong>{{ \'AbpAuditLogging::Parameters\' | abpLocalization }}</strong>\r\n                  </div>\r\n                  <div class="col-form-label col col-lg-9">\r\n                    <pre lang="json" class="p-2">{{ action.parameters }}</pre>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n    </ul>\r\n    <div [ngbNavOutlet]="nav"></div>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpAuditLogging::Close\' | abpLocalization }}\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n',animations:[n.collapse,c.trigger("fadeIn",[c.transition("* <=> *",c.useAnimation(n.fadeIn))])],providers:[t.ListService,{provide:l.EXTENSIONS_IDENTIFIER,useValue:T}]}]}],S.ctorParameters=function(){return[{type:t.ListService},{type:L},{type:a.Store}]},v([a.Select(e.ɵc.get)],S.prototype,"datas$",void 0),v([a.Select(e.ɵc.getTotalCount)],S.prototype,"totalCount$",void 0);var C,E,N,x=l.EntityAction.createMany([{text:"AbpAuditLogging::Detail",action:function(e){e.getInjected(S).openModal(e.record.id)},icon:"fa fa-search"}]),D=l.EntityProp.createMany([{type:"string",name:"url",displayName:"AbpAuditLogging::HttpRequest",sortable:!0,columnWidth:600,valueResolver:function(e){var t=e.getInjected(S),n=e.record,r=n.httpMethod,o=n.httpStatusCode,a=n.url,i=t.httpMethodClass(r),s=t.httpCodeClass(o);return g.of('<span class="badge '+s+' mr-1">'+o+'</span><span class="badge '+i+' mr-1">'+r+"</span>"+(a||""))}},{type:"string",name:"userName",displayName:"AbpAuditLogging::User",sortable:!0,columnWidth:150},{type:"string",name:"clientIpAddress",displayName:"AbpAuditLogging::IpAddress",sortable:!0,columnWidth:150},{type:"dateTime",name:"executionTime",displayName:"AbpAuditLogging::Time",sortable:!0,columnWidth:150},{type:"number",name:"executionDuration",displayName:"AbpAuditLogging::Duration",sortable:!0,columnWidth:150},{type:"string",name:"applicationName",displayName:"AbpAuditLogging::ApplicationName",sortable:!0,columnWidth:200}]),I=l.ToolbarAction.createMany([]),w=new r.InjectionToken("SHOW_ENTITY_DETAILS"),O=l.EntityAction.createMany([{text:"AbpAuditLogging::ChangeDetails",action:function(e){e.getInjected(w)(e.record.id)},icon:"fa fa-search"},{text:"AbpAuditLogging::FullChangeHistory",action:function(e){e.getInjected(i.SHOW_ENTITY_HISTORY)(e.record.entityId,e.record.entityTypeFullName)},icon:"fa fa-history"}]),R=((C={})["AuditLogging.AuditLogsComponent"]=x,C["AuditLogging.EntityChangesComponent"]=O,C),M=((E={})["AuditLogging.AuditLogsComponent"]=I,E),z=((N={})["AuditLogging.AuditLogsComponent"]=D,N),P=new r.InjectionToken("AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS"),k=new r.InjectionToken("AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS"),G=new r.InjectionToken("AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS"),_=function(){function e(e){this.injector=e}return e.prototype.canActivate=function(){var e=this.injector.get(l.ExtensionsService),n=this.injector.get(P,null)||{},r=this.injector.get(k,null)||{},o=this.injector.get(G,null)||{},a=this.injector.get(t.ConfigStateService);return l.getObjectExtensionEntitiesFromStore(a,"AuditLogging").pipe(d.map((function(e){var t;return(t={})["AuditLogging.AuditLogsComponent"]=e.AuditLog,t})),l.mapEntitiesToContributors(a,"AuditLogging"),d.tap((function(t){l.mergeWithDefaultActions(e.entityActions,R,n),l.mergeWithDefaultActions(e.toolbarActions,M,r),l.mergeWithDefaultProps(e.entityProps,z,t.prop,o)})),d.mapTo(!0))},e}();_.decorators=[{type:r.Injectable}],_.ctorParameters=function(){return[{type:r.Injector}]};var j,U={requiredPolicy:"AuditLogging.AuditLogs",replaceableComponent:{key:"AuditLogging.AuditLogsComponent",defaultComponent:S}},q=[{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard,_],children:[{path:"",component:t.ReplaceableRouteContainerComponent,data:U}]}],F=function(){};F.decorators=[{type:r.NgModule,args:[{imports:[s.RouterModule.forChild(q)],exports:[s.RouterModule]}]}],(j=e.EntityChangeType||(e.EntityChangeType={}))[j.Created=0]="Created",j[j.Updated=1]="Updated",j[j.Deleted=2]="Deleted";var V=t.mapEnumToOptions(e.EntityChangeType),B=function(){function n(n,r,o,a){this.list=n,this.fb=r,this.auditLogsService=o,this.track=a,this.form=this.fb.group({entityChangeType:[""],entityTypeFullName:[""],startDate:[""],endDate:[""]}),this.response={items:[],totalCount:0},this.changeType=e.EntityChangeType,this.changeTypes=t.mapEnumToOptions(e.EntityChangeType)}return Object.defineProperty(n.prototype,"data",{get:function(){return this.response.items},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"count",{get:function(){return this.response.totalCount},enumerable:!1,configurable:!0}),n.prototype.ngAfterViewInit=function(){this.hookToQuery()},n.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.auditLogsService.getEntityChanges(Object.assign(Object.assign({},e.form.value),t))})).subscribe((function(t){return e.response=t}))},n.prototype.handleSubmit=function(){this.list.get()},n}();B.decorators=[{type:r.Component,args:[{selector:"abp-entity-changes",template:'<div class="card">\r\n  <div class="card-body pb-lg-3">\r\n    <form [formGroup]="form" (ngSubmit)="handleSubmit()">\r\n      <div class="row">\r\n        <div class="col-md-6 col-xl-3">\r\n          <div class="form-group">\r\n            <label for="start-date">{{\r\n              \'AbpAuditLogging::EntityChangeStartTime\' | abpLocalization\r\n            }}</label\r\n            ><input\r\n              ngbDatepicker\r\n              #pickerStart="ngbDatepicker"\r\n              id="start-date"\r\n              class="form-control"\r\n              formControlName="startDate"\r\n              readonly\r\n              (click)="pickerStart.toggle()"\r\n              (keyup.space)="pickerStart.open()"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class="col-md-6 col-xl-3">\r\n          <div class="form-group">\r\n            <label for="end-date">{{\r\n              \'AbpAuditLogging::EntityChangeEndTime\' | abpLocalization\r\n            }}</label\r\n            ><input\r\n              ngbDatepicker\r\n              #pickerEnd="ngbDatepicker"\r\n              id="end-date"\r\n              class="form-control"\r\n              formControlName="endDate"\r\n              readonly\r\n              (click)="pickerEnd.toggle()"\r\n              (keyup.space)="pickerEnd.open()"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class="col-md-6 col-xl-3">\r\n          <div class="form-group">\r\n            <label for="change-type">{{ \'AbpAuditLogging::ChangeType\' | abpLocalization }}</label\r\n            ><select\r\n              id="change-type"\r\n              class="custom-select form-control"\r\n              formControlName="entityChangeType"\r\n              (change)="handleSubmit()"\r\n            >\r\n              <option [ngValue]=""></option>\r\n              <option\r\n                *ngFor="let type of changeTypes; trackBy: track.by(\'id\')"\r\n                [ngValue]="type.value"\r\n                >{{ \'AbpAuditLogging::\' + type.key | abpLocalization }}</option\r\n              >\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class="col-md-6 col-xl-3">\r\n          <div class="form-group">\r\n            <label for="entity-type-full-name">{{\r\n              \'AbpAuditLogging::EntityTypeFullName\' | abpLocalization\r\n            }}</label\r\n            ><input\r\n              id="entity-type-full-name"\r\n              type="text"\r\n              class="form-control"\r\n              formControlName="entityTypeFullName"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class="row">\r\n        <div class="col-12">\r\n          <button type="submit" class="btn btn-primary btn-block mt-0 mt-md-4">\r\n            <span>\r\n              {{ \'AbpAuditLogging::Refresh\' | abpLocalization }}\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n<div class="card">\r\n  <div class="card-body p-0">\r\n    <ngx-datatable default [rows]="data" [count]="count" [list]="list">\r\n      <ngx-datatable-column\r\n        [name]="\'AbpAuditLogging::Detail\' | abpLocalization"\r\n        [maxWidth]="150"\r\n        [width]="150"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>\r\n          <abp-grid-actions\r\n            [index]="i"\r\n            [record]="row"\r\n            text="AbpAuditLogging::Actions"\r\n          ></abp-grid-actions>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpAuditLogging::Time\' | abpLocalization"\r\n        [width]="230"\r\n        prop="changeTime"\r\n      >\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpAuditLogging::ChangeType\' | abpLocalization"\r\n        [width]="140"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          {{ \'AbpAuditLogging::\' + changeType[row.changeType] | abpLocalization }}\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column name="TenantId" [width]="150" [sortable]="false">\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          <div abpEllipsis>{{ row.tenantId }}</div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpAuditLogging::EntityTypeFullName\' | abpLocalization"\r\n        [width]="150"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          <div abpEllipsis>{{ row.entityTypeFullName }}</div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n',changeDetection:r.ChangeDetectionStrategy.OnPush,providers:[t.ListService,{provide:l.EXTENSIONS_IDENTIFIER,useValue:"AuditLogging.EntityChangesComponent"},{provide:o.NgbDateAdapter,useClass:l.DateAdapter}]}]}],B.ctorParameters=function(){return[{type:t.ListService},{type:p.FormBuilder},{type:L},{type:t.TrackByService}]};var H=function(){function e(e,t,n,r){var o=this;this.store=e,this.localizationService=t,this.subscription=n,this.permissionService=r,this.initialized=new g.BehaviorSubject(this),this.width=273,this.height=136,this.chartData={},this.draw=function(e){o.permissionService.getGrantedPolicy("AuditLogging.AuditLogs")&&o.store.dispatch(new m({startDate:e.startDate,endDate:e.endDate}))},this.listenToData()}return e.prototype.initialize=function(e){this.chart=e},e.prototype.listenToData=function(){var e=this;this.subscription.addOne(this.data$,(function(t){if(t&&"{}"!==JSON.stringify(t)){var n=Object.keys(t);setTimeout((function(){e.chartData={labels:n,datasets:[{label:e.localizationService.instant("AbpAuditLogging::AverageExecutionDurationInMilliseconds"),backgroundColor:"#fa6e6e",data:n.map((function(e){return t[e]}))}]},e.chart.refresh()}),0)}else e.chartData={}}))},e}();H.decorators=[{type:r.Component,args:[{selector:"abp-average-execution-duration-widget",template:'\n    <div [abpPermission]="\'AuditLogging.AuditLogs\'" class="abp-widget-wrapper">\n      <div class="card">\n        <div class="card-header">\n          <h5 class="card-title">\n            {{ \'AbpAuditLogging::AverageExecutionDurationInLogsPerDay\' | abpLocalization }}\n          </h5>\n        </div>\n        <div class="card-body">\n          <div class="row">\n            <abp-chart\n              #chart\n              (initialized)="initialize($event)"\n              class="w-100"\n              type="bar"\n              [data]="chartData"\n              [width]="width"\n              [height]="height"\n            ></abp-chart>\n          </div>\n        </div>\n      </div>\n    </div>\n  ',providers:[t.SubscriptionService]}]}],H.ctorParameters=function(){return[{type:a.Store},{type:t.LocalizationService},{type:t.SubscriptionService},{type:t.PermissionService}]},H.propDecorators={initialized:[{type:r.Output}],width:[{type:r.Input}],height:[{type:r.Input}]},v([a.Select(e.ɵc.getAverageExecutionStatistics)],H.prototype,"data$",void 0);var Q=function(){function e(e,t,n){var r=this;this.store=e,this.subscription=t,this.permissionService=n,this.initialized=new g.BehaviorSubject(this),this.width=273,this.height=136,this.chartData={},this.draw=function(e){r.permissionService.getGrantedPolicy("AuditLogging.AuditLogs")&&r.store.dispatch(new b({startDate:e.startDate,endDate:e.endDate}))},this.listenToData()}return e.prototype.initialize=function(e){this.chart=e},e.prototype.listenToData=function(){var e=this;this.subscription.addOne(this.data$,(function(t){if(t&&"{}"!==JSON.stringify(t)){var n=Object.keys(t);setTimeout((function(){e.chartData={labels:n,datasets:[{data:n.map((function(e){return t[e]})),backgroundColor:["#d76e6e","#63ac44"]}]},e.chart.refresh()}),0)}else e.chartData={}}))},e}();Q.decorators=[{type:r.Component,args:[{selector:"abp-error-rate-widget",template:'\n    <div [abpPermission]="\'AuditLogging.AuditLogs\'" class="abp-widget-wrapper">\n      <div class="card">\n        <div class="card-header">\n          <h5 class="card-title">{{ \'AbpAuditLogging::ErrorRateInLogs\' | abpLocalization }}</h5>\n        </div>\n        <div class="card-body">\n          <div class="row">\n            <abp-chart\n              #chart\n              (initialized)="initialize($event)"\n              class="w-100"\n              type="pie"\n              [data]="chartData"\n              [width]="width"\n              [height]="height"\n            ></abp-chart>\n          </div>\n        </div>\n      </div>\n    </div>\n  ',providers:[t.SubscriptionService]}]}],Q.ctorParameters=function(){return[{type:a.Store},{type:t.SubscriptionService},{type:t.PermissionService}]},Q.propDecorators={initialized:[{type:r.Output}],width:[{type:r.Input}],height:[{type:r.Input}]},v([a.Select(e.ɵc.getErrorRateStatistics)],Q.prototype,"data$",void 0);var W,Y=function(){function e(){}return e.forChild=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[{provide:P,useValue:t.entityActionContributors},{provide:k,useValue:t.toolbarActionContributors},{provide:G,useValue:t.entityPropContributors},_]}},e.forLazy=function(n){return void 0===n&&(n={}),new t.LazyModuleFactory(e.forChild(n))},e}();Y.decorators=[{type:r.NgModule,args:[{declarations:[S,B,Q,H],exports:[S,B,Q,H],imports:[F,a.NgxsModule.forFeature([e.ɵc]),t.CoreModule,i.CommercialUiModule,n.ThemeSharedModule,o.NgbNavModule,o.NgbDatepickerModule],entryComponents:[B]}]}],(W=e.eEntityChangeType||(e.eEntityChangeType={}))[W.Created=0]="Created",W[W.Updated=1]="Updated",W[W.Deleted=2]="Deleted";var $=function(){function t(e){this.store=e}return t.prototype.get=function(){return this.store.selectSnapshot(e.ɵc.get)},t.prototype.getTotalCount=function(){return this.store.selectSnapshot(e.ɵc.getTotalCount)},t.prototype.getAverageExecutionStatistics=function(){return this.store.selectSnapshot(e.ɵc.getAverageExecutionStatistics)},t.prototype.getErrorRateStatistics=function(){return this.store.selectSnapshot(e.ɵc.getErrorRateStatistics)},t.prototype.dispatchGetAuditLogs=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(u.bind.apply(u,y([void 0],e))))},t.prototype.dispatchGetAverageExecutionDurationPerDay=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(m.bind.apply(m,y([void 0],e))))},t.prototype.dispatchGetErrorRate=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(b.bind.apply(b,y([void 0],e))))},t}();$.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new $(r.ɵɵinject(a.Store))},token:$,providedIn:"root"}),$.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],$.ctorParameters=function(){return[{type:a.Store}]},e.AUDIT_LOGGING_ENTITY_ACTION_CONTRIBUTORS=P,e.AUDIT_LOGGING_ENTITY_PROP_CONTRIBUTORS=G,e.AUDIT_LOGGING_TOOLBAR_ACTION_CONTRIBUTORS=k,e.AuditLoggingExtensionsGuard=_,e.AuditLoggingModule=Y,e.AuditLoggingState=e.ɵc,e.AuditLoggingStateService=$,e.AuditLogsComponent=S,e.AuditLogsService=L,e.AverageExecutionDurationWidgetComponent=H,e.DEFAULT_AUDIT_LOGGING_ENTITY_ACTIONS=R,e.DEFAULT_AUDIT_LOGGING_ENTITY_PROPS=z,e.DEFAULT_AUDIT_LOGGING_TOOLBAR_ACTIONS=M,e.EntityChangesComponent=B,e.ErrorRateWidgetComponent=Q,e.GetAuditLogs=u,e.GetAverageExecutionDurationPerDay=m,e.GetErrorRate=b,e.HTTP_METHODS=f,e.HTTP_STATUS_CODES=A,e.SHOW_ENTITY_DETAILS=w,e.entityChangeTypeOptions=V,e.ɵ0=T,e.ɵa=S,e.ɵd=L,e.ɵe=u,e.ɵf=m,e.ɵg=b,e.ɵk=B,e.ɵl=Q,e.ɵm=H,e.ɵn=F,e.ɵo=_,e.ɵp=P,e.ɵq=k,e.ɵr=G,Object.defineProperty(e,"__esModule",{value:!0})}));