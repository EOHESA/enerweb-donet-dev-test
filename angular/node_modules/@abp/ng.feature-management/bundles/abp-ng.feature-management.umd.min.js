!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngxs/store"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@abp/ng.feature-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngxs/store","rxjs/operators"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["feature-management"]={}),e.i1,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.store,e.rxjs.operators)}(this,(function(e,t,n,a,r,i,o){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */Object.create;function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=i.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return o}function s(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}Object.create;var p,l=function(e){var t=this;this.restService=e,this.apiName="AbpFeatureManagement",this.get=function(e,n){return t.restService.request({method:"GET",url:"/api/feature-management/features",params:{providerName:e,providerKey:n}},{apiName:t.apiName})},this.update=function(e,n,a){return t.restService.request({method:"PUT",url:"/api/feature-management/features",params:{providerName:e,providerKey:n},body:a},{apiName:t.apiName})}};l.ɵprov=a.ɵɵdefineInjectable({factory:function(){return new l(a.ɵɵinject(t.RestService))},token:l,providedIn:"root"}),l.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],l.ctorParameters=function(){return[{type:t.RestService}]},function(e){e.ToggleStringValueType="ToggleStringValueType",e.FreeTextStringValueType="FreeTextStringValueType",e.SelectionStringValueType="SelectionStringValueType"}(p||(p={}));var c=function(){function e(e,t,n,r,i){this.track=e,this.service=t,this.store=n,this.configState=r,this.appConfigService=i,this.groups=[],this.valueTypes=p,this.visibleChange=new a.EventEmitter,this.modalBusy=!1}return Object.defineProperty(e.prototype,"visible",{get:function(){return this._visible},set:function(e){this._visible!==e&&(this._visible=e,this.visibleChange.emit(e),e&&this.openModal())},enumerable:!1,configurable:!0}),e.prototype.openModal=function(){if(!this.providerName)throw new Error("providerName is required.");this.getFeatures()},e.prototype.getFeatures=function(){var e=this;this.service.get(this.providerName,this.providerKey).subscribe((function(t){e.groups=t.groups.map((function(e){return{name:e.name,displayName:e.displayName}})),e.selectedGroupDisplayName=e.groups[0].displayName,e.features=t.groups.reduce((function(e,t){var n,a,r,i;return Object.assign(Object.assign({},e),((n={})[t.name]=(a=t.features,r=document.body.dir,i="margin-"+("rtl"===r?"right":"left")+".px",a.map((function(e){var t,n,a=(null===(n=e.valueType)||void 0===n?void 0:n.name)===p.ToggleStringValueType?"true"===(e.value||"").toLowerCase():e.value;return Object.assign(Object.assign({},e),{value:a,initialValue:a,style:(t={},t[i]=20*e.depth,t)})}))),n))}),{})}))},e.prototype.save=function(){var e=this;if(!this.modalBusy){var t=[];Object.keys(this.features).forEach((function(n){e.features[n].forEach((function(e){e.value!==e.initialValue&&t.push({name:e.name,value:""+e.value})}))})),t.length?(this.modalBusy=!0,this.service.update(this.providerName,this.providerKey,{features:t}).pipe(o.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.visible=!1,e.providerKey||e.appConfigService.get().pipe(o.tap((function(t){return e.configState.setState(t)}))).subscribe()}))):this.visible=!1}},e.prototype.onCheckboxClick=function(e,t){e?this.checkToggleAncestors(t):this.uncheckToggleDescendants(t)},e.prototype.uncheckToggleDescendants=function(e){var t=this;this.findAllDescendantsOfByType(e,p.ToggleStringValueType).forEach((function(e){return t.setFeatureValue(e,!1)}))},e.prototype.checkToggleAncestors=function(e){var t=this;this.findAllAncestorsOfByType(e,p.ToggleStringValueType).forEach((function(e){return t.setFeatureValue(e,!0)}))},e.prototype.findAllAncestorsOfByType=function(e,t){for(var n=this.findParentByType(e,t),a=[];n;)a.push(n),n=this.findParentByType(n,t);return a},e.prototype.findAllDescendantsOfByType=function(e,t){for(var n=[],a=[e];a.length;){var r=a.pop(),i=this.findChildrenByType(r,t);n.push.apply(n,s(i)),a.push.apply(a,s(i))}return n},e.prototype.findParentByType=function(e,t){return this.getCurrentGroup().find((function(n){return n.valueType.name===t&&n.name===e.parentName}))},e.prototype.findChildrenByType=function(e,t){return this.getCurrentGroup().filter((function(n){return n.valueType.name===t&&n.parentName===e.name}))},e.prototype.getCurrentGroup=function(){var e;return null!==(e=this.features[this.selectedGroupDisplayName])&&void 0!==e?e:[]},e.prototype.setFeatureValue=function(e,t){e.value=t},e}();c.decorators=[{type:a.Component,args:[{selector:"abp-feature-management",template:'<abp-modal *ngIf="visible" size="lg" [(visible)]="visible" [busy]="modalBusy">\n  <ng-template #abpHeader>\n    <h3>{{ \'AbpFeatureManagement::Features\' | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <div class="row">\n      <div class="col-md-4">\n        <ul\n          ngbNav\n          #nav="ngbNav"\n          [(activeId)]="selectedGroupDisplayName"\n          class="nav-pills"\n          orientation="vertical"\n        >\n          <li\n            *ngFor="let group of groups; trackBy: track.by(\'name\')"\n            [ngbNavItem]="group.displayName"\n          >\n            <a ngbNavLink>{{ group.displayName }}</a>\n            <ng-template ngbNavContent>\n              <h4>{{ selectedGroupDisplayName }}</h4>\n              <hr class="mt-2 mb-3" />\n\n              <div\n                class="mt-2"\n                *ngFor="let feature of features[group.name]; let i = index; trackBy: track.by(\'id\')"\n                [ngStyle]="feature.style"\n                [ngSwitch]="feature.valueType?.name"\n                (keyup.enter)="save()"\n              >\n                <ng-container *ngSwitchCase="valueTypes.ToggleStringValueType">\n                  <div class="custom-checkbox custom-control">\n                    <input\n                      class="custom-control-input"\n                      type="checkbox"\n                      [id]="feature.name"\n                      [(ngModel)]="feature.value"\n                      (ngModelChange)="onCheckboxClick($event, feature)"\n                    />\n\n                    <label class="custom-control-label" [htmlFor]="feature.name">{{\n                      feature.displayName\n                    }}</label>\n                    <ng-container\n                      *ngTemplateOutlet="descTmp; context: { $implicit: feature.description }"\n                    ></ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngSwitchCase="valueTypes.FreeTextStringValueType">\n                  <div class="form-group">\n                    <label [htmlFor]="feature.name">{{ feature.displayName }}</label>\n                    <input\n                      class="form-control"\n                      type="text"\n                      [id]="feature.name"\n                      [(ngModel)]="feature.value"\n                      [abpFeatureManagementFreeText]="feature"\n                    />\n\n                    <ng-container\n                      *ngTemplateOutlet="descTmp; context: { $implicit: feature.description }"\n                    ></ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngSwitchCase="valueTypes.SelectionStringValueType">\n                  <ng-container *ngIf="feature.valueType.itemSource?.items?.length">\n                    <div class="form-group">\n                      <label [htmlFor]="feature.name">{{ feature.displayName }}</label>\n                      <select\n                        class="form-control custom-select"\n                        [id]="feature.name"\n                        [(ngModel)]="feature.value"\n                      >\n                        <option\n                          *ngFor="\n                            let item of feature.valueType.itemSource?.items;\n                            trackBy: track.by(\'value\')\n                          "\n                          [ngValue]="item.value"\n                        >\n                          {{\n                            item.displayText?.resourceName + \'::\' + item.displayText?.name\n                              | abpLocalization\n                          }}</option\n                        >\n                      </select>\n                      <ng-container\n                        *ngTemplateOutlet="descTmp; context: { $implicit: feature.description }"\n                      ></ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n                <ng-container *ngSwitchDefault>{{ feature.displayName }}</ng-container>\n              </div>\n            </ng-template>\n          </li>\n        </ul>\n      </div>\n\n      <ng-template #descTmp let-description>\n        <small *ngIf="description" class="form-text text-muted">{{ description }}</small>\n      </ng-template>\n\n      <div class="col-md-8"><div [ngbNavOutlet]="nav"></div></div>\n\n      <div class="mx-3" *ngIf="!groups.length">\n        {{ \'AbpFeatureManagement::NoFeatureFoundMessage\' | abpLocalization }}\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button #abpClose type="button" class="btn btn-secondary">\n      {{ \'AbpFeatureManagement::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button\n      *ngIf="groups.length"\n      iconClass="fa fa-check"\n      [disabled]="modalBusy"\n      (click)="save()"\n    >\n      {{ \'AbpFeatureManagement::Save\' | abpLocalization }}\n    </abp-button>\n  </ng-template>\n</abp-modal>\n',exportAs:"abpFeatureManagement"}]}],c.ctorParameters=function(){return[{type:t.TrackByService},{type:l},{type:i.Store},{type:t.ConfigStateService},{type:t.AbpApplicationConfigurationService}]},c.propDecorators={providerKey:[{type:a.Input}],providerName:[{type:a.Input}],visible:[{type:a.Input}],visibleChange:[{type:a.Output}]};var g={numeric:"number",default:"text"},f=function(){function e(){}return Object.defineProperty(e.prototype,"feature",{get:function(){return this._feature},set:function(e){this._feature=e,this.setInputType()},enumerable:!1,configurable:!0}),e.prototype.setInputType=function(){var e,t,n,a,r=null===(n=null===(t=null===(e=this.feature)||void 0===e?void 0:e.valueType)||void 0===t?void 0:t.validator)||void 0===n?void 0:n.name.toLowerCase();this.type=null!==(a=g[r])&&void 0!==a?a:g.default},e}();f.decorators=[{type:a.Directive,args:[{selector:"input[abpFeatureManagementFreeText]",exportAs:"inputAbpFeatureManagementFreeText"}]}],f.propDecorators={feature:[{type:a.Input,args:["abpFeatureManagementFreeText"]}],type:[{type:a.HostBinding,args:["type"]}]};var d=[c,f],m=function(){};m.decorators=[{type:a.NgModule,args:[{declarations:s(d),imports:[t.CoreModule,n.ThemeSharedModule,r.NgbNavModule,i.NgxsModule.forFeature([])],exports:s(d)}]}],e.FeatureManagementComponent=c,e.FeatureManagementModule=m,e.FeaturesService=l,e.ɵa=c,e.ɵb=l,e.ɵc=f,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.feature-management.umd.min.js.map