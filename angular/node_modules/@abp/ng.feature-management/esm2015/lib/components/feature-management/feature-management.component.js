import { AbpApplicationConfigurationService, ConfigStateService, TrackByService, } from '@abp/ng.core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Store } from '@ngxs/store';
import { finalize, tap } from 'rxjs/operators';
import { FeaturesService } from '../../proxy/feature-management/features.service';
var ValueTypes;
(function (ValueTypes) {
    ValueTypes["ToggleStringValueType"] = "ToggleStringValueType";
    ValueTypes["FreeTextStringValueType"] = "FreeTextStringValueType";
    ValueTypes["SelectionStringValueType"] = "SelectionStringValueType";
})(ValueTypes || (ValueTypes = {}));
export class FeatureManagementComponent {
    constructor(track, service, store, configState, appConfigService) {
        this.track = track;
        this.service = service;
        this.store = store;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.groups = [];
        this.valueTypes = ValueTypes;
        this.visibleChange = new EventEmitter();
        this.modalBusy = false;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (this._visible === value)
            return;
        this._visible = value;
        this.visibleChange.emit(value);
        if (value)
            this.openModal();
    }
    openModal() {
        if (!this.providerName) {
            throw new Error('providerName is required.');
        }
        this.getFeatures();
    }
    getFeatures() {
        this.service.get(this.providerName, this.providerKey).subscribe(res => {
            this.groups = res.groups.map(({ name, displayName }) => ({ name, displayName }));
            this.selectedGroupDisplayName = this.groups[0].displayName;
            this.features = res.groups.reduce((acc, val) => (Object.assign(Object.assign({}, acc), { [val.name]: mapFeatures(val.features, document.body.dir) })), {});
        });
    }
    save() {
        if (this.modalBusy)
            return;
        const changedFeatures = [];
        Object.keys(this.features).forEach(key => {
            this.features[key].forEach(feature => {
                if (feature.value !== feature.initialValue)
                    changedFeatures.push({ name: feature.name, value: `${feature.value}` });
            });
        });
        if (!changedFeatures.length) {
            this.visible = false;
            return;
        }
        this.modalBusy = true;
        this.service
            .update(this.providerName, this.providerKey, { features: changedFeatures })
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.visible = false;
            if (!this.providerKey) {
                // to refresh host's features
                this.appConfigService
                    .get()
                    .pipe(tap(res => this.configState.setState(res)))
                    .subscribe();
            }
        });
    }
    onCheckboxClick(val, feature) {
        if (val) {
            this.checkToggleAncestors(feature);
        }
        else {
            this.uncheckToggleDescendants(feature);
        }
    }
    uncheckToggleDescendants(feature) {
        this.findAllDescendantsOfByType(feature, ValueTypes.ToggleStringValueType).forEach(node => this.setFeatureValue(node, false));
    }
    checkToggleAncestors(feature) {
        this.findAllAncestorsOfByType(feature, ValueTypes.ToggleStringValueType).forEach(node => this.setFeatureValue(node, true));
    }
    findAllAncestorsOfByType(feature, type) {
        let parent = this.findParentByType(feature, type);
        const ancestors = [];
        while (parent) {
            ancestors.push(parent);
            parent = this.findParentByType(parent, type);
        }
        return ancestors;
    }
    findAllDescendantsOfByType(feature, type) {
        const descendants = [];
        const queue = [feature];
        while (queue.length) {
            const node = queue.pop();
            const newDescendants = this.findChildrenByType(node, type);
            descendants.push(...newDescendants);
            queue.push(...newDescendants);
        }
        return descendants;
    }
    findParentByType(feature, type) {
        return this.getCurrentGroup().find(f => f.valueType.name === type && f.name === feature.parentName);
    }
    findChildrenByType(feature, type) {
        return this.getCurrentGroup().filter(f => f.valueType.name === type && f.parentName === feature.name);
    }
    getCurrentGroup() {
        var _a;
        return (_a = this.features[this.selectedGroupDisplayName]) !== null && _a !== void 0 ? _a : [];
    }
    setFeatureValue(feature, val) {
        feature.value = val;
    }
}
FeatureManagementComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-feature-management',
                template: "<abp-modal *ngIf=\"visible\" size=\"lg\" [(visible)]=\"visible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ 'AbpFeatureManagement::Features' | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <ul\n          ngbNav\n          #nav=\"ngbNav\"\n          [(activeId)]=\"selectedGroupDisplayName\"\n          class=\"nav-pills\"\n          orientation=\"vertical\"\n        >\n          <li\n            *ngFor=\"let group of groups; trackBy: track.by('name')\"\n            [ngbNavItem]=\"group.displayName\"\n          >\n            <a ngbNavLink>{{ group.displayName }}</a>\n            <ng-template ngbNavContent>\n              <h4>{{ selectedGroupDisplayName }}</h4>\n              <hr class=\"mt-2 mb-3\" />\n\n              <div\n                class=\"mt-2\"\n                *ngFor=\"let feature of features[group.name]; let i = index; trackBy: track.by('id')\"\n                [ngStyle]=\"feature.style\"\n                [ngSwitch]=\"feature.valueType?.name\"\n                (keyup.enter)=\"save()\"\n              >\n                <ng-container *ngSwitchCase=\"valueTypes.ToggleStringValueType\">\n                  <div class=\"custom-checkbox custom-control\">\n                    <input\n                      class=\"custom-control-input\"\n                      type=\"checkbox\"\n                      [id]=\"feature.name\"\n                      [(ngModel)]=\"feature.value\"\n                      (ngModelChange)=\"onCheckboxClick($event, feature)\"\n                    />\n\n                    <label class=\"custom-control-label\" [htmlFor]=\"feature.name\">{{\n                      feature.displayName\n                    }}</label>\n                    <ng-container\n                      *ngTemplateOutlet=\"descTmp; context: { $implicit: feature.description }\"\n                    ></ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"valueTypes.FreeTextStringValueType\">\n                  <div class=\"form-group\">\n                    <label [htmlFor]=\"feature.name\">{{ feature.displayName }}</label>\n                    <input\n                      class=\"form-control\"\n                      type=\"text\"\n                      [id]=\"feature.name\"\n                      [(ngModel)]=\"feature.value\"\n                      [abpFeatureManagementFreeText]=\"feature\"\n                    />\n\n                    <ng-container\n                      *ngTemplateOutlet=\"descTmp; context: { $implicit: feature.description }\"\n                    ></ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"valueTypes.SelectionStringValueType\">\n                  <ng-container *ngIf=\"feature.valueType.itemSource?.items?.length\">\n                    <div class=\"form-group\">\n                      <label [htmlFor]=\"feature.name\">{{ feature.displayName }}</label>\n                      <select\n                        class=\"form-control custom-select\"\n                        [id]=\"feature.name\"\n                        [(ngModel)]=\"feature.value\"\n                      >\n                        <option\n                          *ngFor=\"\n                            let item of feature.valueType.itemSource?.items;\n                            trackBy: track.by('value')\n                          \"\n                          [ngValue]=\"item.value\"\n                        >\n                          {{\n                            item.displayText?.resourceName + '::' + item.displayText?.name\n                              | abpLocalization\n                          }}</option\n                        >\n                      </select>\n                      <ng-container\n                        *ngTemplateOutlet=\"descTmp; context: { $implicit: feature.description }\"\n                      ></ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n                <ng-container *ngSwitchDefault>{{ feature.displayName }}</ng-container>\n              </div>\n            </ng-template>\n          </li>\n        </ul>\n      </div>\n\n      <ng-template #descTmp let-description>\n        <small *ngIf=\"description\" class=\"form-text text-muted\">{{ description }}</small>\n      </ng-template>\n\n      <div class=\"col-md-8\"><div [ngbNavOutlet]=\"nav\"></div></div>\n\n      <div class=\"mx-3\" *ngIf=\"!groups.length\">\n        {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button #abpClose type=\"button\" class=\"btn btn-secondary\">\n      {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\n    </button>\n    <abp-button\n      *ngIf=\"groups.length\"\n      iconClass=\"fa fa-check\"\n      [disabled]=\"modalBusy\"\n      (click)=\"save()\"\n    >\n      {{ 'AbpFeatureManagement::Save' | abpLocalization }}\n    </abp-button>\n  </ng-template>\n</abp-modal>\n",
                exportAs: 'abpFeatureManagement'
            },] }
];
FeatureManagementComponent.ctorParameters = () => [
    { type: TrackByService },
    { type: FeaturesService },
    { type: Store },
    { type: ConfigStateService },
    { type: AbpApplicationConfigurationService }
];
FeatureManagementComponent.propDecorators = {
    providerKey: [{ type: Input }],
    providerName: [{ type: Input }],
    visible: [{ type: Input }],
    visibleChange: [{ type: Output }]
};
function mapFeatures(features, dir) {
    const margin = `margin-${dir === 'rtl' ? 'right' : 'left'}.px`;
    return features.map(feature => {
        var _a;
        const value = ((_a = feature.valueType) === null || _a === void 0 ? void 0 : _a.name) === ValueTypes.ToggleStringValueType
            ? (feature.value || '').toLowerCase() === 'true'
            : feature.value;
        return Object.assign(Object.assign({}, feature), { value, initialValue: value, style: { [margin]: feature.depth * 20 } });
    });
}
//# sourceMappingURL=data:application/json;base64,