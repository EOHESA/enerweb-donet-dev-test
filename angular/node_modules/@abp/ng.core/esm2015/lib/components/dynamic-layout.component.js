import { Component, Injector, Optional, SkipSelf } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
import { LocalizationService } from '../services/localization.service';
import { ReplaceableComponentsService } from '../services/replaceable-components.service';
import { RoutesService } from '../services/routes.service';
import { SubscriptionService } from '../services/subscription.service';
import { findRoute, getRoutePath } from '../utils/route-utils';
export class DynamicLayoutComponent {
    constructor(injector, localizationService, replaceableComponents, subscription, dynamicLayoutComponent) {
        this.localizationService = localizationService;
        this.replaceableComponents = replaceableComponents;
        this.subscription = subscription;
        // TODO: Consider a shared enum (eThemeSharedComponents) for known layouts
        this.layouts = new Map([
            ['application', 'Theme.ApplicationLayoutComponent'],
            ['account', 'Theme.AccountLayoutComponent'],
            ['empty', 'Theme.EmptyLayoutComponent'],
        ]);
        this.isLayoutVisible = true;
        if (dynamicLayoutComponent)
            return;
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.routes = injector.get(RoutesService);
        this.getLayout();
        this.subscription.addOne(this.router.events.pipe(filter(event => event instanceof NavigationEnd)), () => {
            this.getLayout();
        });
        this.listenToLanguageChange();
    }
    getLayout() {
        var _a;
        let expectedLayout = (this.route.snapshot.data || {}).layout;
        if (!expectedLayout) {
            let node = findRoute(this.routes, getRoutePath(this.router));
            node = { parent: node };
            while (node.parent) {
                node = node.parent;
                if (node.layout) {
                    expectedLayout = node.layout;
                    break;
                }
            }
        }
        if (!expectedLayout)
            expectedLayout = "empty" /* empty */;
        if (this.layoutKey === expectedLayout)
            return;
        const key = this.layouts.get(expectedLayout);
        this.layout = (_a = this.getComponent(key)) === null || _a === void 0 ? void 0 : _a.component;
        this.layoutKey = expectedLayout;
    }
    listenToLanguageChange() {
        this.subscription.addOne(this.localizationService.languageChange$, () => {
            this.isLayoutVisible = false;
            setTimeout(() => (this.isLayoutVisible = true), 0);
        });
    }
    getComponent(key) {
        return this.replaceableComponents.get(key);
    }
}
DynamicLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-dynamic-layout',
                template: `
    <ng-container *ngTemplateOutlet="layout ? componentOutlet : routerOutlet"></ng-container>
    <ng-template #routerOutlet><router-outlet></router-outlet></ng-template>
    <ng-template #componentOutlet
      ><ng-container *ngIf="isLayoutVisible" [ngComponentOutlet]="layout"></ng-container
    ></ng-template>
  `,
                providers: [SubscriptionService]
            },] }
];
DynamicLayoutComponent.ctorParameters = () => [
    { type: Injector },
    { type: LocalizationService },
    { type: ReplaceableComponentsService },
    { type: SubscriptionService },
    { type: DynamicLayoutComponent, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,