import { Injectable } from '@angular/core';
import { RestService } from './rest.service';
import { SessionStateService } from './session-state.service';
import * as i0 from "@angular/core";
import * as i1 from "./rest.service";
import * as i2 from "./session-state.service";
export class MultiTenancyService {
    constructor(restService, sessionState) {
        this.restService = restService;
        this.sessionState = sessionState;
        this._domainTenant = null;
        this.isTenantBoxVisible = true;
        this.apiName = 'abp';
    }
    set domainTenant(value) {
        this._domainTenant = value;
        this.sessionState.setTenant(value);
    }
    get domainTenant() {
        return this._domainTenant;
    }
    /**
     * @deprecated Use AbpTenantService.findTenantByName method instead. To be deleted in v5.0.
     */
    findTenantByName(name, headers) {
        return this.restService.request({
            url: `/api/abp/multi-tenancy/tenants/by-name/${name}`,
            method: 'GET',
            headers,
        }, { apiName: this.apiName });
    }
    /**
     * @deprecated Use AbpTenantService.findTenantById method instead. To be deleted in v5.0.
     */
    findTenantById(id, headers) {
        return this.restService.request({ url: `/api/abp/multi-tenancy/tenants/by-id/${id}`, method: 'GET', headers }, { apiName: this.apiName });
    }
}
MultiTenancyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MultiTenancyService_Factory() { return new MultiTenancyService(i0.ɵɵinject(i1.RestService), i0.ɵɵinject(i2.SessionStateService)); }, token: MultiTenancyService, providedIn: "root" });
MultiTenancyService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
MultiTenancyService.ctorParameters = () => [
    { type: RestService },
    { type: SessionStateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktdGVuYW5jeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL211bHRpLXRlbmFuY3kuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7OztBQUc5RCxNQUFNLE9BQU8sbUJBQW1CO0lBZ0I5QixZQUFvQixXQUF3QixFQUFVLFlBQWlDO1FBQW5FLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBZi9FLGtCQUFhLEdBQXFCLElBQUksQ0FBQztRQVcvQyx1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFFMUIsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUUwRSxDQUFDO0lBYjNGLElBQUksWUFBWSxDQUFDLEtBQXVCO1FBQ3RDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQVFEOztPQUVHO0lBQ0gsZ0JBQWdCLENBQUMsSUFBWSxFQUFFLE9BQStCO1FBQzVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQzdCO1lBQ0UsR0FBRyxFQUFFLDBDQUEwQyxJQUFJLEVBQUU7WUFDckQsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPO1NBQ1IsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjLENBQUMsRUFBVSxFQUFFLE9BQStCO1FBQ3hELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQzdCLEVBQUUsR0FBRyxFQUFFLHdDQUF3QyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUM3RSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQzFCLENBQUM7SUFDSixDQUFDOzs7O1lBekNGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQUh6QixXQUFXO1lBQ1gsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQUJQIH0gZnJvbSAnLi4vbW9kZWxzL2NvbW1vbic7XG5pbXBvcnQge1xuICBDdXJyZW50VGVuYW50RHRvLFxuICBGaW5kVGVuYW50UmVzdWx0RHRvLFxufSBmcm9tICcuLi9wcm94eS92b2xvL2FicC9hc3AtbmV0LWNvcmUvbXZjL211bHRpLXRlbmFuY3kvbW9kZWxzJztcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnLi9yZXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgU2Vzc2lvblN0YXRlU2VydmljZSB9IGZyb20gJy4vc2Vzc2lvbi1zdGF0ZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBNdWx0aVRlbmFuY3lTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfZG9tYWluVGVuYW50OiBDdXJyZW50VGVuYW50RHRvID0gbnVsbDtcblxuICBzZXQgZG9tYWluVGVuYW50KHZhbHVlOiBDdXJyZW50VGVuYW50RHRvKSB7XG4gICAgdGhpcy5fZG9tYWluVGVuYW50ID0gdmFsdWU7XG4gICAgdGhpcy5zZXNzaW9uU3RhdGUuc2V0VGVuYW50KHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkb21haW5UZW5hbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpblRlbmFudDtcbiAgfVxuXG4gIGlzVGVuYW50Qm94VmlzaWJsZSA9IHRydWU7XG5cbiAgYXBpTmFtZSA9ICdhYnAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzdFNlcnZpY2U6IFJlc3RTZXJ2aWNlLCBwcml2YXRlIHNlc3Npb25TdGF0ZTogU2Vzc2lvblN0YXRlU2VydmljZSkge31cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIEFicFRlbmFudFNlcnZpY2UuZmluZFRlbmFudEJ5TmFtZSBtZXRob2QgaW5zdGVhZC4gVG8gYmUgZGVsZXRlZCBpbiB2NS4wLlxuICAgKi9cbiAgZmluZFRlbmFudEJ5TmFtZShuYW1lOiBzdHJpbmcsIGhlYWRlcnM6IEFCUC5EaWN0aW9uYXJ5PHN0cmluZz4pOiBPYnNlcnZhYmxlPEZpbmRUZW5hbnRSZXN1bHREdG8+IHtcbiAgICByZXR1cm4gdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICB1cmw6IGAvYXBpL2FicC9tdWx0aS10ZW5hbmN5L3RlbmFudHMvYnktbmFtZS8ke25hbWV9YCxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgIH0sXG4gICAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIEFicFRlbmFudFNlcnZpY2UuZmluZFRlbmFudEJ5SWQgbWV0aG9kIGluc3RlYWQuIFRvIGJlIGRlbGV0ZWQgaW4gdjUuMC5cbiAgICovXG4gIGZpbmRUZW5hbnRCeUlkKGlkOiBzdHJpbmcsIGhlYWRlcnM6IEFCUC5EaWN0aW9uYXJ5PHN0cmluZz4pOiBPYnNlcnZhYmxlPEZpbmRUZW5hbnRSZXN1bHREdG8+IHtcbiAgICByZXR1cm4gdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0KFxuICAgICAgeyB1cmw6IGAvYXBpL2FicC9tdWx0aS10ZW5hbmN5L3RlbmFudHMvYnktaWQvJHtpZH1gLCBtZXRob2Q6ICdHRVQnLCBoZWFkZXJzIH0sXG4gICAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9LFxuICAgICk7XG4gIH1cbn1cbiJdfQ==