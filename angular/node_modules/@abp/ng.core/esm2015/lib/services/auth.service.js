import { __awaiter } from "tslib";
import { Injectable, Injector } from '@angular/core';
import { AUTH_FLOW_STRATEGY } from '../strategies/auth-flow.strategy';
import { EnvironmentService } from './environment.service';
import * as i0 from "@angular/core";
import * as i1 from "./environment.service";
export class AuthService {
    constructor(environment, injector) {
        this.environment = environment;
        this.injector = injector;
        this.setStrategy = () => {
            const flow = this.environment.getEnvironment().oAuthConfig.responseType || 'password';
            if (this.flow === flow)
                return;
            if (this.strategy)
                this.strategy.destroy();
            this.flow = flow;
            this.strategy = AUTH_FLOW_STRATEGY.Code(this.injector);
        };
        this.setStrategy();
        this.listenToSetEnvironment();
    }
    get isInternalAuth() {
        return this.strategy.isInternalAuth;
    }
    listenToSetEnvironment() {
        this.environment.createOnUpdateStream(state => state.oAuthConfig).subscribe(this.setStrategy);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.strategy.init();
        });
    }
    logout() {
        return this.strategy.logout();
    }
    initLogin() {
        this.strategy.login();
    }
}
AuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.EnvironmentService), i0.ɵɵinject(i0.INJECTOR)); }, token: AuthService, providedIn: "root" });
AuthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthService.ctorParameters = () => [
    { type: EnvironmentService },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2F1dGguc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFvQixrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFLM0QsTUFBTSxPQUFPLFdBQVc7SUFRdEIsWUFBb0IsV0FBK0IsRUFBVSxRQUFrQjtRQUEzRCxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBS3ZFLGdCQUFXLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksSUFBSSxVQUFVLENBQUM7WUFDdEYsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUk7Z0JBQUUsT0FBTztZQUUvQixJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFM0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQztRQVpBLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBUEQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7SUFDdEMsQ0FBQztJQWlCTyxzQkFBc0I7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFSyxJQUFJOztZQUNSLE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BDLENBQUM7S0FBQTtJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7WUF4Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFKUSxrQkFBa0I7WUFITixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhGbG93U3RyYXRlZ3ksIEFVVEhfRkxPV19TVFJBVEVHWSB9IGZyb20gJy4uL3N0cmF0ZWdpZXMvYXV0aC1mbG93LnN0cmF0ZWd5JztcbmltcG9ydCB7IEVudmlyb25tZW50U2VydmljZSB9IGZyb20gJy4vZW52aXJvbm1lbnQuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSB7XG4gIHByaXZhdGUgZmxvdzogc3RyaW5nO1xuICBwcml2YXRlIHN0cmF0ZWd5OiBBdXRoRmxvd1N0cmF0ZWd5O1xuXG4gIGdldCBpc0ludGVybmFsQXV0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJhdGVneS5pc0ludGVybmFsQXV0aDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZW52aXJvbm1lbnQ6IEVudmlyb25tZW50U2VydmljZSwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLnNldFN0cmF0ZWd5KCk7XG4gICAgdGhpcy5saXN0ZW5Ub1NldEVudmlyb25tZW50KCk7XG4gIH1cblxuICBwcml2YXRlIHNldFN0cmF0ZWd5ID0gKCkgPT4ge1xuICAgIGNvbnN0IGZsb3cgPSB0aGlzLmVudmlyb25tZW50LmdldEVudmlyb25tZW50KCkub0F1dGhDb25maWcucmVzcG9uc2VUeXBlIHx8ICdwYXNzd29yZCc7XG4gICAgaWYgKHRoaXMuZmxvdyA9PT0gZmxvdykgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuc3RyYXRlZ3kpIHRoaXMuc3RyYXRlZ3kuZGVzdHJveSgpO1xuXG4gICAgdGhpcy5mbG93ID0gZmxvdztcbiAgICB0aGlzLnN0cmF0ZWd5ID0gQVVUSF9GTE9XX1NUUkFURUdZLkNvZGUodGhpcy5pbmplY3Rvcik7XG4gIH07XG5cbiAgcHJpdmF0ZSBsaXN0ZW5Ub1NldEVudmlyb25tZW50KCkge1xuICAgIHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlT25VcGRhdGVTdHJlYW0oc3RhdGUgPT4gc3RhdGUub0F1dGhDb25maWcpLnN1YnNjcmliZSh0aGlzLnNldFN0cmF0ZWd5KTtcbiAgfVxuXG4gIGFzeW5jIGluaXQoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RyYXRlZ3kuaW5pdCgpO1xuICB9XG5cbiAgbG9nb3V0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyYXRlZ3kubG9nb3V0KCk7XG4gIH1cblxuICBpbml0TG9naW4oKSB7XG4gICAgdGhpcy5zdHJhdGVneS5sb2dpbigpO1xuICB9XG59XG4iXX0=