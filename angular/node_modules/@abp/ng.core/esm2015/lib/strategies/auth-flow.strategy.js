import { __awaiter } from "tslib";
import { Store } from '@ngxs/store';
import { OAuthService } from 'angular-oauth2-oidc';
import { of } from 'rxjs';
import { RestOccurError } from '../actions/rest.actions';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
export const oAuthStorage = localStorage;
export class AuthFlowStrategy {
    constructor(injector) {
        this.injector = injector;
        this.catchError = err => this.store.dispatch(new RestOccurError(err));
        this.store = injector.get(Store);
        this.environment = injector.get(EnvironmentService);
        this.configState = injector.get(ConfigStateService);
        this.oAuthService = injector.get(OAuthService);
        this.oAuthConfig = this.environment.getEnvironment().oAuthConfig;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const shouldClear = shouldStorageClear(this.environment.getEnvironment().oAuthConfig.clientId, oAuthStorage);
            if (shouldClear)
                clearOAuthStorage(oAuthStorage);
            this.oAuthService.configure(this.oAuthConfig);
            return this.oAuthService.loadDiscoveryDocument().catch(this.catchError);
        });
    }
}
export class AuthCodeFlowStrategy extends AuthFlowStrategy {
    constructor() {
        super(...arguments);
        this.isInternalAuth = false;
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.init.call(this)
                .then(() => this.oAuthService.tryLogin())
                .then(() => {
                if (this.oAuthService.hasValidAccessToken() || !this.oAuthService.getRefreshToken()) {
                    return Promise.resolve();
                }
                return this.oAuthService.refreshToken();
            })
                .then(() => this.oAuthService.setupAutomaticSilentRefresh({}, 'access_token'));
        });
    }
    login() {
        this.oAuthService.initCodeFlow();
    }
    checkIfInternalAuth() {
        this.oAuthService.initCodeFlow();
        return false;
    }
    logout() {
        this.oAuthService.logOut();
        return of(null);
    }
    destroy() { }
}
export const AUTH_FLOW_STRATEGY = {
    Code(injector) {
        return new AuthCodeFlowStrategy(injector);
    },
};
export function clearOAuthStorage(storage = oAuthStorage) {
    const keys = [
        'access_token',
        'id_token',
        'refresh_token',
        'nonce',
        'PKCE_verifier',
        'expires_at',
        'id_token_claims_obj',
        'id_token_expires_at',
        'id_token_stored_at',
        'access_token_stored_at',
        'granted_scopes',
        'session_state',
    ];
    keys.forEach(key => storage.removeItem(key));
}
function shouldStorageClear(clientId, storage) {
    const key = 'abpOAuthClientId';
    if (!storage.getItem(key)) {
        storage.setItem(key, clientId);
        return false;
    }
    const shouldClear = storage.getItem(key) !== clientId;
    if (shouldClear)
        storage.setItem(key, clientId);
    return shouldClear;
}
//# sourceMappingURL=data:application/json;base64,