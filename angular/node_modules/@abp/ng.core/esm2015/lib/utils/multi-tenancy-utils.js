import { __awaiter } from "tslib";
import clone from 'just-clone';
import { of } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { AbpTenantService } from '../proxy/pages/abp/multi-tenancy/abp-tenant.service';
import { EnvironmentService } from '../services/environment.service';
import { MultiTenancyService } from '../services/multi-tenancy.service';
import { createTokenParser } from './string-utils';
const tenancyPlaceholder = '{0}';
function getCurrentTenancyName(appBaseUrl) {
    var _a;
    if (appBaseUrl.charAt(appBaseUrl.length - 1) !== '/')
        appBaseUrl += '/';
    const parseTokens = createTokenParser(appBaseUrl);
    const token = tenancyPlaceholder.replace(/[}{]/g, '');
    return (_a = parseTokens(window.location.href)[token]) === null || _a === void 0 ? void 0 : _a[0];
}
export function parseTenantFromUrl(injector) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const environmentService = injector.get(EnvironmentService);
        const multiTenancyService = injector.get(MultiTenancyService);
        const abpTenantService = injector.get(AbpTenantService);
        const baseUrl = ((_b = (_a = environmentService.getEnvironment()) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.baseUrl) || '';
        const tenancyName = getCurrentTenancyName(baseUrl);
        if (tenancyName) {
            multiTenancyService.isTenantBoxVisible = false;
            setEnvironment(injector, tenancyName);
            return of(null)
                .pipe(switchMap(() => abpTenantService.findTenantByName(tenancyName, { __tenant: '' })), tap(res => {
                multiTenancyService.domainTenant = res.success
                    ? { id: res.tenantId, name: res.name }
                    : null;
            }))
                .toPromise();
        }
        return Promise.resolve();
    });
}
function setEnvironment(injector, tenancyName) {
    const environmentService = injector.get(EnvironmentService);
    const environment = clone(environmentService.getEnvironment());
    if (environment.application.baseUrl) {
        environment.application.baseUrl = environment.application.baseUrl.replace(tenancyPlaceholder, tenancyName);
    }
    if (environment.oAuthConfig.redirectUri) {
        environment.oAuthConfig.redirectUri = environment.oAuthConfig.redirectUri.replace(tenancyPlaceholder, tenancyName);
    }
    environment.oAuthConfig.issuer = environment.oAuthConfig.issuer.replace(tenancyPlaceholder, tenancyName);
    Object.keys(environment.apis).forEach(api => {
        Object.keys(environment.apis[api]).forEach(key => {
            environment.apis[api][key] = environment.apis[api][key].replace(tenancyPlaceholder, tenancyName);
        });
    });
    return environmentService.setState(environment);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktdGVuYW5jeS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9tdWx0aS10ZW5hbmN5LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEtBQUssTUFBTSxZQUFZLENBQUM7QUFDL0IsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBRXZGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0FBRWpDLFNBQVMscUJBQXFCLENBQUMsVUFBa0I7O0lBQy9DLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUc7UUFBRSxVQUFVLElBQUksR0FBRyxDQUFDO0lBRXhFLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEQsYUFBTyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsMENBQUcsQ0FBQyxFQUFFO0FBQ3ZELENBQUM7QUFFRCxNQUFNLFVBQWdCLGtCQUFrQixDQUFDLFFBQWtCOzs7UUFDekQsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDNUQsTUFBTSxtQkFBbUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDOUQsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFeEQsTUFBTSxPQUFPLEdBQUcsYUFBQSxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsMENBQUUsV0FBVywwQ0FBRSxPQUFPLEtBQUksRUFBRSxDQUFDO1FBQ2hGLE1BQU0sV0FBVyxHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5ELElBQUksV0FBVyxFQUFFO1lBQ2YsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1lBQy9DLGNBQWMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFdEMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO2lCQUNaLElBQUksQ0FDSCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDakYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNSLG1CQUFtQixDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsT0FBTztvQkFDNUMsQ0FBQyxDQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQXVCO29CQUM1RCxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ1gsQ0FBQyxDQUFDLENBQ0g7aUJBQ0EsU0FBUyxFQUFFLENBQUM7U0FDaEI7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7Q0FDMUI7QUFFRCxTQUFTLGNBQWMsQ0FBQyxRQUFrQixFQUFFLFdBQW1CO0lBQzdELE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRTVELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsQ0FBZ0IsQ0FBQztJQUU5RSxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO1FBQ25DLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDdkUsa0JBQWtCLEVBQ2xCLFdBQVcsQ0FDWixDQUFDO0tBQ0g7SUFFRCxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1FBQ3ZDLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FDL0Usa0JBQWtCLEVBQ2xCLFdBQVcsQ0FDWixDQUFDO0tBQ0g7SUFFRCxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQ3JFLGtCQUFrQixFQUNsQixXQUFXLENBQ1osQ0FBQztJQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0MsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FDN0Qsa0JBQWtCLEVBQ2xCLFdBQVcsQ0FDWixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sa0JBQWtCLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGNsb25lIGZyb20gJ2p1c3QtY2xvbmUnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi9tb2RlbHMvZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgQWJwVGVuYW50U2VydmljZSB9IGZyb20gJy4uL3Byb3h5L3BhZ2VzL2FicC9tdWx0aS10ZW5hbmN5L2FicC10ZW5hbnQuc2VydmljZSc7XG5pbXBvcnQgeyBDdXJyZW50VGVuYW50RHRvIH0gZnJvbSAnLi4vcHJveHkvdm9sby9hYnAvYXNwLW5ldC1jb3JlL212Yy9tdWx0aS10ZW5hbmN5L21vZGVscyc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IE11bHRpVGVuYW5jeVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9tdWx0aS10ZW5hbmN5LnNlcnZpY2UnO1xuaW1wb3J0IHsgY3JlYXRlVG9rZW5QYXJzZXIgfSBmcm9tICcuL3N0cmluZy11dGlscyc7XG5cbmNvbnN0IHRlbmFuY3lQbGFjZWhvbGRlciA9ICd7MH0nO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50VGVuYW5jeU5hbWUoYXBwQmFzZVVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKGFwcEJhc2VVcmwuY2hhckF0KGFwcEJhc2VVcmwubGVuZ3RoIC0gMSkgIT09ICcvJykgYXBwQmFzZVVybCArPSAnLyc7XG5cbiAgY29uc3QgcGFyc2VUb2tlbnMgPSBjcmVhdGVUb2tlblBhcnNlcihhcHBCYXNlVXJsKTtcbiAgY29uc3QgdG9rZW4gPSB0ZW5hbmN5UGxhY2Vob2xkZXIucmVwbGFjZSgvW317XS9nLCAnJyk7XG4gIHJldHVybiBwYXJzZVRva2Vucyh3aW5kb3cubG9jYXRpb24uaHJlZilbdG9rZW5dPy5bMF07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZVRlbmFudEZyb21VcmwoaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gIGNvbnN0IGVudmlyb25tZW50U2VydmljZSA9IGluamVjdG9yLmdldChFbnZpcm9ubWVudFNlcnZpY2UpO1xuICBjb25zdCBtdWx0aVRlbmFuY3lTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0KE11bHRpVGVuYW5jeVNlcnZpY2UpO1xuICBjb25zdCBhYnBUZW5hbnRTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0KEFicFRlbmFudFNlcnZpY2UpO1xuXG4gIGNvbnN0IGJhc2VVcmwgPSBlbnZpcm9ubWVudFNlcnZpY2UuZ2V0RW52aXJvbm1lbnQoKT8uYXBwbGljYXRpb24/LmJhc2VVcmwgfHwgJyc7XG4gIGNvbnN0IHRlbmFuY3lOYW1lID0gZ2V0Q3VycmVudFRlbmFuY3lOYW1lKGJhc2VVcmwpO1xuXG4gIGlmICh0ZW5hbmN5TmFtZSkge1xuICAgIG11bHRpVGVuYW5jeVNlcnZpY2UuaXNUZW5hbnRCb3hWaXNpYmxlID0gZmFsc2U7XG4gICAgc2V0RW52aXJvbm1lbnQoaW5qZWN0b3IsIHRlbmFuY3lOYW1lKTtcblxuICAgIHJldHVybiBvZihudWxsKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PiBhYnBUZW5hbnRTZXJ2aWNlLmZpbmRUZW5hbnRCeU5hbWUodGVuYW5jeU5hbWUsIHsgX190ZW5hbnQ6ICcnIH0pKSxcbiAgICAgICAgdGFwKHJlcyA9PiB7XG4gICAgICAgICAgbXVsdGlUZW5hbmN5U2VydmljZS5kb21haW5UZW5hbnQgPSByZXMuc3VjY2Vzc1xuICAgICAgICAgICAgPyAoeyBpZDogcmVzLnRlbmFudElkLCBuYW1lOiByZXMubmFtZSB9IGFzIEN1cnJlbnRUZW5hbnREdG8pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH0pLFxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG5mdW5jdGlvbiBzZXRFbnZpcm9ubWVudChpbmplY3RvcjogSW5qZWN0b3IsIHRlbmFuY3lOYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgZW52aXJvbm1lbnRTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0KEVudmlyb25tZW50U2VydmljZSk7XG5cbiAgY29uc3QgZW52aXJvbm1lbnQgPSBjbG9uZShlbnZpcm9ubWVudFNlcnZpY2UuZ2V0RW52aXJvbm1lbnQoKSkgYXMgRW52aXJvbm1lbnQ7XG5cbiAgaWYgKGVudmlyb25tZW50LmFwcGxpY2F0aW9uLmJhc2VVcmwpIHtcbiAgICBlbnZpcm9ubWVudC5hcHBsaWNhdGlvbi5iYXNlVXJsID0gZW52aXJvbm1lbnQuYXBwbGljYXRpb24uYmFzZVVybC5yZXBsYWNlKFxuICAgICAgdGVuYW5jeVBsYWNlaG9sZGVyLFxuICAgICAgdGVuYW5jeU5hbWUsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChlbnZpcm9ubWVudC5vQXV0aENvbmZpZy5yZWRpcmVjdFVyaSkge1xuICAgIGVudmlyb25tZW50Lm9BdXRoQ29uZmlnLnJlZGlyZWN0VXJpID0gZW52aXJvbm1lbnQub0F1dGhDb25maWcucmVkaXJlY3RVcmkucmVwbGFjZShcbiAgICAgIHRlbmFuY3lQbGFjZWhvbGRlcixcbiAgICAgIHRlbmFuY3lOYW1lLFxuICAgICk7XG4gIH1cblxuICBlbnZpcm9ubWVudC5vQXV0aENvbmZpZy5pc3N1ZXIgPSBlbnZpcm9ubWVudC5vQXV0aENvbmZpZy5pc3N1ZXIucmVwbGFjZShcbiAgICB0ZW5hbmN5UGxhY2Vob2xkZXIsXG4gICAgdGVuYW5jeU5hbWUsXG4gICk7XG5cbiAgT2JqZWN0LmtleXMoZW52aXJvbm1lbnQuYXBpcykuZm9yRWFjaChhcGkgPT4ge1xuICAgIE9iamVjdC5rZXlzKGVudmlyb25tZW50LmFwaXNbYXBpXSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgZW52aXJvbm1lbnQuYXBpc1thcGldW2tleV0gPSBlbnZpcm9ubWVudC5hcGlzW2FwaV1ba2V5XS5yZXBsYWNlKFxuICAgICAgICB0ZW5hbmN5UGxhY2Vob2xkZXIsXG4gICAgICAgIHRlbmFuY3lOYW1lLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudmlyb25tZW50U2VydmljZS5zZXRTdGF0ZShlbnZpcm9ubWVudCk7XG59XG4iXX0=