import { __awaiter } from "tslib";
import { differentLocales } from '@abp/ng.core';
import { isDevMode } from '@angular/core';
let localeMap = {};
export function registerLocale({ cultureNameLocaleFileMap = {}, errorHandlerFn = defaultLocalErrorHandlerFn, } = {}) {
    return (locale) => {
        localeMap = Object.assign(Object.assign({}, differentLocales), cultureNameLocaleFileMap);
        return new Promise((resolve, reject) => {
            return import(
            /* webpackChunkName: "_locale-[request]"*/
            /* webpackInclude: /[/\\](ar|cs|en|en-GB|fr|pt|tr|ru|hu|sl|zh-Hans|zh-Hant).js/ */
            /* webpackExclude: /[/\\]global|extra/ */
            `@angular/common/locales/${localeMap[locale] || locale}.js`)
                .then(resolve)
                .catch(error => {
                errorHandlerFn({
                    resolve,
                    reject,
                    error,
                    locale,
                });
            });
        });
    };
}
const extraLocales = {};
export function storeLocaleData(data, localeId) {
    extraLocales[localeId] = data;
}
export function defaultLocalErrorHandlerFn({ locale, resolve }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (extraLocales[locale]) {
            resolve({ default: extraLocales[localeMap[locale] || locale] });
            return;
        }
        if (isDevMode) {
            console.error(`Cannot find the ${locale} locale file. You can check how can add new culture at https://docs.abp.io/en/abp/latest/UI/Angular/Localization#adding-a-new-culture`);
        }
        resolve();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItbG9jYWxlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvbG9jYWxlL3NyYy8iLCJzb3VyY2VzIjpbInV0aWxzL3JlZ2lzdGVyLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTMUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBT25CLE1BQU0sVUFBVSxjQUFjLENBQzVCLEVBQ0Usd0JBQXdCLEdBQUcsRUFBRSxFQUM3QixjQUFjLEdBQUcsMEJBQTBCLE1BQ3pDLEVBQXdCO0lBRTVCLE9BQU8sQ0FBQyxNQUFjLEVBQWdCLEVBQUU7UUFDdEMsU0FBUyxtQ0FBUSxnQkFBZ0IsR0FBSyx3QkFBd0IsQ0FBRSxDQUFDO1FBRWpFLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsT0FBTyxNQUFNO1lBQ1gsMENBQTBDO1lBQzFDLGtGQUFrRjtZQUNsRix5Q0FBeUM7WUFDekMsMkJBQTJCLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLEtBQUssQ0FDNUQ7aUJBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQztpQkFDYixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2IsY0FBYyxDQUFDO29CQUNiLE9BQU87b0JBQ1AsTUFBTTtvQkFDTixLQUFLO29CQUNMLE1BQU07aUJBQ1AsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDeEIsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFTLEVBQUUsUUFBZ0I7SUFDekQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNoQyxDQUFDO0FBRUQsTUFBTSxVQUFnQiwwQkFBMEIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQTBCOztRQUMxRixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QixPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEUsT0FBTztTQUNSO1FBRUQsSUFBSSxTQUFTLEVBQUU7WUFDYixPQUFPLENBQUMsS0FBSyxDQUNYLG1CQUFtQixNQUFNLHVJQUF1SSxDQUNqSyxDQUFDO1NBQ0g7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpZmZlcmVudExvY2FsZXMgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHsgcmVnaXN0ZXJMb2NhbGVEYXRhIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsZUVycm9ySGFuZGxlckRhdGEge1xuICByZXNvbHZlOiBhbnk7XG4gIHJlamVjdDogYW55O1xuICBlcnJvcjogYW55O1xuICBsb2NhbGU6IHN0cmluZztcbn1cblxubGV0IGxvY2FsZU1hcCA9IHt9O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdGVyTG9jYWxlRGF0YSB7XG4gIGN1bHR1cmVOYW1lTG9jYWxlRmlsZU1hcD86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIGVycm9ySGFuZGxlckZuPzogKGRhdGE6IExvY2FsZUVycm9ySGFuZGxlckRhdGEpID0+IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlKFxuICB7XG4gICAgY3VsdHVyZU5hbWVMb2NhbGVGaWxlTWFwID0ge30sXG4gICAgZXJyb3JIYW5kbGVyRm4gPSBkZWZhdWx0TG9jYWxFcnJvckhhbmRsZXJGbixcbiAgfSA9IHt9IGFzIFJlZ2lzdGVyTG9jYWxlRGF0YSxcbikge1xuICByZXR1cm4gKGxvY2FsZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBsb2NhbGVNYXAgPSB7IC4uLmRpZmZlcmVudExvY2FsZXMsIC4uLmN1bHR1cmVOYW1lTG9jYWxlRmlsZU1hcCB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJldHVybiBpbXBvcnQoXG4gICAgICAgIC8qIHdlYnBhY2tDaHVua05hbWU6IFwiX2xvY2FsZS1bcmVxdWVzdF1cIiovXG4gICAgICAgIC8qIHdlYnBhY2tJbmNsdWRlOiAvWy9cXFxcXShhcnxjc3xlbnxlbi1HQnxmcnxwdHx0cnxydXxodXxzbHx6aC1IYW5zfHpoLUhhbnQpLmpzLyAqL1xuICAgICAgICAvKiB3ZWJwYWNrRXhjbHVkZTogL1svXFxcXF1nbG9iYWx8ZXh0cmEvICovXG4gICAgICAgIGBAYW5ndWxhci9jb21tb24vbG9jYWxlcy8ke2xvY2FsZU1hcFtsb2NhbGVdIHx8IGxvY2FsZX0uanNgXG4gICAgICApXG4gICAgICAgIC50aGVuKHJlc29sdmUpXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgZXJyb3JIYW5kbGVyRm4oe1xuICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuY29uc3QgZXh0cmFMb2NhbGVzID0ge307XG5leHBvcnQgZnVuY3Rpb24gc3RvcmVMb2NhbGVEYXRhKGRhdGE6IGFueSwgbG9jYWxlSWQ6IHN0cmluZykge1xuICBleHRyYUxvY2FsZXNbbG9jYWxlSWRdID0gZGF0YTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbEVycm9ySGFuZGxlckZuKHsgbG9jYWxlLCByZXNvbHZlIH06IExvY2FsZUVycm9ySGFuZGxlckRhdGEpIHtcbiAgaWYgKGV4dHJhTG9jYWxlc1tsb2NhbGVdKSB7XG4gICAgcmVzb2x2ZSh7IGRlZmF1bHQ6IGV4dHJhTG9jYWxlc1tsb2NhbGVNYXBbbG9jYWxlXSB8fCBsb2NhbGVdIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc0Rldk1vZGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYENhbm5vdCBmaW5kIHRoZSAke2xvY2FsZX0gbG9jYWxlIGZpbGUuIFlvdSBjYW4gY2hlY2sgaG93IGNhbiBhZGQgbmV3IGN1bHR1cmUgYXQgaHR0cHM6Ly9kb2NzLmFicC5pby9lbi9hYnAvbGF0ZXN0L1VJL0FuZ3VsYXIvTG9jYWxpemF0aW9uI2FkZGluZy1hLW5ldy1jdWx0dXJlYCxcbiAgICApO1xuICB9XG5cbiAgcmVzb2x2ZSgpO1xufVxuIl19