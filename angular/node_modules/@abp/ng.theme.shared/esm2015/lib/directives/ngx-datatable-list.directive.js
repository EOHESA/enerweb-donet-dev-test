import { LocalizationService } from '@abp/ng.core';
import { ChangeDetectorRef, Directive, Input, } from '@angular/core';
import { DatatableComponent } from '@swimlane/ngx-datatable';
import { Subscription } from 'rxjs';
export class NgxDatatableListDirective {
    constructor(table, cdRef, localizationService) {
        this.table = table;
        this.cdRef = cdRef;
        this.localizationService = localizationService;
        this.subscription = new Subscription();
        this.querySubscription = new Subscription();
        this.setInitialValues();
    }
    setInitialValues() {
        this.table.externalPaging = true;
        this.table.externalSorting = true;
        this.table.messages = {
            emptyMessage: this.localizationService.localizeSync('AbpUi', 'NoDataAvailableInDatatable', 'No data available'),
            totalMessage: this.localizationService.localizeSync('AbpUi', 'Total', 'total'),
            selectedMessage: this.localizationService.localizeSync('AbpUi', 'Selected', 'selected'),
        };
    }
    subscribeToPage() {
        const sub = this.table.page.subscribe(({ offset }) => {
            this.list.page = offset;
            this.table.offset = offset;
        });
        this.subscription.add(sub);
    }
    subscribeToSort() {
        const sub = this.table.sort.subscribe(({ sorts: [{ prop, dir }] }) => {
            if (prop === this.list.sortKey && this.list.sortOrder === 'desc') {
                this.list.sortKey = '';
                this.list.sortOrder = '';
                this.table.sorts = [];
                this.cdRef.detectChanges();
            }
            else {
                this.list.sortKey = prop;
                this.list.sortOrder = dir;
            }
        });
        this.subscription.add(sub);
    }
    subscribeToQuery() {
        if (!this.querySubscription.closed)
            this.querySubscription.unsubscribe();
        this.querySubscription = this.list.query$.subscribe(() => {
            const offset = this.list.page;
            if (this.table.offset !== offset)
                this.table.offset = offset;
        });
    }
    ngOnChanges({ list }) {
        this.subscribeToQuery();
        if (!list.firstChange)
            return;
        const { maxResultCount, page } = list.currentValue;
        this.table.limit = maxResultCount;
        this.table.offset = page;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.querySubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToPage();
        this.subscribeToSort();
    }
}
NgxDatatableListDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: 'ngx-datatable[list]',
                exportAs: 'ngxDatatableList',
            },] }
];
NgxDatatableListDirective.ctorParameters = () => [
    { type: DatatableComponent },
    { type: ChangeDetectorRef },
    { type: LocalizationService }
];
NgxDatatableListDirective.propDecorators = {
    list: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGF0YWJsZS1saXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1zaGFyZWQvc3JjLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvbmd4LWRhdGF0YWJsZS1saXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsbUJBQW1CLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEUsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsS0FBSyxHQUtOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFPcEMsTUFBTSxPQUFPLHlCQUF5QjtJQU1wQyxZQUNVLEtBQXlCLEVBQ3pCLEtBQXdCLEVBQ3hCLG1CQUF3QztRQUZ4QyxVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQUN6QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUN4Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBUjFDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsQyxzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBUzdDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRztZQUNwQixZQUFZLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FDakQsT0FBTyxFQUNQLDRCQUE0QixFQUM1QixtQkFBbUIsQ0FDcEI7WUFDRCxZQUFZLEVBQUUsSUFBSSxDQUFD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QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7O1lBbkZGLFNBQVMsU0FBQztnQkFDVCwyQkFBMkI7Z0JBQzNCLFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLFFBQVEsRUFBRSxrQkFBa0I7YUFDN0I7OztZQVBRLGtCQUFrQjtZQVJ6QixpQkFBaUI7WUFGRyxtQkFBbUI7OzttQkFzQnRDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaXN0U2VydmljZSwgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhdGFibGVDb21wb25lbnQgfSBmcm9tICdAc3dpbWxhbmUvbmd4LWRhdGF0YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICBzZWxlY3RvcjogJ25neC1kYXRhdGFibGVbbGlzdF0nLFxuICBleHBvcnRBczogJ25neERhdGF0YWJsZUxpc3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hEYXRhdGFibGVMaXN0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICBwcml2YXRlIHF1ZXJ5U3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIEBJbnB1dCgpIGxpc3Q6IExpc3RTZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGFibGU6IERhdGF0YWJsZUNvbXBvbmVudCxcbiAgICBwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvblNlcnZpY2U6IExvY2FsaXphdGlvblNlcnZpY2UsXG4gICkge1xuICAgIHRoaXMuc2V0SW5pdGlhbFZhbHVlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRJbml0aWFsVmFsdWVzKCkge1xuICAgIHRoaXMudGFibGUuZXh0ZXJuYWxQYWdpbmcgPSB0cnVlO1xuICAgIHRoaXMudGFibGUuZXh0ZXJuYWxTb3J0aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnRhYmxlLm1lc3NhZ2VzID0ge1xuICAgICAgZW1wdHlNZXNzYWdlOiB0aGlzLmxvY2FsaXphdGlvblNlcnZpY2UubG9jYWxpemVTeW5jKFxuICAgICAgICAnQWJwVWknLFxuICAgICAgICAnTm9EYXRhQXZhaWxhYmxlSW5EYXRhdGFibGUnLFxuICAgICAgICAnTm8gZGF0YSBhdmFpbGFibGUnLFxuICAgICAgKSxcbiAgICAgIHRvdGFsTWVzc2FnZTogdGhpcy5sb2NhbGl6YXRpb25TZXJ2aWNlLmxvY2FsaXplU3luYygnQWJwVWknLCAnVG90YWwnLCAndG90YWwnKSxcbiAgICAgIHNlbGVjdGVkTWVzc2FnZTogdGhpcy5sb2NhbGl6YXRpb25TZXJ2aWNlLmxvY2FsaXplU3luYygnQWJwVWknLCAnU2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb1BhZ2UoKSB7XG4gICAgY29uc3Qgc3ViID0gdGhpcy50YWJsZS5wYWdlLnN1YnNjcmliZSgoeyBvZmZzZXQgfSkgPT4ge1xuICAgICAgdGhpcy5saXN0LnBhZ2UgPSBvZmZzZXQ7XG4gICAgICB0aGlzLnRhYmxlLm9mZnNldCA9IG9mZnNldDtcbiAgICB9KTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoc3ViKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9Tb3J0KCkge1xuICAgIGNvbnN0IHN1YiA9IHRoaXMudGFibGUuc29ydC5zdWJzY3JpYmUoKHsgc29ydHM6IFt7IHByb3AsIGRpciB9XSB9KSA9PiB7XG4gICAgICBpZiAocHJvcCA9PT0gdGhpcy5saXN0LnNvcnRLZXkgJiYgdGhpcy5saXN0LnNvcnRPcmRlciA9PT0gJ2Rlc2MnKSB7XG4gICAgICAgIHRoaXMubGlzdC5zb3J0S2V5ID0gJyc7XG4gICAgICAgIHRoaXMubGlzdC5zb3J0T3JkZXIgPSAnJztcbiAgICAgICAgdGhpcy50YWJsZS5zb3J0cyA9IFtdO1xuICAgICAgICB0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGlzdC5zb3J0S2V5ID0gcHJvcDtcbiAgICAgICAgdGhpcy5saXN0LnNvcnRPcmRlciA9IGRpcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoc3ViKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9RdWVyeSgpIHtcbiAgICBpZiAoIXRoaXMucXVlcnlTdWJzY3JpcHRpb24uY2xvc2VkKSB0aGlzLnF1ZXJ5U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cbiAgICB0aGlzLnF1ZXJ5U3Vic2NyaXB0aW9uID0gdGhpcy5saXN0LnF1ZXJ5JC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5saXN0LnBhZ2U7XG4gICAgICBpZiAodGhpcy50YWJsZS5vZmZzZXQgIT09IG9mZnNldCkgdGhpcy50YWJsZS5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyh7IGxpc3QgfTogU2ltcGxlQ2hhbmdlcykge1xuICAgIHRoaXMuc3Vic2NyaWJlVG9RdWVyeSgpO1xuXG4gICAgaWYgKCFsaXN0LmZpcnN0Q2hhbmdlKSByZXR1cm47XG5cbiAgICBjb25zdCB7IG1heFJlc3VsdENvdW50LCBwYWdlIH0gPSBsaXN0LmN1cnJlbnRWYWx1ZTtcbiAgICB0aGlzLnRhYmxlLmxpbWl0ID0gbWF4UmVzdWx0Q291bnQ7XG4gICAgdGhpcy50YWJsZS5vZmZzZXQgPSBwYWdlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnF1ZXJ5U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmliZVRvUGFnZSgpO1xuICAgIHRoaXMuc3Vic2NyaWJlVG9Tb3J0KCk7XG4gIH1cbn1cbiJdfQ==