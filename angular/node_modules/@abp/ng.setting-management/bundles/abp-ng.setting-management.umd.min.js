!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ngxs/store"),require("rxjs"),require("@angular/router")):"function"==typeof define&&define.amd?define("@abp/ng.setting-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ngxs/store","rxjs","@angular/router"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["setting-management"]={}),e.ng_core,e.ng_theme_shared,e.ng.core,e.store,e.rxjs,e.ng.router)}(this,(function(e,t,n,a,o,i,r){"use strict";var c=function(e){this.payload=e};c.type="[SettingManagement] Set Selected Tab";function s(e,t,n,a){var o,i=arguments.length,r=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,a);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(r=(i<3?o(r):i>3?o(t,n,r):o(t,n))||r);return i>3&&r&&Object.defineProperty(t,n,r),r}Object.create;Object.create;e.ɵc=function(){function e(){}return e.getSelectedTab=function(e){return e.selectedTab},e.prototype.settingManagementAction=function(e,t){(0,e.patchState)({selectedTab:t.payload})},e}(),e.ɵc.decorators=[{type:a.Injectable}],s([o.Action(c)],e.ɵc.prototype,"settingManagementAction",null),s([o.Selector()],e.ɵc,"getSelectedTab",null),e.ɵc=s([o.State({name:"SettingManagementState",defaults:{}})],e.ɵc);var l=function(){function t(e,t){this.store=e,this.settingTabsService=t,this.subscription=new i.Subscription,this.settings=[],this.trackByFn=function(e,t){return t.name}}return Object.defineProperty(t.prototype,"selected",{get:function(){var t=this.store.selectSnapshot(e.ɵc.getSelectedTab);return(null==t?void 0:t.component)?t:this.settings[0]||{}},set:function(e){this.store.dispatch(new c(e))},enumerable:!1,configurable:!0}),t.prototype.ngOnDestroy=function(){this.subscription.unsubscribe()},t.prototype.ngOnInit=function(){var e=this;this.subscription.add(this.settingTabsService.visible$.subscribe((function(t){e.settings=t,e.selected||(e.selected=e.settings[0])})))},t}();l.decorators=[{type:a.Component,args:[{selector:"abp-setting-management",template:'<div class="row entry-row">\n  <div class="col-auto">\n    <h1 class="content-header-title">{{ \'AbpSettingManagement::Settings\' | abpLocalization }}</h1>\n  </div>\n  <div id="breadcrumb" class="col-lg-auto pl-lg-0">\n    <abp-breadcrumb></abp-breadcrumb>\n  </div>\n  <div class="col">\n    <div class="text-lg-right pt-2" id="AbpContentToolbar"></div>\n  </div>\n</div>\n\n<div id="SettingManagementWrapper">\n  <div class="card">\n    <div class="card-body">\n      <div class="row">\n        <div class="col-12 col-md-3">\n          <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\n            <ng-container *abpFor="let setting of settings; trackBy: trackByFn">\n              <li\n                (click)="selected = setting"\n                class="nav-item pointer"\n                *abpPermission="setting.requiredPolicy"\n              >\n                <a\n                  class="nav-link"\n                  [id]="setting.name + \'-tab\'"\n                  role="tab"\n                  [class.active]="setting.name === selected.name"\n                  >{{ setting.name | abpLocalization }}</a\n                >\n              </li>\n            </ng-container>\n          </ul>\n        </div>\n        <div class="col-12 col-md-9">\n          <div *ngIf="settings.length" class="tab-content">\n            <div class="tab-pane fade show active" [id]="selected.name + \'-tab\'" role="tabpanel">\n              <ng-container *ngComponentOutlet="selected.component"></ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'}]}],l.ctorParameters=function(){return[{type:o.Store},{type:t.SettingTabsService}]};var d={requiredPolicy:"AbpAccount.SettingManagement",replaceableComponent:{key:"SettingManagement.SettingManagementComponent",defaultComponent:l}},u=[{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard],children:[{path:"",component:t.ReplaceableRouteContainerComponent,data:d}]}],g=function(){};g.decorators=[{type:a.NgModule,args:[{imports:[r.RouterModule.forChild(u)],exports:[r.RouterModule]}]}];var p=function(){function e(){}return e.forChild=function(){return{ngModule:e,providers:[]}},e.forLazy=function(){return new t.LazyModuleFactory(e.forChild())},e}();p.decorators=[{type:a.NgModule,args:[{declarations:[l],exports:[l],imports:[g,t.CoreModule,n.ThemeSharedModule,o.NgxsModule.forFeature([e.ɵc])]}]}],e.SettingManagementComponent=l,e.SettingManagementModule=p,e.ɵa=g,e.ɵd=c,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.setting-management.umd.min.js.map