import { CoreModule } from '@abp/ng.core';
import { Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ContentChild, Output, Input, NgModule } from '@angular/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';
import { NzTreeModule } from 'ng-zorro-antd/tree';
import { of } from 'rxjs';

class TreeNodeTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
TreeNodeTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[abpTreeNodeTemplate],[abp-tree-node-template]',
            },] }
];
TreeNodeTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];

class ExpandedIconTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
ExpandedIconTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[abpTreeExpandedIconTemplate],[abp-tree-expanded-icon-template]',
            },] }
];
ExpandedIconTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];

class TreeComponent {
    constructor() {
        this.dropdowns = {};
        this.checkedKeysChange = new EventEmitter();
        this.expandedKeysChange = new EventEmitter();
        this.selectedNodeChange = new EventEmitter();
        this.dropOver = new EventEmitter();
        this.noAnimation = true;
        this.checkedKeys = [];
        this.nodes = [];
        this.expandedKeys = [];
        this.isNodeSelected = node => { var _a; return ((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id) === node.key; };
        this.beforeDrop = (event) => {
            this.dropPosition = event.pos;
            return of(false);
        };
    }
    onSelectedNodeChange(node) {
        this.selectedNode = node.origin.entity;
        this.selectedNodeChange.emit(node.origin.entity);
    }
    onCheckboxChange(event) {
        this.checkedKeys = [...event.keys];
        this.checkedKeysChange.emit(event.keys);
    }
    onExpandedKeysChange(event) {
        this.expandedKeys = [...event.keys];
        this.expandedKeysChange.emit(event.keys);
    }
    onDrop(event) {
        event.event.stopPropagation();
        event.event.preventDefault();
        event.pos = this.dropPosition;
        this.dropOver.emit(event);
    }
    initDropdown(key, dropdown) {
        this.dropdowns[key] = dropdown;
    }
}
TreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-tree',
                template: "<nz-tree\n  [nzBeforeDrop]=\"beforeDrop\"\n  [nzDraggable]=\"draggable\"\n  [nzCheckStrictly]=\"checkStrictly\"\n  [nzCheckable]=\"checkable\"\n  [nzCheckedKeys]=\"checkedKeys\"\n  [nzData]=\"nodes\"\n  [nzTreeTemplate]=\"treeTemplate\"\n  [nzExpandedKeys]=\"expandedKeys\"\n  [nzExpandedIcon]=\"expandedIconTemplate?.template || defaultIconTemplate\"\n  (nzExpandChange)=\"onExpandedKeysChange($event)\"\n  (nzCheckBoxChange)=\"onCheckboxChange($event)\"\n  (nzOnDrop)=\"onDrop($event)\"\n  [nzNoAnimation]=\"noAnimation\"\n  (nzContextMenu)=\"dropdowns[$event.node?.key]?.toggle()\"\n></nz-tree>\n<ng-template #treeTemplate let-node>\n  <div\n    class=\"node-wrapper\"\n    [class.selected]=\"isNodeSelected(node)\"\n    [title]=\"node.title\"\n    (click)=\"onSelectedNodeChange(node)\"\n  >\n    <ng-container *ngTemplateOutlet=\"nodeTemplate; context: { $implicit: node }\"></ng-container>\n\n    <ng-template #nodeTemplate let-node>\n      <div class=\"d-inline-block\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            customNodeTemplate ? customNodeTemplate?.template : defaultNodeTemplate;\n            context: { $implicit: node }\n          \"\n        ></ng-container>\n      </div>\n\n      <div\n        #dropdown=\"ngbDropdown\"\n        *ngIf=\"menu\"\n        class=\"d-inline-block ml-1\"\n        ngbDropdown\n        placement=\"bottom\"\n        container=\"body\"\n        (abpInit)=\"initDropdown(node.key, dropdown)\"\n      >\n        <i\n          class=\"fas fa-caret-down text-muted\"\n          ngbDropdownToggle\n          [class.dropdown-toggle]=\"false\"\n        ></i>\n        <div ngbDropdownMenu>\n          <ng-template *ngTemplateOutlet=\"menu; context: { $implicit: node }\"></ng-template>\n        </div>\n      </div>\n    </ng-template>\n\n    <ng-template #defaultNodeTemplate let-node>\n      <span>{{ node.title }}</span>\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #defaultIconTemplate let-node let-origin=\"origin\">\n  <i style=\"line-height: 28px\" aria-hidden=\"true\">\n    <ng-container *ngTemplateOutlet=\"node.isExpanded ? minusIcon : plusIcon\"></ng-container\n  ></i>\n</ng-template>\n\n<ng-template #minusIcon>\n  <svg\n    width=\"15\"\n    height=\"15\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill-rule=\"evenodd\"\n    clip-rule=\"evenodd\"\n  >\n    <path\n      d=\"M11.5 0c6.347 0 11.5 5.153 11.5 11.5s-5.153 11.5-11.5 11.5-11.5-5.153-11.5-11.5 5.153-11.5 11.5-11.5zm0 1c5.795 0 10.5 4.705 10.5 10.5s-4.705 10.5-10.5 10.5-10.5-4.705-10.5-10.5 4.705-10.5 10.5-10.5zm-6.5 10h13v1h-13v-1z\"\n    />\n  </svg>\n</ng-template>\n\n<ng-template #plusIcon>\n  <svg\n    width=\"15\"\n    height=\"15\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill-rule=\"evenodd\"\n    clip-rule=\"evenodd\"\n  >\n    <path\n      d=\"M11.5 0c6.347 0 11.5 5.153 11.5 11.5s-5.153 11.5-11.5 11.5-11.5-5.153-11.5-11.5 5.153-11.5 11.5-11.5zm0 1c5.795 0 10.5 4.705 10.5 10.5s-4.705 10.5-10.5 10.5-10.5-4.705-10.5-10.5 4.705-10.5 10.5-10.5zm.5 10h6v1h-6v6h-1v-6h-6v-1h6v-6h1v6z\"\n    />\n  </svg>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".ant-tree-checkbox,.ant-tree-checkbox-wrapper{box-sizing:border-box;display:inline-block;font-feature-settings:\"tnum\";font-size:14px;font-variant:tabular-nums;list-style:none}@-webkit-keyframes antCheckboxEffect{0%{opacity:.5;transform:scale(1)}to{opacity:0;transform:scale(1.6)}}@keyframes antCheckboxEffect{0%{opacity:.5;transform:scale(1)}to{opacity:0;transform:scale(1.6)}}.ant-tree-treenode-leaf-last .ant-tree-switcher-leaf-line:before{bottom:auto!important;height:14px!important;top:auto!important}.ant-tree.ant-tree-directory .ant-tree-treenode{position:relative}.ant-tree.ant-tree-directory .ant-tree-treenode:before{bottom:4px;content:\"\";left:0;pointer-events:none;position:absolute;right:0;top:0;transition:background-color .3s}.ant-tree.ant-tree-directory .ant-tree-treenode:hover:before{background:#f5f5f5}.ant-tree.ant-tree-directory .ant-tree-treenode>*{z-index:1}.ant-tree.ant-tree-directory .ant-tree-treenode .ant-tree-switcher{transition:color .3s}.ant-tree.ant-tree-directory .ant-tree-treenode .ant-tree-node-content-wrapper{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;border-radius:0;user-select:none}.ant-tree.ant-tree-directory .ant-tree-treenode .ant-tree-node-content-wrapper:hover{background:0 0}.ant-tree.ant-tree-directory .ant-tree-treenode .ant-tree-node-content-wrapper.ant-tree-node-selected{background:0 0;color:#fff}.ant-tree.ant-tree-directory .ant-tree-treenode-selected:before,.ant-tree.ant-tree-directory .ant-tree-treenode-selected:hover:before{background:#1890ff}.ant-tree.ant-tree-directory .ant-tree-treenode-selected .ant-tree-switcher{color:#fff}.ant-tree.ant-tree-directory .ant-tree-treenode-selected .ant-tree-node-content-wrapper{background:0 0;color:#fff}.ant-tree-checkbox{color:rgba(0,0,0,.85);cursor:pointer;line-height:1;outline:0;padding:0;position:relative;vertical-align:middle;white-space:nowrap}.ant-tree-checkbox-input:focus+.ant-tree-checkbox-inner,.ant-tree-checkbox-wrapper:hover .ant-tree-checkbox-inner,.ant-tree-checkbox:hover .ant-tree-checkbox-inner{border-color:#1890ff}.ant-tree-checkbox-checked:after{-webkit-animation:antCheckboxEffect .36s ease-in-out;-webkit-animation-fill-mode:backwards;animation:antCheckboxEffect .36s ease-in-out;animation-fill-mode:backwards;border:1px solid #1890ff;border-radius:2px;content:\"\";height:100%;left:0;position:absolute;top:0;visibility:hidden;width:100%}.ant-tree-checkbox-wrapper:hover .ant-tree-checkbox:after,.ant-tree-checkbox:hover:after{visibility:visible}.ant-tree-checkbox-inner{background-color:#fff;border:1px solid #d9d9d9;border-collapse:separate;border-radius:2px;direction:ltr;display:block;height:16px;left:0;position:relative;top:0;transition:all .3s;width:16px}.ant-tree-rtl,.ant-tree .ant-tree-treenode-rtl{direction:rtl}.ant-tree-checkbox-inner:after{border:2px solid #fff;border-left:0;border-top:0;content:\" \";display:table;height:9.14px;left:22%;opacity:0;position:absolute;top:50%;transform:rotate(45deg) scale(0) translate(-50%,-50%);transition:all .1s cubic-bezier(.71,-.46,.88,.6),opacity .1s;width:5.71px}.ant-tree-checkbox-input{bottom:0;cursor:pointer;height:100%;left:0;opacity:0;position:absolute;right:0;top:0;width:100%;z-index:1}.ant-tree-checkbox-disabled,.ant-tree-checkbox-disabled+span,.ant-tree-checkbox-disabled .ant-tree-checkbox-input{cursor:not-allowed}.ant-tree-checkbox-checked .ant-tree-checkbox-inner:after{border:2px solid #fff;border-left:0;border-top:0;content:\" \";display:table;opacity:1;position:absolute;transform:rotate(45deg) scale(1) translate(-50%,-50%);transition:all .2s cubic-bezier(.12,.4,.29,1.46) .1s}.ant-tree-checkbox-checked .ant-tree-checkbox-inner{background-color:#1890ff;border-color:#1890ff}.ant-tree-checkbox-disabled.ant-tree-checkbox-checked .ant-tree-checkbox-inner:after{-webkit-animation-name:none;animation-name:none;border-color:rgba(0,0,0,.25)}.ant-tree-checkbox-disabled .ant-tree-checkbox-inner{background-color:#f5f5f5;border-color:#d9d9d9!important}.ant-tree-checkbox-disabled .ant-tree-checkbox-inner:after{-webkit-animation-name:none;animation-name:none;border-collapse:separate;border-color:#f5f5f5}.ant-tree-checkbox-disabled+span{color:rgba(0,0,0,.25)}.ant-tree-checkbox-disabled:hover:after,.ant-tree-checkbox-wrapper:hover .ant-tree-checkbox-disabled:after{visibility:hidden}.ant-tree-checkbox-wrapper{color:rgba(0,0,0,.85);cursor:pointer;line-height:unset;margin:0;padding:0}.ant-tree-checkbox-wrapper.ant-tree-checkbox-wrapper-disabled{cursor:not-allowed}.ant-tree-checkbox-wrapper+.ant-tree-checkbox-wrapper{margin-left:8px}.ant-tree-checkbox+span{padding-left:8px;padding-right:8px}.ant-tree,.ant-tree-checkbox-group{box-sizing:border-box;color:rgba(0,0,0,.85);font-feature-settings:\"tnum\";font-size:14px;font-variant:tabular-nums;line-height:1.5715;list-style:none;padding:0}.ant-tree-checkbox-group{display:inline-block;margin:0}.ant-tree-checkbox-group-item{display:inline-block;margin-right:8px}.ant-tree-checkbox-group-item:last-child{margin-right:0}.ant-tree-checkbox-group-item+.ant-tree-checkbox-group-item{margin-left:0}.ant-tree-checkbox-indeterminate .ant-tree-checkbox-inner{background-color:#fff;border-color:#d9d9d9}.ant-tree-checkbox-indeterminate .ant-tree-checkbox-inner:after{background-color:#1890ff;border:0;content:\" \";height:8px;left:50%;opacity:1;top:50%;transform:translate(-50%,-50%) scale(1);width:8px}.ant-tree-checkbox-indeterminate.ant-tree-checkbox-disabled .ant-tree-checkbox-inner:after{background-color:rgba(0,0,0,.25);border-color:rgba(0,0,0,.25)}.ant-tree{background:#fff;border-radius:2px;margin:0;transition:background-color .3s}.ant-tree-focused:not(:hover):not(.ant-tree-active-focused){background:#e6f7ff}.ant-tree-list-holder-inner{align-items:flex-start}.ant-tree.ant-tree-block-node .ant-tree-list-holder-inner{align-items:stretch}.ant-tree.ant-tree-block-node .ant-tree-list-holder-inner .ant-tree-node-content-wrapper{flex:auto}.ant-tree .ant-tree-treenode{align-items:flex-start;display:flex;outline:0;padding:0 0 4px}.ant-tree .ant-tree-treenode-disabled .ant-tree-node-content-wrapper{color:rgba(0,0,0,.25);cursor:not-allowed}.ant-tree .ant-tree-treenode-disabled .ant-tree-node-content-wrapper:hover{background:0 0}.ant-tree .ant-tree-treenode-active .ant-tree-node-content-wrapper{background:#f5f5f5}.ant-tree-indent{-moz-user-select:none;-ms-grid-row-align:stretch;-ms-user-select:none;-webkit-user-select:none;align-self:stretch;user-select:none;white-space:nowrap}.ant-tree-indent-unit{display:inline-block;width:24px}.ant-tree-switcher{-moz-user-select:none;-ms-grid-row-align:stretch;-ms-user-select:none;-webkit-user-select:none;align-self:stretch;cursor:pointer;flex:none;line-height:24px;margin:0;position:relative;text-align:center;user-select:none;width:24px}.ant-tree-switcher .ant-select-tree-switcher-icon,.ant-tree-switcher .ant-tree-switcher-icon{display:inline-block;font-size:10px;vertical-align:baseline}.ant-tree-switcher .ant-select-tree-switcher-icon svg,.ant-tree-switcher .ant-tree-switcher-icon svg{transition:transform .3s}.ant-tree-switcher-noop{cursor:default}.ant-tree-switcher_close .ant-tree-switcher-icon svg{transform:rotate(-90deg)}.ant-tree-switcher-loading-icon{color:#1890ff}.ant-tree-switcher-leaf-line{display:inline-block;height:100%;position:relative;width:100%;z-index:1}.ant-tree-switcher-leaf-line:after,.ant-tree-switcher-leaf-line:before{content:\" \";margin-left:-1px;position:absolute}.ant-tree-switcher-leaf-line:before{border-left:1px solid #d9d9d9;bottom:-4px;top:0}.ant-tree-switcher-leaf-line:after{border-bottom:1px solid #d9d9d9;height:14px;width:10px}.ant-tree-checkbox{margin:4px 8px 0 0;top:auto}.ant-tree .ant-tree-node-content-wrapper{background:0 0;border-radius:2px;color:inherit;cursor:pointer;line-height:24px;margin:0;min-height:24px;padding:0 4px;position:relative;transition:all .3s,border 0s,line-height 0s,box-shadow 0s;z-index:auto}.ant-tree .ant-tree-node-content-wrapper:hover{background-color:#f5f5f5}.ant-tree .ant-tree-node-content-wrapper.ant-tree-node-selected{background-color:#bae7ff}.ant-tree .ant-tree-node-content-wrapper .ant-tree-iconEle{display:inline-block;height:24px;line-height:24px;text-align:center;vertical-align:top;width:24px}.ant-tree-show-line .ant-tree-indent-unit-end:before,.ant-tree .ant-tree-node-content-wrapper .ant-tree-iconEle:empty{display:none}.ant-tree-unselectable .ant-tree-node-content-wrapper:hover{background-color:transparent}.ant-tree-node-content-wrapper[draggable=true]{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;line-height:24px;user-select:none}.ant-tree-node-content-wrapper[draggable=true] .ant-tree-drop-indicator{background-color:#1890ff;border-radius:1px;height:2px;pointer-events:none;position:absolute;z-index:1}.ant-tree-node-content-wrapper[draggable=true] .ant-tree-drop-indicator:after{background-color:transparent;border:2px solid #1890ff;border-radius:50%;content:\"\";height:8px;left:-6px;position:absolute;top:-3px;width:8px}.ant-tree .ant-tree-treenode.drop-container>[draggable]{box-shadow:0 0 0 2px #1890ff}.ant-tree-show-line .ant-tree-indent-unit{height:100%;position:relative}.ant-tree-show-line .ant-tree-indent-unit:before{border-right:1px solid #d9d9d9;bottom:-4px;content:\"\";position:absolute;right:12px;top:0}.ant-tree-show-line .ant-tree-switcher{background:#fff}.ant-tree-show-line .ant-tree-switcher-line-icon{vertical-align:-.225em}.ant-tree-rtl .ant-tree-node-content-wrapper[draggable=true] .ant-tree-drop-indicator:after{left:unset;right:-6px}.ant-tree-rtl .ant-tree-switcher_close .ant-tree-switcher-icon svg{transform:rotate(90deg)}.ant-tree-rtl.ant-tree-show-line .ant-tree-indent-unit:before{border-left:1px solid #d9d9d9;border-right:none;left:-13px;right:auto}.ant-tree-rtl.ant-tree-checkbox,.ant-tree-select-dropdown-rtl .ant-select-tree-checkbox{margin:4px 0 0 8px}.font-highlight{color:#ff4d4f}.ant-tree-child-tree{overflow:hidden}nz-tree{display:block}", ".ant-tree{color:inherit}.ant-tree .ant-tree-node-content-wrapper.ant-tree-node-selected{background-color:transparent}.ant-tree .ant-tree-switcher{line-height:17px}.ant-tree .ant-tree-node-content-wrapper{padding:0;width:100%}.ant-tree .node-wrapper{border:1px solid transparent;border-radius:2px;cursor:pointer;display:inline-block;line-height:24px;margin:0;padding:0 5px 0 8px;position:relative;text-decoration:none;vertical-align:top;width:100%}.ant-tree .ellipsis{cursor:pointer;position:absolute;right:8px;top:1px}"]
            },] }
];
TreeComponent.propDecorators = {
    menu: [{ type: ContentChild, args: ['menu',] }],
    customNodeTemplate: [{ type: ContentChild, args: [TreeNodeTemplateDirective,] }],
    expandedIconTemplate: [{ type: ContentChild, args: [ExpandedIconTemplateDirective,] }],
    checkedKeysChange: [{ type: Output }],
    expandedKeysChange: [{ type: Output }],
    selectedNodeChange: [{ type: Output }],
    dropOver: [{ type: Output }],
    noAnimation: [{ type: Input }],
    draggable: [{ type: Input }],
    checkable: [{ type: Input }],
    checkStrictly: [{ type: Input }],
    checkedKeys: [{ type: Input }],
    nodes: [{ type: Input }],
    expandedKeys: [{ type: Input }],
    selectedNode: [{ type: Input }],
    isNodeSelected: [{ type: Input }],
    beforeDrop: [{ type: Input }]
};

const templates = [TreeNodeTemplateDirective, ExpandedIconTemplateDirective];
const exported = [...templates, TreeComponent];
class TreeModule {
}
TreeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, NzTreeModule, NgbDropdownModule, NzNoAnimationModule],
                exports: [...exported],
                declarations: [...exported],
            },] }
];

class BaseNode {
    constructor(id, parentId) {
        this.id = id;
        this.parentId = parentId;
    }
}
class TreeNode extends BaseNode {
    constructor(entity, nameResolver = ent => ent.displayName || ent.name) {
        super(entity.id, entity.parentId);
        this.entity = entity;
        this.nameResolver = nameResolver;
        this.icon = null;
        this.children = [];
        this.isLeaf = true;
        this.checked = false;
        this.selected = false;
        this.expanded = false;
        this.selectable = true;
        this.disabled = false;
        this.disableCheckbox = false;
        this.key = entity.id;
        this.title = nameResolver(entity);
    }
}
class TreeAdapter {
    constructor(list = []) {
        this.list = list;
        this.tree = createTreeFromList(this.list);
    }
    getList() {
        return this.list;
    }
    getTree() {
        return this.tree;
    }
    handleDrop({ key, parentNode }) {
        const index = this.list.findIndex(({ id }) => id === key);
        this.list[index].parentId = parentNode ? parentNode.key : null;
        this.tree = createTreeFromList(this.list);
    }
    handleRemove({ key }) {
        this.updateTreeFromList(this.list.filter(item => item.id !== key));
    }
    handleUpdate({ key, children }) {
        /**
         * When we need to update a node with new children, first we need to remove any descendant nodes.
         * If we remove immediate children and create a new tree, any other descendant nodes will be removed
         * and we won't need to recursively remove sub children.
         * Then, you simply add back the new children and create a new tree.
         */
        const listWithDescendantNodesRemoved = this.updateTreeFromList(this.list.filter(item => item.parentId !== key));
        this.updateTreeFromList(listWithDescendantNodesRemoved.concat(children));
    }
    updateTreeFromList(list) {
        this.tree = createTreeFromList(list);
        this.list = createListFromTree(this.tree);
        return this.list;
    }
}
// UTILITY FUNCTIONS
function createTreeFromList(list) {
    const map = createMapFromList(list);
    const tree = [];
    list.forEach(row => {
        const parentId = row.parentId;
        const node = map.get(row.id);
        if (parentId) {
            const parent = map.get(parentId);
            if (!parent)
                return;
            parent.children.push(node);
            parent.isLeaf = false;
        }
        else {
            tree.push(node);
        }
    });
    return tree;
}
function createListFromTree(tree, list = []) {
    tree.forEach(node => {
        list.push(Object.assign(Object.assign({}, node.entity), { parentId: node.parentId }));
        if (node.children)
            createListFromTree(node.children, list);
    });
    return list;
}
function createMapFromList(list, map = new Map()) {
    list.forEach(row => map.set(row.id, new TreeNode(row)));
    return map;
}

/**
 * Generated bundle index. Do not edit.
 */

export { BaseNode, ExpandedIconTemplateDirective, TreeAdapter, TreeComponent, TreeModule, TreeNodeTemplateDirective };
//# sourceMappingURL=abp-ng.components-tree.js.map
