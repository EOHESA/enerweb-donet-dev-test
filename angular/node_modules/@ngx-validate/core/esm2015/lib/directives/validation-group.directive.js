/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Injector, Input, Optional, Self, SkipSelf, } from '@angular/core';
import { FormGroupDirective, FormGroupName } from '@angular/forms';
import { ReplaySubject, Subscription } from 'rxjs';
import { AbstractValidationDirective } from '../abstracts';
export class ValidationGroupDirective extends AbstractValidationDirective {
    /**
     * @param {?} injector
     * @param {?} cdRef
     * @param {?} groupName
     * @param {?} groupRef
     * @param {?} parentRef
     */
    constructor(injector, cdRef, groupName, groupRef, parentRef) {
        super(injector);
        this.injector = injector;
        this.cdRef = cdRef;
        this.groupName = groupName;
        this.groupRef = groupRef;
        this.parentRef = parentRef;
        this.status$ = new ReplaySubject(1);
        this.submit$ = new ReplaySubject(1);
        this.value$ = new ReplaySubject(1);
        this.subs = new Subscription();
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToFormSubmit() {
        ((/** @type {?} */ (this.elRef.nativeElement))).onsubmit = (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (this.group.invalid)
                event.preventDefault();
            this.submit$.next(this.group);
            this.cdRef.markForCheck();
        });
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToStatusChanges() {
        this.subs.add(this.group.statusChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this.status$.next(this.group);
            this.cdRef.markForCheck();
        })));
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToValueChanges() {
        this.subs.add(this.group.valueChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this.value$.next(this.group);
            this.cdRef.markForCheck();
        })));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.parentRef)
            this.subscribeToFormSubmit();
        this.subscribeToStatusChanges();
        this.subscribeToValueChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
ValidationGroupDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line */
                selector: '[formGroup],[formGroupName]',
            },] }
];
/** @nocollapse */
ValidationGroupDirective.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: FormGroupName, decorators: [{ type: Optional }, { type: Self }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Self }] },
    { type: ValidationGroupDirective, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
ValidationGroupDirective.propDecorators = {
    _blueprints: [{ type: Input, args: ['blueprints',] }],
    _errorTemplate: [{ type: Input, args: ['errorTemplate',] }],
    _invalidClasses: [{ type: Input, args: ['invalidClasses',] }],
    _mapErrorsFn: [{ type: Input, args: ['mapErrorsFn',] }],
    _skipValidation: [{ type: Input, args: ['skipValidation',] }],
    _targetSelector: [{ type: Input, args: ['targetSelector',] }],
    _validateOnSubmit: [{ type: Input, args: ['validateOnSubmit',] }]
};
if (false) {
    /** @type {?} */
    ValidationGroupDirective.prototype.status$;
    /** @type {?} */
    ValidationGroupDirective.prototype.submit$;
    /** @type {?} */
    ValidationGroupDirective.prototype.value$;
    /** @type {?} */
    ValidationGroupDirective.prototype._blueprints;
    /** @type {?} */
    ValidationGroupDirective.prototype._errorTemplate;
    /** @type {?} */
    ValidationGroupDirective.prototype._invalidClasses;
    /** @type {?} */
    ValidationGroupDirective.prototype._mapErrorsFn;
    /** @type {?} */
    ValidationGroupDirective.prototype._skipValidation;
    /** @type {?} */
    ValidationGroupDirective.prototype._targetSelector;
    /** @type {?} */
    ValidationGroupDirective.prototype._validateOnSubmit;
    /**
     * @type {?}
     * @private
     */
    ValidationGroupDirective.prototype.subs;
    /** @type {?} */
    ValidationGroupDirective.prototype.injector;
    /** @type {?} */
    ValidationGroupDirective.prototype.cdRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupName;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.parentRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFFTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFFBQVEsRUFDUixLQUFLLEVBRUwsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEdBR1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFhLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQU8zRCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsMkJBQTJCOzs7Ozs7OztJQTZCdkUsWUFDUyxRQUFrQixFQUNsQixLQUF3QixFQUd4QixTQUF3QixFQUd4QixRQUE0QixFQUc1QixTQUFtQztRQUUxQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFaVCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBR3hCLGNBQVMsR0FBVCxTQUFTLENBQWU7UUFHeEIsYUFBUSxHQUFSLFFBQVEsQ0FBb0I7UUFHNUIsY0FBUyxHQUFULFNBQVMsQ0FBMEI7UUF0QzVDLFlBQU8sR0FBRyxJQUFJLGFBQWEsQ0FBWSxDQUFDLENBQUMsQ0FBQztRQUMxQyxZQUFPLEdBQUcsSUFBSSxhQUFhLENBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUMsV0FBTSxHQUFHLElBQUksYUFBYSxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBdUJqQyxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQWdCbEMsQ0FBQzs7Ozs7SUFFTyxxQkFBcUI7UUFDM0IsQ0FBQyxtQkFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBbUIsQ0FBQyxDQUFDLFFBQVE7Ozs7UUFBRyxLQUFLLENBQUMsRUFBRTtZQUMvRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztnQkFBRSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxDQUFBLENBQUM7SUFDSixDQUFDOzs7OztJQUVPLHdCQUF3QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRU8sdUJBQXVCO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7O1lBbkZGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLDZCQUE2QjthQUN4Qzs7OztZQWpCQyxRQUFRO1lBRlIsaUJBQWlCO1lBV3FCLGFBQWEsdUJBeUNoRCxRQUFRLFlBQ1IsSUFBSTtZQTFDVyxrQkFBa0IsdUJBNENqQyxRQUFRLFlBQ1IsSUFBSTtZQUlhLHdCQUF3Qix1QkFGekMsUUFBUSxZQUNSLFFBQVE7OzswQkFqQ1YsS0FBSyxTQUFDLFlBQVk7NkJBR2xCLEtBQUssU0FBQyxlQUFlOzhCQUdyQixLQUFLLFNBQUMsZ0JBQWdCOzJCQUd0QixLQUFLLFNBQUMsYUFBYTs4QkFHbkIsS0FBSyxTQUFDLGdCQUFnQjs4QkFHdEIsS0FBSyxTQUFDLGdCQUFnQjtnQ0FHdEIsS0FBSyxTQUFDLGtCQUFrQjs7OztJQXRCekIsMkNBQTBDOztJQUMxQywyQ0FBMEM7O0lBQzFDLDBDQUF5Qzs7SUFFekMsK0NBQ21DOztJQUVuQyxrREFDNkM7O0lBRTdDLG1EQUN3Qjs7SUFFeEIsZ0RBQ3FDOztJQUVyQyxtREFDeUI7O0lBRXpCLG1EQUN3Qjs7SUFFeEIscURBQzJCOzs7OztJQUUzQix3Q0FBa0M7O0lBR2hDLDRDQUF5Qjs7SUFDekIseUNBQStCOztJQUMvQiw2Q0FFK0I7O0lBQy9CLDRDQUVtQzs7SUFDbkMsNkNBRTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxuICBTZWxmLFxuICBTa2lwU2VsZixcbiAgVGVtcGxhdGVSZWYsXG4gIFR5cGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtR3JvdXBEaXJlY3RpdmUsIEZvcm1Hcm91cE5hbWUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4uL2Fic3RyYWN0cyc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSAnLi4vbW9kZWxzJztcblxuQERpcmVjdGl2ZSh7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuICBzZWxlY3RvcjogJ1tmb3JtR3JvdXBdLFtmb3JtR3JvdXBOYW1lXScsXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZVxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHN0YXR1cyQgPSBuZXcgUmVwbGF5U3ViamVjdDxGb3JtR3JvdXA+KDEpO1xuICBzdWJtaXQkID0gbmV3IFJlcGxheVN1YmplY3Q8Rm9ybUdyb3VwPigxKTtcbiAgdmFsdWUkID0gbmV3IFJlcGxheVN1YmplY3Q8Rm9ybUdyb3VwPigxKTtcblxuICBASW5wdXQoJ2JsdWVwcmludHMnKVxuICBfYmx1ZXByaW50czogVmFsaWRhdGlvbi5CbHVlcHJpbnRzO1xuXG4gIEBJbnB1dCgnZXJyb3JUZW1wbGF0ZScpXG4gIF9lcnJvclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgVHlwZTxhbnk+O1xuXG4gIEBJbnB1dCgnaW52YWxpZENsYXNzZXMnKVxuICBfaW52YWxpZENsYXNzZXM6IHN0cmluZztcblxuICBASW5wdXQoJ21hcEVycm9yc0ZuJylcbiAgX21hcEVycm9yc0ZuOiBWYWxpZGF0aW9uLk1hcEVycm9yc0ZuO1xuXG4gIEBJbnB1dCgnc2tpcFZhbGlkYXRpb24nKVxuICBfc2tpcFZhbGlkYXRpb246IGJvb2xlYW47XG5cbiAgQElucHV0KCd0YXJnZXRTZWxlY3RvcicpXG4gIF90YXJnZXRTZWxlY3Rvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgndmFsaWRhdGVPblN1Ym1pdCcpXG4gIF92YWxpZGF0ZU9uU3VibWl0OiBib29sZWFuO1xuXG4gIHByaXZhdGUgc3VicyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHB1YmxpYyBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKClcbiAgICBAU2VsZigpXG4gICAgcHVibGljIGdyb3VwTmFtZTogRm9ybUdyb3VwTmFtZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTZWxmKClcbiAgICBwdWJsaWMgZ3JvdXBSZWY6IEZvcm1Hcm91cERpcmVjdGl2ZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTa2lwU2VsZigpXG4gICAgcHVibGljIHBhcmVudFJlZjogVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlLFxuICApIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvRm9ybVN1Ym1pdCgpIHtcbiAgICAodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxGb3JtRWxlbWVudCkub25zdWJtaXQgPSBldmVudCA9PiB7XG4gICAgICBpZiAodGhpcy5ncm91cC5pbnZhbGlkKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zdWJtaXQkLm5leHQodGhpcy5ncm91cCk7XG4gICAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvU3RhdHVzQ2hhbmdlcygpIHtcbiAgICB0aGlzLnN1YnMuYWRkKFxuICAgICAgdGhpcy5ncm91cC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdHVzJC5uZXh0KHRoaXMuZ3JvdXApO1xuICAgICAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9WYWx1ZUNoYW5nZXMoKSB7XG4gICAgdGhpcy5zdWJzLmFkZChcbiAgICAgIHRoaXMuZ3JvdXAudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMudmFsdWUkLm5leHQodGhpcy5ncm91cCk7XG4gICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnRSZWYpIHRoaXMuc3Vic2NyaWJlVG9Gb3JtU3VibWl0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVUb1N0YXR1c0NoYW5nZXMoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvVmFsdWVDaGFuZ2VzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnMudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19