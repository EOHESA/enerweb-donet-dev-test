/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, Optional, Renderer2, Self, SkipSelf, TemplateRef, ViewContainerRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { merge, NEVER, Subscription } from 'rxjs';
import { filter, map, mapTo } from 'rxjs/operators';
import { AbstractValidationDirective } from '../abstracts';
import { generateValidationError } from '../utils';
import { ValidationGroupDirective } from './validation-group.directive';
import { ValidationStyleDirective } from './validation-style.directive';
import { ValidationTargetDirective } from './validation-target.directive';
export class ValidationDirective extends AbstractValidationDirective {
    /**
     * @param {?} injector
     * @param {?} cdRef
     * @param {?} cfRes
     * @param {?} control
     * @param {?} renderer
     * @param {?} vcRef
     * @param {?} parentRef
     * @param {?} markRef
     * @param {?} targetRef
     */
    constructor(injector, cdRef, cfRes, control, renderer, vcRef, parentRef, markRef, targetRef) {
        super(injector);
        this.injector = injector;
        this.cdRef = cdRef;
        this.cfRes = cfRes;
        this.control = control;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.parentRef = parentRef;
        this.markRef = markRef;
        this.targetRef = targetRef;
        this.subscriptions = new Subscription();
    }
    /**
     * @return {?}
     */
    get validation$() {
        return merge(this.parent.getStream('status').pipe(mapTo(null)), this.parent.getStream('value').pipe(mapTo(null)), this.validateOnSubmit ? this.parent.getStream('submit') : NEVER);
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    buildErrors(errors) {
        return Object.keys(errors || {}).map((/**
         * @param {?} key
         * @return {?}
         */
        key => generateValidationError(key, errors[key], this.blueprints[key])));
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    insertErrors(errors) {
        /** @type {?} */
        const template = this.errorTemplate;
        /** @type {?} */
        const vcRef = this.targetRef ? this.targetRef.vcRef : this.vcRef;
        this.errorRef =
            template instanceof TemplateRef
                ? vcRef.createEmbeddedView(template, { $implicit: errors }, vcRef.length)
                : vcRef.createComponent(this.cfRes.resolveComponentFactory(template), vcRef.length, this.injector);
        if (this.errorRef instanceof ComponentRef && this.errorRef.instance)
            ((/** @type {?} */ (this.errorRef))).instance.validationErrors = errors;
    }
    /**
     * @private
     * @return {?}
     */
    removeErrors() {
        if (this.errorRef) {
            this.errorRef.destroy();
            this.errorRef = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setMarkElement() {
        this.markElement =
            (this.markRef
                ? this.markRef.elRef.nativeElement
                : this.targetSelector
                    ? this.elRef.nativeElement.closest(this.targetSelector)
                    : null) || this.elRef.nativeElement;
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToValidation() {
        /** @type {?} */
        let cached;
        this.subscriptions.add(this.validation$
            .pipe(filter((/**
         * @return {?}
         */
        () => !this.skipValidation)), map((/**
         * @param {?} form
         * @return {?}
         */
        form => ({
            errors: this.mapErrorsFn(this.buildErrors(this.control.errors), this.buildErrors(this.parentRef.group.errors), this.control),
            form,
        }))))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ errors, form }) => {
            if (cached === JSON.stringify(errors))
                return;
            this.removeErrors();
            if (errors.length && (this.control.dirty || form)) {
                this.insertErrors(errors);
                this.renderer.addClass(this.markElement, this.invalidClasses);
                cached = JSON.stringify(errors);
            }
            else {
                this.renderer.removeClass(this.markElement, this.invalidClasses);
                cached = '';
            }
            this.cdRef.markForCheck();
        })));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setMarkElement();
        this.subscribeToValidation();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ValidationDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line */
                selector: '[formControl],[formControlName]',
            },] }
];
/** @nocollapse */
ValidationDirective.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: NgControl, decorators: [{ type: Self }] },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ValidationGroupDirective, decorators: [{ type: SkipSelf }] },
    { type: ValidationStyleDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: ValidationTargetDirective, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
ValidationDirective.propDecorators = {
    _blueprints: [{ type: Input, args: ['blueprints',] }],
    _errorTemplate: [{ type: Input, args: ['errorTemplate',] }],
    _invalidClasses: [{ type: Input, args: ['invalidClasses',] }],
    _mapErrorsFn: [{ type: Input, args: ['mapErrorsFn',] }],
    _skipValidation: [{ type: Input, args: ['skipValidation',] }],
    _targetSelector: [{ type: Input, args: ['targetSelector',] }],
    _validateOnSubmit: [{ type: Input, args: ['validateOnSubmit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.errorRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markElement;
    /** @type {?} */
    ValidationDirective.prototype._blueprints;
    /** @type {?} */
    ValidationDirective.prototype._errorTemplate;
    /** @type {?} */
    ValidationDirective.prototype._invalidClasses;
    /** @type {?} */
    ValidationDirective.prototype._mapErrorsFn;
    /** @type {?} */
    ValidationDirective.prototype._skipValidation;
    /** @type {?} */
    ValidationDirective.prototype._targetSelector;
    /** @type {?} */
    ValidationDirective.prototype._validateOnSubmit;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.subscriptions;
    /** @type {?} */
    ValidationDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cfRes;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.control;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.vcRef;
    /** @type {?} */
    ValidationDirective.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.targetRef;
}
//# sourceMappingURL=data:application/json;base64,