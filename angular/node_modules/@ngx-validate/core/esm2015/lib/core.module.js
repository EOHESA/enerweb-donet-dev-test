/**
 * @fileoverview added by tsickle
 * Generated from: lib/core.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AbstractValidationDirective } from './abstracts/abstract-validation.directive';
import { ValidationErrorComponent } from './components/validation-error.component';
import { BLUEPRINTS } from './constants/blueprints';
import { ValidationGroupDirective } from './directives/validation-group.directive';
import { ValidationStyleDirective } from './directives/validation-style.directive';
import { ValidationTargetDirective } from './directives/validation-target.directive';
import { ValidationDirective } from './directives/validation.directive';
import { VALIDATION_BLUEPRINTS } from './tokens/blueprints.token';
import { VALIDATION_ERROR_TEMPLATE } from './tokens/error-template.token';
import { VALIDATION_INVALID_CLASSES } from './tokens/invalid-classes.token';
import { VALIDATION_MAP_ERRORS_FN } from './tokens/map-errors-fn.token';
import { VALIDATION_TARGET_SELECTOR } from './tokens/target-selector.token';
import { VALIDATION_VALIDATE_ON_SUBMIT } from './tokens/validate-on-submit.token';
import { defaultMapErrorsFn } from './utils/mappers';
export class NgxValidateCoreModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = (/** @type {?} */ ({}))) {
        return {
            ngModule: NgxValidateCoreModule,
            providers: [
                {
                    provide: VALIDATION_BLUEPRINTS,
                    useValue: config.blueprints || BLUEPRINTS,
                },
                {
                    provide: VALIDATION_ERROR_TEMPLATE,
                    useValue: config.errorTemplate || ValidationErrorComponent,
                },
                {
                    provide: VALIDATION_INVALID_CLASSES,
                    useValue: config.invalidClasses || 'is-invalid',
                },
                {
                    provide: VALIDATION_MAP_ERRORS_FN,
                    useValue: config.mapErrorsFn || defaultMapErrorsFn,
                },
                {
                    provide: VALIDATION_TARGET_SELECTOR,
                    useValue: config.targetSelector,
                },
                {
                    provide: VALIDATION_VALIDATE_ON_SUBMIT,
                    useValue: config.validateOnSubmit,
                },
            ],
        };
    }
}
NgxValidateCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, ReactiveFormsModule],
                exports: [ValidationGroupDirective, ValidationStyleDirective, ValidationTargetDirective, ValidationDirective],
                declarations: [
                    ValidationErrorComponent,
                    AbstractValidationDirective,
                    ValidationGroupDirective,
                    ValidationStyleDirective,
                    ValidationTargetDirective,
                    ValidationDirective,
                ],
                entryComponents: [ValidationErrorComponent],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29yZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUV4RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWVyRCxNQUFNLE9BQU8scUJBQXFCOzs7OztJQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxtQkFBQSxFQUFFLEVBQXFCO1FBQzdDLE9BQU87WUFDTCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUscUJBQXFCO29CQUM5QixRQUFRLEVBQUUsTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVO2lCQUMxQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGFBQWEsSUFBSSx3QkFBd0I7aUJBQzNEO2dCQUNEO29CQUNFLE9BQU8sRUFBRSwwQkFBMEI7b0JBQ25DLFFBQVEsRUFBRSxNQUFNLENBQUMsY0FBYyxJQUFJLFlBQVk7aUJBQ2hEO2dCQUNEO29CQUNFLE9BQU8sRUFBRSx3QkFBd0I7b0JBQ2pDLFFBQVEsRUFBRSxNQUFNLENBQUMsV0FBVyxJQUFJLGtCQUFrQjtpQkFDbkQ7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLDBCQUEwQjtvQkFDbkMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxjQUFjO2lCQUNoQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsNkJBQTZCO29CQUN0QyxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQjtpQkFDbEM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUE1Q0YsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsbUJBQW1CLENBQUM7Z0JBQ3pELE9BQU8sRUFBRSxDQUFDLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLHlCQUF5QixFQUFFLG1CQUFtQixDQUFDO2dCQUM3RyxZQUFZLEVBQUU7b0JBQ1osd0JBQXdCO29CQUN4QiwyQkFBMkI7b0JBQzNCLHdCQUF3QjtvQkFDeEIsd0JBQXdCO29CQUN4Qix5QkFBeUI7b0JBQ3pCLG1CQUFtQjtpQkFDcEI7Z0JBQ0QsZUFBZSxFQUFFLENBQUMsd0JBQXdCLENBQUM7YUFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9hYnN0cmFjdHMvYWJzdHJhY3QtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3ZhbGlkYXRpb24tZXJyb3IuY29tcG9uZW50JztcbmltcG9ydCB7IEJMVUVQUklOVFMgfSBmcm9tICcuL2NvbnN0YW50cy9ibHVlcHJpbnRzJztcbmltcG9ydCB7IFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uU3R5bGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi1zdHlsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblRhcmdldERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0aW9uLXRhcmdldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSAnLi9tb2RlbHMvdmFsaWRhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBWQUxJREFUSU9OX0JMVUVQUklOVFMgfSBmcm9tICcuL3Rva2Vucy9ibHVlcHJpbnRzLnRva2VuJztcbmltcG9ydCB7IFZBTElEQVRJT05fRVJST1JfVEVNUExBVEUgfSBmcm9tICcuL3Rva2Vucy9lcnJvci10ZW1wbGF0ZS50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX0lOVkFMSURfQ0xBU1NFUyB9IGZyb20gJy4vdG9rZW5zL2ludmFsaWQtY2xhc3Nlcy50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX01BUF9FUlJPUlNfRk4gfSBmcm9tICcuL3Rva2Vucy9tYXAtZXJyb3JzLWZuLnRva2VuJztcbmltcG9ydCB7IFZBTElEQVRJT05fVEFSR0VUX1NFTEVDVE9SIH0gZnJvbSAnLi90b2tlbnMvdGFyZ2V0LXNlbGVjdG9yLnRva2VuJztcbmltcG9ydCB7IFZBTElEQVRJT05fVkFMSURBVEVfT05fU1VCTUlUIH0gZnJvbSAnLi90b2tlbnMvdmFsaWRhdGUtb24tc3VibWl0LnRva2VuJztcbmltcG9ydCB7IGRlZmF1bHRNYXBFcnJvcnNGbiB9IGZyb20gJy4vdXRpbHMvbWFwcGVycyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlXSxcbiAgZXhwb3J0czogW1ZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSwgVmFsaWRhdGlvblN0eWxlRGlyZWN0aXZlLCBWYWxpZGF0aW9uVGFyZ2V0RGlyZWN0aXZlLCBWYWxpZGF0aW9uRGlyZWN0aXZlXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50LFxuICAgIEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBWYWxpZGF0aW9uR3JvdXBEaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvblN0eWxlRGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25UYXJnZXREaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4VmFsaWRhdGVDb3JlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnID0ge30gYXMgVmFsaWRhdGlvbi5Db25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5neFZhbGlkYXRlQ29yZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4VmFsaWRhdGVDb3JlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX0JMVUVQUklOVFMsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZy5ibHVlcHJpbnRzIHx8IEJMVUVQUklOVFMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX0VSUk9SX1RFTVBMQVRFLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcuZXJyb3JUZW1wbGF0ZSB8fCBWYWxpZGF0aW9uRXJyb3JDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX0lOVkFMSURfQ0xBU1NFUyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLmludmFsaWRDbGFzc2VzIHx8ICdpcy1pbnZhbGlkJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRJT05fTUFQX0VSUk9SU19GTixcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLm1hcEVycm9yc0ZuIHx8IGRlZmF1bHRNYXBFcnJvcnNGbixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRJT05fVEFSR0VUX1NFTEVDVE9SLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcudGFyZ2V0U2VsZWN0b3IsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX1ZBTElEQVRFX09OX1NVQk1JVCxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLnZhbGlkYXRlT25TdWJtaXQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==