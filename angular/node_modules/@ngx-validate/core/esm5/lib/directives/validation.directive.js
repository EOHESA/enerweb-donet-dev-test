/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, Optional, Renderer2, Self, SkipSelf, TemplateRef, ViewContainerRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { merge, NEVER, Subscription } from 'rxjs';
import { filter, map, mapTo } from 'rxjs/operators';
import { AbstractValidationDirective } from '../abstracts';
import { generateValidationError } from '../utils';
import { ValidationGroupDirective } from './validation-group.directive';
import { ValidationStyleDirective } from './validation-style.directive';
import { ValidationTargetDirective } from './validation-target.directive';
var ValidationDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ValidationDirective, _super);
    function ValidationDirective(injector, cdRef, cfRes, control, renderer, vcRef, parentRef, markRef, targetRef) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.cdRef = cdRef;
        _this.cfRes = cfRes;
        _this.control = control;
        _this.renderer = renderer;
        _this.vcRef = vcRef;
        _this.parentRef = parentRef;
        _this.markRef = markRef;
        _this.targetRef = targetRef;
        _this.subscriptions = new Subscription();
        return _this;
    }
    Object.defineProperty(ValidationDirective.prototype, "validation$", {
        get: /**
         * @return {?}
         */
        function () {
            return merge(this.parent.getStream('status').pipe(mapTo(null)), this.parent.getStream('value').pipe(mapTo(null)), this.validateOnSubmit ? this.parent.getStream('submit') : NEVER);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    ValidationDirective.prototype.buildErrors = /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        var _this = this;
        return Object.keys(errors || {}).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return generateValidationError(key, errors[key], _this.blueprints[key]);
        }));
    };
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    ValidationDirective.prototype.insertErrors = /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        /** @type {?} */
        var template = this.errorTemplate;
        /** @type {?} */
        var vcRef = this.targetRef ? this.targetRef.vcRef : this.vcRef;
        this.errorRef =
            template instanceof TemplateRef
                ? vcRef.createEmbeddedView(template, { $implicit: errors }, vcRef.length)
                : vcRef.createComponent(this.cfRes.resolveComponentFactory(template), vcRef.length, this.injector);
        if (this.errorRef instanceof ComponentRef && this.errorRef.instance)
            ((/** @type {?} */ (this.errorRef))).instance.validationErrors = errors;
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.removeErrors = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.errorRef) {
            this.errorRef.destroy();
            this.errorRef = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.setMarkElement = /**
     * @private
     * @return {?}
     */
    function () {
        this.markElement =
            (this.markRef
                ? this.markRef.elRef.nativeElement
                : this.targetSelector
                    ? this.elRef.nativeElement.closest(this.targetSelector)
                    : null) || this.elRef.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.subscribeToValidation = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var cached;
        this.subscriptions.add(this.validation$
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !_this.skipValidation; })), map((/**
         * @param {?} form
         * @return {?}
         */
        function (form) { return ({
            errors: _this.mapErrorsFn(_this.buildErrors(_this.control.errors), _this.buildErrors(_this.parentRef.group.errors), _this.control),
            form: form,
        }); })))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var errors = _a.errors, form = _a.form;
            if (cached === JSON.stringify(errors))
                return;
            _this.removeErrors();
            if (errors.length && (_this.control.dirty || form)) {
                _this.insertErrors(errors);
                _this.renderer.addClass(_this.markElement, _this.invalidClasses);
                cached = JSON.stringify(errors);
            }
            else {
                _this.renderer.removeClass(_this.markElement, _this.invalidClasses);
                cached = '';
            }
            _this.cdRef.markForCheck();
        })));
    };
    /**
     * @return {?}
     */
    ValidationDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setMarkElement();
        this.subscribeToValidation();
    };
    /**
     * @return {?}
     */
    ValidationDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.unsubscribe();
    };
    ValidationDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line */
                    selector: '[formControl],[formControlName]',
                },] }
    ];
    /** @nocollapse */
    ValidationDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: NgControl, decorators: [{ type: Self }] },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ValidationGroupDirective, decorators: [{ type: SkipSelf }] },
        { type: ValidationStyleDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: ValidationTargetDirective, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    ValidationDirective.propDecorators = {
        _blueprints: [{ type: Input, args: ['blueprints',] }],
        _errorTemplate: [{ type: Input, args: ['errorTemplate',] }],
        _invalidClasses: [{ type: Input, args: ['invalidClasses',] }],
        _mapErrorsFn: [{ type: Input, args: ['mapErrorsFn',] }],
        _skipValidation: [{ type: Input, args: ['skipValidation',] }],
        _targetSelector: [{ type: Input, args: ['targetSelector',] }],
        _validateOnSubmit: [{ type: Input, args: ['validateOnSubmit',] }]
    };
    return ValidationDirective;
}(AbstractValidationDirective));
export { ValidationDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.errorRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markElement;
    /** @type {?} */
    ValidationDirective.prototype._blueprints;
    /** @type {?} */
    ValidationDirective.prototype._errorTemplate;
    /** @type {?} */
    ValidationDirective.prototype._invalidClasses;
    /** @type {?} */
    ValidationDirective.prototype._mapErrorsFn;
    /** @type {?} */
    ValidationDirective.prototype._skipValidation;
    /** @type {?} */
    ValidationDirective.prototype._targetSelector;
    /** @type {?} */
    ValidationDirective.prototype._validateOnSubmit;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.subscriptions;
    /** @type {?} */
    ValidationDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cfRes;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.control;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.vcRef;
    /** @type {?} */
    ValidationDirective.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.targetRef;
}
//# sourceMappingURL=data:application/json;base64,