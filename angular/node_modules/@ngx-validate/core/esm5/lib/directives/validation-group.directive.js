/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation-group.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, Injector, Input, Optional, Self, SkipSelf, } from '@angular/core';
import { FormGroupDirective, FormGroupName } from '@angular/forms';
import { ReplaySubject, Subscription } from 'rxjs';
import { AbstractValidationDirective } from '../abstracts';
var ValidationGroupDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ValidationGroupDirective, _super);
    function ValidationGroupDirective(injector, cdRef, groupName, groupRef, parentRef) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.cdRef = cdRef;
        _this.groupName = groupName;
        _this.groupRef = groupRef;
        _this.parentRef = parentRef;
        _this.status$ = new ReplaySubject(1);
        _this.submit$ = new ReplaySubject(1);
        _this.value$ = new ReplaySubject(1);
        _this.subs = new Subscription();
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    ValidationGroupDirective.prototype.subscribeToFormSubmit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ((/** @type {?} */ (this.elRef.nativeElement))).onsubmit = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.group.invalid)
                event.preventDefault();
            _this.submit$.next(_this.group);
            _this.cdRef.markForCheck();
        });
    };
    /**
     * @private
     * @return {?}
     */
    ValidationGroupDirective.prototype.subscribeToStatusChanges = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subs.add(this.group.statusChanges.subscribe((/**
         * @return {?}
         */
        function () {
            _this.status$.next(_this.group);
            _this.cdRef.markForCheck();
        })));
    };
    /**
     * @private
     * @return {?}
     */
    ValidationGroupDirective.prototype.subscribeToValueChanges = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.subs.add(this.group.valueChanges.subscribe((/**
         * @return {?}
         */
        function () {
            _this.value$.next(_this.group);
            _this.cdRef.markForCheck();
        })));
    };
    /**
     * @return {?}
     */
    ValidationGroupDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.parentRef)
            this.subscribeToFormSubmit();
        this.subscribeToStatusChanges();
        this.subscribeToValueChanges();
    };
    /**
     * @return {?}
     */
    ValidationGroupDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subs.unsubscribe();
    };
    ValidationGroupDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line */
                    selector: '[formGroup],[formGroupName]',
                },] }
    ];
    /** @nocollapse */
    ValidationGroupDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: FormGroupName, decorators: [{ type: Optional }, { type: Self }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Self }] },
        { type: ValidationGroupDirective, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    ValidationGroupDirective.propDecorators = {
        _blueprints: [{ type: Input, args: ['blueprints',] }],
        _errorTemplate: [{ type: Input, args: ['errorTemplate',] }],
        _invalidClasses: [{ type: Input, args: ['invalidClasses',] }],
        _mapErrorsFn: [{ type: Input, args: ['mapErrorsFn',] }],
        _skipValidation: [{ type: Input, args: ['skipValidation',] }],
        _targetSelector: [{ type: Input, args: ['targetSelector',] }],
        _validateOnSubmit: [{ type: Input, args: ['validateOnSubmit',] }]
    };
    return ValidationGroupDirective;
}(AbstractValidationDirective));
export { ValidationGroupDirective };
if (false) {
    /** @type {?} */
    ValidationGroupDirective.prototype.status$;
    /** @type {?} */
    ValidationGroupDirective.prototype.submit$;
    /** @type {?} */
    ValidationGroupDirective.prototype.value$;
    /** @type {?} */
    ValidationGroupDirective.prototype._blueprints;
    /** @type {?} */
    ValidationGroupDirective.prototype._errorTemplate;
    /** @type {?} */
    ValidationGroupDirective.prototype._invalidClasses;
    /** @type {?} */
    ValidationGroupDirective.prototype._mapErrorsFn;
    /** @type {?} */
    ValidationGroupDirective.prototype._skipValidation;
    /** @type {?} */
    ValidationGroupDirective.prototype._targetSelector;
    /** @type {?} */
    ValidationGroupDirective.prototype._validateOnSubmit;
    /**
     * @type {?}
     * @private
     */
    ValidationGroupDirective.prototype.subs;
    /** @type {?} */
    ValidationGroupDirective.prototype.injector;
    /** @type {?} */
    ValidationGroupDirective.prototype.cdRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupName;
    /** @type {?} */
    ValidationGroupDirective.prototype.groupRef;
    /** @type {?} */
    ValidationGroupDirective.prototype.parentRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxRQUFRLEVBQ1IsS0FBSyxFQUVMLFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxHQUdULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHM0Q7SUFJOEMsb0RBQTJCO0lBNkJ2RSxrQ0FDUyxRQUFrQixFQUNsQixLQUF3QixFQUd4QixTQUF3QixFQUd4QixRQUE0QixFQUc1QixTQUFtQztRQVg1QyxZQWFFLGtCQUFNLFFBQVEsQ0FBQyxTQUNoQjtRQWJRLGNBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsV0FBSyxHQUFMLEtBQUssQ0FBbUI7UUFHeEIsZUFBUyxHQUFULFNBQVMsQ0FBZTtRQUd4QixjQUFRLEdBQVIsUUFBUSxDQUFvQjtRQUc1QixlQUFTLEdBQVQsU0FBUyxDQUEwQjtRQXRDNUMsYUFBTyxHQUFHLElBQUksYUFBYSxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzFDLGFBQU8sR0FBRyxJQUFJLGFBQWEsQ0FBWSxDQUFDLENBQUMsQ0FBQztRQUMxQyxZQUFNLEdBQUcsSUFBSSxhQUFhLENBQVksQ0FBQyxDQUFDLENBQUM7UUF1QmpDLFVBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQWdCbEMsQ0FBQzs7Ozs7SUFFTyx3REFBcUI7Ozs7SUFBN0I7UUFBQSxpQkFNQztRQUxDLENBQUMsbUJBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQW1CLENBQUMsQ0FBQyxRQUFROzs7O1FBQUcsVUFBQSxLQUFLO1lBQzVELElBQUksS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO2dCQUFFLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUMvQyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsS0FBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRU8sMkRBQXdCOzs7O0lBQWhDO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7UUFBQztZQUNqQyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsS0FBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFTywwREFBdUI7Ozs7SUFBL0I7UUFBQSxpQkFPQztRQU5DLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVM7OztRQUFDO1lBQ2hDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixLQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7O0lBRUQsa0RBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDakMsQ0FBQzs7OztJQUVELDhDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Z0JBbkZGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLDZCQUE2QjtpQkFDeEM7Ozs7Z0JBakJDLFFBQVE7Z0JBRlIsaUJBQWlCO2dCQVdxQixhQUFhLHVCQXlDaEQsUUFBUSxZQUNSLElBQUk7Z0JBMUNXLGtCQUFrQix1QkE0Q2pDLFFBQVEsWUFDUixJQUFJO2dCQUlhLHdCQUF3Qix1QkFGekMsUUFBUSxZQUNSLFFBQVE7Ozs4QkFqQ1YsS0FBSyxTQUFDLFlBQVk7aUNBR2xCLEtBQUssU0FBQyxlQUFlO2tDQUdyQixLQUFLLFNBQUMsZ0JBQWdCOytCQUd0QixLQUFLLFNBQUMsYUFBYTtrQ0FHbkIsS0FBSyxTQUFDLGdCQUFnQjtrQ0FHdEIsS0FBSyxTQUFDLGdCQUFnQjtvQ0FHdEIsS0FBSyxTQUFDLGtCQUFrQjs7SUF3RDNCLCtCQUFDO0NBQUEsQUFwRkQsQ0FJOEMsMkJBQTJCLEdBZ0Z4RTtTQWhGWSx3QkFBd0I7OztJQUVuQywyQ0FBMEM7O0lBQzFDLDJDQUEwQzs7SUFDMUMsMENBQXlDOztJQUV6QywrQ0FDbUM7O0lBRW5DLGtEQUM2Qzs7SUFFN0MsbURBQ3dCOztJQUV4QixnREFDcUM7O0lBRXJDLG1EQUN5Qjs7SUFFekIsbURBQ3dCOztJQUV4QixxREFDMkI7Ozs7O0lBRTNCLHdDQUFrQzs7SUFHaEMsNENBQXlCOztJQUN6Qix5Q0FBK0I7O0lBQy9CLDZDQUUrQjs7SUFDL0IsNENBRW1DOztJQUNuQyw2Q0FFMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRGlyZWN0aXZlLFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIFNlbGYsXG4gIFNraXBTZWxmLFxuICBUZW1wbGF0ZVJlZixcbiAgVHlwZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Hcm91cERpcmVjdGl2ZSwgRm9ybUdyb3VwTmFtZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi4vYWJzdHJhY3RzJztcbmltcG9ydCB7IFZhbGlkYXRpb24gfSBmcm9tICcuLi9tb2RlbHMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lICovXG4gIHNlbGVjdG9yOiAnW2Zvcm1Hcm91cF0sW2Zvcm1Hcm91cE5hbWVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgc3RhdHVzJCA9IG5ldyBSZXBsYXlTdWJqZWN0PEZvcm1Hcm91cD4oMSk7XG4gIHN1Ym1pdCQgPSBuZXcgUmVwbGF5U3ViamVjdDxGb3JtR3JvdXA+KDEpO1xuICB2YWx1ZSQgPSBuZXcgUmVwbGF5U3ViamVjdDxGb3JtR3JvdXA+KDEpO1xuXG4gIEBJbnB1dCgnYmx1ZXByaW50cycpXG4gIF9ibHVlcHJpbnRzOiBWYWxpZGF0aW9uLkJsdWVwcmludHM7XG5cbiAgQElucHV0KCdlcnJvclRlbXBsYXRlJylcbiAgX2Vycm9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gfCBUeXBlPGFueT47XG5cbiAgQElucHV0KCdpbnZhbGlkQ2xhc3NlcycpXG4gIF9pbnZhbGlkQ2xhc3Nlczogc3RyaW5nO1xuXG4gIEBJbnB1dCgnbWFwRXJyb3JzRm4nKVxuICBfbWFwRXJyb3JzRm46IFZhbGlkYXRpb24uTWFwRXJyb3JzRm47XG5cbiAgQElucHV0KCdza2lwVmFsaWRhdGlvbicpXG4gIF9za2lwVmFsaWRhdGlvbjogYm9vbGVhbjtcblxuICBASW5wdXQoJ3RhcmdldFNlbGVjdG9yJylcbiAgX3RhcmdldFNlbGVjdG9yOiBzdHJpbmc7XG5cbiAgQElucHV0KCd2YWxpZGF0ZU9uU3VibWl0JylcbiAgX3ZhbGlkYXRlT25TdWJtaXQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBzdWJzID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHVibGljIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTZWxmKClcbiAgICBwdWJsaWMgZ3JvdXBOYW1lOiBGb3JtR3JvdXBOYW1lLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNlbGYoKVxuICAgIHB1YmxpYyBncm91cFJlZjogRm9ybUdyb3VwRGlyZWN0aXZlLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNraXBTZWxmKClcbiAgICBwdWJsaWMgcGFyZW50UmVmOiBWYWxpZGF0aW9uR3JvdXBEaXJlY3RpdmUsXG4gICkge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9Gb3JtU3VibWl0KCkge1xuICAgICh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEZvcm1FbGVtZW50KS5vbnN1Ym1pdCA9IGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLmdyb3VwLmludmFsaWQpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnN1Ym1pdCQubmV4dCh0aGlzLmdyb3VwKTtcbiAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9TdGF0dXNDaGFuZ2VzKCkge1xuICAgIHRoaXMuc3Vicy5hZGQoXG4gICAgICB0aGlzLmdyb3VwLnN0YXR1c0NoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0dXMkLm5leHQodGhpcy5ncm91cCk7XG4gICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb1ZhbHVlQ2hhbmdlcygpIHtcbiAgICB0aGlzLnN1YnMuYWRkKFxuICAgICAgdGhpcy5ncm91cC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy52YWx1ZSQubmV4dCh0aGlzLmdyb3VwKTtcbiAgICAgICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudFJlZikgdGhpcy5zdWJzY3JpYmVUb0Zvcm1TdWJtaXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvU3RhdHVzQ2hhbmdlcygpO1xuICAgIHRoaXMuc3Vic2NyaWJlVG9WYWx1ZUNoYW5nZXMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vicy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=