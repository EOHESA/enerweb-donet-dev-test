import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, Injector, OnDestroy, Renderer2, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { FormGroup, NgControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { AbstractValidationDirective } from '../abstracts';
import { Validation } from '../models';
import { ValidationGroupDirective } from './validation-group.directive';
import { ValidationStyleDirective } from './validation-style.directive';
import { ValidationTargetDirective } from './validation-target.directive';
export declare class ValidationDirective extends AbstractValidationDirective implements AfterViewInit, OnDestroy {
    injector: Injector;
    private cdRef;
    private cfRes;
    private control;
    private renderer;
    private vcRef;
    parentRef: ValidationGroupDirective;
    private markRef;
    private targetRef;
    private errorRef;
    private markElement;
    _blueprints: Validation.Blueprints;
    _errorTemplate: TemplateRef<any> | Type<any>;
    _invalidClasses: string;
    _mapErrorsFn: Validation.MapErrorsFn;
    _skipValidation: boolean;
    _targetSelector: string;
    _validateOnSubmit: boolean;
    readonly validation$: Observable<FormGroup>;
    private subscriptions;
    constructor(injector: Injector, cdRef: ChangeDetectorRef, cfRes: ComponentFactoryResolver, control: NgControl, renderer: Renderer2, vcRef: ViewContainerRef, parentRef: ValidationGroupDirective, markRef: ValidationStyleDirective, targetRef: ValidationTargetDirective);
    private buildErrors;
    private insertErrors;
    private removeErrors;
    private setMarkElement;
    private subscribeToValidation;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
}
